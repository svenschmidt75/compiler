/* Grammatik aus 'Praxis des Compilerbaus' */



%include
\{
1
2
3
4
5
6


\}



%definition

%union
{
	WORD	i;
	LONG	l;
}

%left	MY
%left	ADD SUB
%left	MUL DIV
%right	UMINUS



%term_type <i> ADD SUB ZAHL DIV MUL TERM1 TERM2
%nterm_type <l> expr term MyStart st
%nterm_type <i> factor



%grammar


MyStart	:	{ st [ 'TERM1' | { 'TERM2' expr } ] st }
		|	st
		;


st		:	expr  \{
printf( "%d", $-1 );
 \}
		;

expr	:	expr 'ADD' term  \{ $$ = $1 + $3; \}
		|	expr 'SUB' term  \{ $$ = $1 - $3; \}
		|	'SUB' expr  %prec UMINUS \{ $$ = -$2; \}
		|	term  \{ $$ = $1; \}
		;

term	:	term 'MUL' factor  \{ $$ = $1 * $3; \}
		|	term 'DIV' factor  \{ $$ = $1 / $3; \}
		|	factor  \{ $$ = $1; \}
		;

factor	:	'KLOPEN' expr 'KLCLOSE'  \{ $$ = $2; \}
%error
{
	1:SHIFT(KLOPEN)	"\nExpression syntax error !"
	1:SHIFT(KLOPEN)	"\nExpression syntax error !"
	1:ADD:DELETE:SHIFT(SUB)		"\nADD expected !"
	1:OVERREAD(ADD)		"\nSUB expected !"
	2:KLOPEN			"\nUse ')' instead of '(' !"
	2:SEM:EXIT:KLOPEN		"\nUse ')' instead of '(' !"
}
		|	'ZAHL'  \{ $$ = $1; \}
		;
