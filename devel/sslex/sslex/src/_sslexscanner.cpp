/***************************************************************************
                          sslexscanner.cpp  -  description
                             -------------------
    copyright            : (C) 2002 by Sven Schmidt
    email                : s.schmidt@lboro.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "_sslexscanner.h"
#include <iostream>


/****************************
* This is the debug-version *
****************************/




//Define macro ECHO
#define ECHO	cout << yyText

//set a new start condition in user-defined action
#define BEGIN	setStartCondition

//current start condition
#define YY_START	baseState

//yyTerminate
#define yyTerminate()	return( ACCEPT )


//concatenate lexem
#define yyMore()	concatenate = true


//Size of start condition stack
#define SCStackSize	100


//enlargement for yyText if neccesary
#define SSLEX_YYTEXTSIZE	(8*1024)



	//initialize user defined variables
	#define SSLEX_INIT

	//für das Lesen der reg. Ausdrücke in Text-Form
	#define SCAN_REG_TXT	1024



//Transition-Table
long SSLEXScanner::ssLexTable[SSLEX_STATE][CCLWIDTH] =
{
/*
  \0,  \1,  \2,  \3,  \4,  \5,  \6,  \a,  \b,  \t,  \n,  \v,  \f,  \r,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    ,   !,   ",   #,   $,   %,   &,   ',   (,   ),   *,   +,   ,,   -,   .,   /,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   :,   ;,   <,   =,   >,   ?,
   @,   A,   B,   C,   D,   E,   F,   G,   H,   I,   J,   K,   L,   M,   N,   O,   P,   Q,   R,   S,   T,   U,   V,   W,   X,   Y,   Z,   [,   \,   ],   ^,   _,
   `,   a,   b,   c,   d,   e,   f,   g,   h,   i,   j,   k,   l,   m,   n,   o,   p,   q,   r,   s,   t,   u,   v,   w,   x,   y,   z,   {,   |,   },   ~, DEL
*/

//Startcondition: INITIAL
/* 0 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   3,  -1,  -1,  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  -1,  -1,  -1,  -1,   4,
  -1,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  -1,  -1,  -1,  -1,  -1
},
/* 1 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   5,   6,  -1,  -1,  20,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   5,  -1,  -1,  -1,  -1,  21,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  22,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -1,  -1,  -1,  -1,   7,
  -1,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -1,  -1,  -1,  -1,  -1
},
/* 2 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   3,  -1,  -1,  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 3 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 4 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   4,  -1,  -1,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  -1,  -1,  -1,  -1,   4,
  -1,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  -1,  -1,  -1,  -1,  -1
},
/* 5 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   5,   6,  -1,  -1,  20,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   5,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 6 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 7 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -1,  -1,  -1,  -1,   7,
  -1,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -1,  -1,  -1,  -1,  -1
},
/* 8 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  48,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 9 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -1,  -1,  -1,  -1,  17,
  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -1,  -1,  -1,  -1,  -1
},
/* 10 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 11 */
{
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  -1,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11
},
/* 12 */
{
  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,
  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,
  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,
  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12
},
/* 13 */
{
  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  -1,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13
},
/* 14 */
{
  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  18,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,
  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,
  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,
  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14
},
/* 15 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 16 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 17 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  17,  -1,  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -1,  -1,  -1,  -1,  17,
  -1,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  -1,  -1,  -1,  -1,  -1
},
/* 18 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  18,  -1,  -1,  25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 19 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  14,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 20 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   6,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 21 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  46,  -1,  -1,  -1,  -1,  39,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   8,  -1,  -1,  -1,  -1,   9,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 22 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  10,  -1,  -1,  -1,  -1,  11,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 23 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 24 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 25 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  18,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 26 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  19,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 27 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  23,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 28 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  24,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 29 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  26,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 30 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 31 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  28,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 32 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  29,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 33 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  30,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 34 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 35 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  32,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 36 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 37 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 38 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  35,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 39 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 40 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  37,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 41 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  38,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 42 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  40,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 43 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  41,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 44 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  42,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 45 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  43,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 46 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 47 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  45,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},
/* 48 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  16,
  -1,  16,  16,  16,  16,  47,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SECT2
/* 49 */
{
  51,  51,  51,  51,  51,  51,  51,  51,  51,  52,  53,  51,  51,  80,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
  52,  51,  54,  51,  85,  51,  51,  51,  55,  56,  57,  58,  51,  51,  59,  60,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51, 115,  51,  51,  61,
  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  88,  91,  51,  51,  51,
  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  62,  63,  64,  51,  51
},
/* 50 */
{
  51,  51,  51,  51,  51,  51,  51,  51,  51,  72,  73,  51,  51,  94,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
  72,  51,  54,  51,  85, 119,  51,  51,  55,  56,  57,  58,  51,  51,  59,  81,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  74,  51,  51,  61,
  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  88,  91,  51,  75,  51,
  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  62,  63,  64,  51,  51
},
/* 51 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 52 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  52,  53,  -1,  -1,  79,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  52,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  84,  -1,  -1,  -1
},
/* 53 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 54 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 55 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 56 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 57 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 58 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 59 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 60 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 61 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 62 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  -1,  -1,  -1,  -1,  95,
  -1,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  -1,  -1,  -1,  -1,  -1
},
/* 63 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 64 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 65 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 66 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66, 109,  93,  -1,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66
},
/* 67 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 68 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 69 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 70 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 71 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 72 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  72,  73,  -1,  -1,  97,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  72,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  98,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  74,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  75,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  84,  -1,  -1,  -1
},
/* 73 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 74 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 113,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 75 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 76 */
{
  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  -1,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,
  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76
},
/* 77 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 78 */
{
  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  -1,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78
},
/* 79 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  53,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 80 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  53,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 81 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  76,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 82 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66, 109,  93,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66
},
/* 83 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  89,  89,  89,  89,  89,  89,  89,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 84 */
{
  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  69,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,
  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,
  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,
  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84
},
/* 85 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  65,  -1,  -1,  87,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 86 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  92,  92,  92,  92,  92,  92,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  92,  92,  92,  92,  92,  92,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 87 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 88 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66, 109,  93,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66
},
/* 89 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  67,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 90 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1, 110,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 91 */
{
  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  -1,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,
  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  83,  83,  83,  83,  83,  83,  83,  83,  67,  67,  67,  67,  67,  67,  67,  67,
  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,
  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  86,  67,  67,  67,  67,  67,  67,  67
},
/* 92 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  67,  67,  67,  67,  67,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 93 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66
},
/* 94 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 95 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  95,  -1,  -1,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  -1,  -1,  -1,  -1,  95,
  -1,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  -1,  -1,  70,  -1,  -1
},
/* 96 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  71,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 97 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 98 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  76,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 99 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  77,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 100 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  78,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 101 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  82,  66,  66,  66,  66,  66,
  66, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 109,  93,  -1,  66,  66,
  66, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,  66,  66,  66,  66,  66
},
/* 102 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  96,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 103 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  99,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 104 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 100,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 105 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 109,  93,  -1,  66,  66,
  66, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,  66,  66,  66,  66,  66
},
/* 106 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1, 102,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 107 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1, 103,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 108 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 104,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 109 */
{
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  -1,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66, 105,  66,  66,  66,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66, 109,  93,  -1,  66,  66,
  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66
},
/* 110 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 106,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 111 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 107,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 112 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 108,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 113 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1, 111,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 114 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 112,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 115 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  90,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 116 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1, 114,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 117 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 116,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 118 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 117,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 119 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1, 118,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: CODEBLOCK
/* 120 */
{
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 122, 122, 124, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122
},
/* 121 */
{
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 122, 122, 124, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122
},
/* 122 */
{
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,  -1, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122
},
/* 123 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 124 */
{
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122
},

//Startcondition: PICKUPDEF
/* 125 */
{
 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 129, 127, 127, 130, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
},
/* 126 */
{
 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 129, 127, 127, 130, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
},
/* 127 */
{
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
},
/* 128 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 128,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 128,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 129 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 130 */
{
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 129, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
},

//Startcondition: SC
/* 131 */
{
 133, 133, 133, 133, 133, 133, 133, 133, 133, 134,  -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
 134, 133, 133, 133, 133, 133, 133, 133, 133, 133, 135, 133, 136, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 137, 133,
 133, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 133, 133, 133, 133, 138,
 133, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 133, 133, 133, 133, 133
},
/* 132 */
{
 133, 133, 133, 133, 133, 133, 133, 133, 133, 134,  -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
 134, 133, 133, 133, 133, 133, 133, 133, 133, 133, 135, 133, 136, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 137, 133,
 133, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 133, 133, 133, 133, 138,
 133, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 133, 133, 133, 133, 133
},
/* 133 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 134 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 134,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 134,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 135 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 136 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 137 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 139,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 138 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 138,  -1,  -1, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,  -1,  -1,  -1,  -1, 138,
  -1, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138,  -1,  -1,  -1,  -1,  -1
},
/* 139 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: CARETISBOL
/* 140 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 142,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 141 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 142,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 142 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: NUM
/* 143 */
{
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 145, 145, 150, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 147, 145, 145, 145, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 149, 145, 145
},
/* 144 */
{
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 145, 145, 150, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 147, 145, 145, 145, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 149, 145, 145
},
/* 145 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 146 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 147 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 148 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 149 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 150 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 146,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: QUOTE
/* 151 */
{
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 153, 153, 157, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 155, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 159, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153
},
/* 152 */
{
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 153, 153, 157, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 155, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 159, 153, 153, 153,
 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153
},
/* 153 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 154 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 155 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 156 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 157 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 154,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 158 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 161, 161, 161, 161, 161, 161, 161, 161,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 159 */
{
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,  -1, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 158, 158, 158, 158, 158, 158, 158, 158, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 160, 156, 156, 156, 156, 156, 156, 156
},
/* 160 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 162, 162, 162, 162, 162, 162,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 162, 162, 162, 162, 162, 162,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 161 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 156, 156, 156, 156, 156, 156, 156, 156,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 162 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 156, 156, 156, 156, 156, 156,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 156, 156, 156, 156, 156, 156,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: FIRSTCCL
/* 163 */
{
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165,  -1, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 227, 183, 165, 186, 165,
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165
},
/* 164 */
{
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165,  -1, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 227, 183, 165, 186, 165,
 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165
},
/* 165 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 166 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 167 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 168 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 169 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 170 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 171 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 172 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 173 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 174 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 175 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 176 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 177 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 178 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 179 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 180 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 181 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 182 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 252, 253, 254, 202, 202, 255, 202, 202, 202, 202, 256, 202, 202, 202, 257, 202, 202, 258, 202, 259, 202, 202, 261, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 183 */
{
 166, 166, 166, 166, 166, 166, 166, 166, 166, 166,  -1, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 184, 184, 184, 184, 184, 184, 184, 184, 166, 166, 166, 166, 166, 166, 166, 166,
 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 187, 166, 166, 166, 166, 166, 166, 166
},
/* 184 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 189, 189, 189, 189, 189, 189, 189, 189,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 185 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 169,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 186 */
{
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,  -1, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 167, 167,
 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167
},
/* 187 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 191, 191, 191, 191, 191, 191,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 191, 191, 191, 191, 191, 191,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 188 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 170,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 189 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 166, 166, 166, 166, 166, 166, 166, 166,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 190 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 171,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 191 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 166, 166, 166, 166, 166, 166,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 166, 166, 166, 166, 166, 166,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 192 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 172,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 193 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 173,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 194 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 174,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 195 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 175,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 196 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 176,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 197 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 177,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 198 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 178,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 199 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 179,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 200 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 180,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 201 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 181,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 202 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 203 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 188,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 204 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 190,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 205 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 192,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 206 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 193,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 207 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 194,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 208 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 195,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 209 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 210 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 197,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 211 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 198,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 212 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 199,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 213 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 200,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 214 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 201,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 215 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 216 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 204, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 217 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 205, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 218 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 206, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 219 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 207, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 220 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 208, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 221 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 209, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 222 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 210, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 223 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 211, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 224 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 212, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 225 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 213, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 226 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 214, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 227 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 182,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 228 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 215, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 229 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 216, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 230 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 217, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 231 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 218, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 232 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 219, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 233 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 220, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 234 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 221, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 235 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 222, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 236 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 223, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 237 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 224, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 238 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 225, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 239 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 226, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 240 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 228, 202, 229, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 241 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 230, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 242 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 231, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 243 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 232, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 244 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 233, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 245 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 234, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 246 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 235, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 247 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 236, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 248 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 237, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 249 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 238, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 250 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 239, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 251 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 240, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 252 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 241, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 253 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 242, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 254 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 243, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 255 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 244, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 256 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 245, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 257 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 246, 202, 202, 247, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 258 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 248, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 259 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 249, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 260 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 250, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},
/* 261 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 185,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1,
  -1, 202, 202, 202, 260, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: CCL
/* 262 */
{
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 265, 264, 264, 283, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 286, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 328, 289, 266, 264, 264,
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264
},
/* 263 */
{
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 265, 264, 264, 283, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 286, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 328, 289, 266, 264, 264,
 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264
},
/* 264 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 265 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 266 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 267 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 268 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 269 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 270 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 271 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 272 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 273 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 274 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 275 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 276 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 277 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 278 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 279 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 280 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 281 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 282 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 352, 353, 354, 355, 303, 303, 356, 303, 303, 303, 303, 357, 303, 303, 303, 358, 303, 303, 359, 303, 360, 303, 303, 362, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 283 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 265,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 284 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 290, 290, 290, 290, 290, 290, 290, 290,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 285 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 269,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 286 */
{
 267, 267, 267, 267, 267, 267, 267, 267, 267, 267,  -1, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267,  -1, 267, 267,
 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267
},
/* 287 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 292, 292, 292, 292, 292, 292,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 292, 292, 292, 292, 292, 292,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 288 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 270,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 289 */
{
 268, 268, 268, 268, 268, 268, 268, 268, 268, 268,  -1, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268,
 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 284, 284, 284, 284, 284, 284, 284, 284, 268, 268, 268, 268, 268, 268, 268, 268,
 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268,
 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 287, 268, 268, 268, 268, 268, 268, 268
},
/* 290 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 268, 268, 268, 268, 268, 268, 268, 268,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 291 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 271,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 292 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 268, 268, 268, 268, 268, 268,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 268, 268, 268, 268, 268, 268,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 293 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 272,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 294 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 273,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 295 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 274,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 296 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 275,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 297 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 276,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 298 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 277,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 299 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 278,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 300 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 279,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 301 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 280,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 302 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 281,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 303 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 304 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 288,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 305 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 291,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 306 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 307 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 294,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 308 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 309 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 296,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 310 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 297,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 311 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 298,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 312 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 299,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 313 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 300,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 314 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 301,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 315 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 302,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 316 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 304, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 317 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 305, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 318 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 306, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 319 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 307, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 320 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 308, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 321 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 309, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 322 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 310, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 323 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 311, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 324 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 312, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 325 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 313, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 326 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 314, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 327 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 315, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 328 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 282,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 329 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 316, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 330 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 317, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 331 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 318, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 332 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 319, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 333 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 320, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 334 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 321, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 335 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 322, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 336 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 323, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 337 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 324, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 338 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 325, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 339 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 326, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 340 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 327, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 341 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 329, 303, 330, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 342 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 331, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 343 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 332, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 344 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 333, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 345 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 334, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 346 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 335, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 347 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 336, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 348 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 337, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 349 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 338, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 350 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 339, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 351 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 340, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 352 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 341, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 353 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 342, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 354 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 343, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 355 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 344, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 356 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 345, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 357 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 346, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 358 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 347, 303, 303, 348, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 359 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 349, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 360 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 350, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 361 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 351, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},
/* 362 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 285,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1,
  -1, 303, 303, 303, 361, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: ACTION
/* 363 */
{
 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 366, 365, 365, 375, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365, 365, 367, 365, 365, 365, 365, 368, 365, 365, 376, 365, 365, 365, 365, 378, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 365, 365, 365, 365, 369,
 365, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 370, 365, 371, 365, 365
},
/* 364 */
{
 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 366, 365, 365, 375, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365, 365, 367, 365, 365, 365, 365, 368, 365, 365, 376, 365, 365, 365, 365, 378, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 365, 365, 365, 365, 369,
 365, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 370, 365, 371, 365, 365
},
/* 365 */
{
 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,  -1, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365, 365,  -1, 365, 365, 365, 365,  -1, 365, 365,  -1, 365, 365, 365, 365,  -1, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 365, 365, 365, 365,  -1,
 365,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 365,  -1, 365, 365
},
/* 366 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 367 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 368 */
{
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,  -1, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 372, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 377, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374
},
/* 369 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 369,  -1,  -1, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,  -1,  -1,  -1,  -1, 369,
  -1, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369,  -1,  -1,  -1,  -1,  -1
},
/* 370 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 371 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 372 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 373 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 374 */
{
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,  -1, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 372, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 377, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374
},
/* 375 */
{
 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 366, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365, 365,  -1, 365, 365, 365, 365,  -1, 365, 365,  -1, 365, 365, 365, 365,  -1, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
 365,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 365, 365, 365, 365,  -1,
 365,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 365,  -1, 365, 365
},
/* 376 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 377 */
{
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,  -1, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374, 374
},
/* 378 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 373,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: COMMENT
/* 379 */
{
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 382, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 383, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381
},
/* 380 */
{
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 382, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 383, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381
},
/* 381 */
{
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 382, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,  -1, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381, 381
},
/* 382 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 383 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 384,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 384 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: ACTION_STRING
/* 385 */
{
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 388, 387, 387, 392, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387, 389, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 390, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387
},
/* 386 */
{
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 388, 387, 387, 392, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387, 389, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 390, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387
},
/* 387 */
{
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,  -1, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387,  -1, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,  -1, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387
},
/* 388 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 389 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 390 */
{
 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,  -1, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391
},
/* 391 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 392 */
{
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 388, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387,  -1, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387,  -1, 387, 387, 387,
 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387
},

//Startcondition: LINEDIR
/* 393 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 394 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: ACTION_COMMENT
/* 395 */
{
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 399, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397
},
/* 396 */
{
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 399, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397
},
/* 397 */
{
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,  -1, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397
},
/* 398 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 399 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 400,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 400 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_INCLUDE
/* 401 */
{
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 404, 403, 403, 406, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403
},
/* 402 */
{
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 404, 403, 403, 406, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 407, 403, 403, 403,
 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403
},
/* 403 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 404 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 405 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 406 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 404,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 407 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 405,  -1,  -1
}

};

//Accept-Array
ulong SSLEXScanner::ssLexAccept[SSLEX_STATE] =
{
/* 0 */
0,
/* 1 */
0,
/* 2 */

//Line 200: ([[:blank:]]+)
2,
/* 3 */

//Line 225: ([[:blank:]]*)(\\r?\\n)
3,
/* 4 */

//Line 219: ((([[:alpha:]_][[:alnum:]_-]*)))
4,
/* 5 */

//Line 164: ^([[:blank:]]+)
5,
/* 6 */

//Line 162: ^([[:blank:]]*)(\\r?\\n)
6,
/* 7 */

//Line 202: ^(([[:alpha:]_][[:alnum:]_-]*))
7,
/* 8 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
8,
/* 9 */

//Line 198: ^\"%x\"(([[:alpha:]_][[:alnum:]_-]*))?
9,
/* 10 */

//Line 154: ^\"/*\"
10,
/* 11 */

//Line 152: ^\"//\".*
11,
/* 12 */

//Line 169: ^\"%include\".*
12,
/* 13 */

//Line 180: ^\"%definition\".*
13,
/* 14 */

//Line 185: ^\"%specification\".*(\\r?\\n)*
14,
/* 15 */
0,
/* 16 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
16,
/* 17 */

//Line 198: ^\"%x\"(([[:alpha:]_][[:alnum:]_-]*))?
17,
/* 18 */

//Line 185: ^\"%specification\".*(\\r?\\n)*
18,
/* 19 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
19,
/* 20 */
0,
/* 21 */
0,
/* 22 */
0,
/* 23 */
0,
/* 24 */
0,
/* 25 */
0,
/* 26 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
26,
/* 27 */
0,
/* 28 */
0,
/* 29 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
29,
/* 30 */
0,
/* 31 */
0,
/* 32 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
32,
/* 33 */
0,
/* 34 */
0,
/* 35 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
35,
/* 36 */
0,
/* 37 */
0,
/* 38 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
38,
/* 39 */
0,
/* 40 */
0,
/* 41 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
41,
/* 42 */
0,
/* 43 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
43,
/* 44 */
0,
/* 45 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
45,
/* 46 */
0,
/* 47 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
47,
/* 48 */

//Line 196: ^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?
48,
/* 49 */
0,
/* 50 */
0,
/* 51 */

//Line 432: .
51,
/* 52 */

//Line 350: ([[:blank:]]+)
52,
/* 53 */

//Line 363: ([[:blank:]]*)(\\r?\\n)
53,
/* 54 */

//Line 340: \\\"
54,
/* 55 */

//Line 424: \"(\"
55,
/* 56 */

//Line 426: \")\"
56,
/* 57 */

//Line 416: \"*\"
57,
/* 58 */

//Line 420: \"+\"
58,
/* 59 */

//Line 422: \".\"
59,
/* 60 */

//Line 412: \"/\"
60,
/* 61 */

//Line 418: \"?\"
61,
/* 62 */

//Line 428: \"{\"
62,
/* 63 */

//Line 414: \"|\"
63,
/* 64 */

//Line 430: \"}\"
64,
/* 65 */

//Line 344: \"$\"/([[:blank:]]|(\\r?\\n))
65,
/* 66 */

//Line 377: \"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*
66,
/* 67 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
67,
/* 68 */

//Line 342: \"{\"/[[:digit:]]
68,
/* 69 */

//Line 346: ([[:blank:]]+)\"|\".*(\\r?\\n)
69,
/* 70 */

//Line 386: \"{\"(([[:alpha:]_][[:alnum:]_-]*))\"}\"
70,
/* 71 */

//Line 375: \"<<EOF>>\"
71,
/* 72 */

//Line 348: ^([[:blank:]]+)
72,
/* 73 */

//Line 334: ^([[:blank:]]*)(\\r?\\n)
73,
/* 74 */

//Line 336: ^([[:blank:]]*)\"<\"
74,
/* 75 */

//Line 338: ^([[:blank:]]*)\"^\"
75,
/* 76 */

//Line 317: ^([[:blank:]]*)\"//\".*
76,
/* 77 */

//Line 374: ^([[:blank:]]*)\"<<EOF>>\"
77,
/* 78 */

//Line 319: ^\"%extension\".*
78,
/* 79 */
0,
/* 80 */

//Line 432: .
80,
/* 81 */

//Line 412: \"/\"
81,
/* 82 */

//Line 377: \"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*
82,
/* 83 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
83,
/* 84 */
0,
/* 85 */

//Line 432: .
85,
/* 86 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
86,
/* 87 */
0,
/* 88 */

//Line 432: .
88,
/* 89 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
89,
/* 90 */
0,
/* 91 */

//Line 432: .
91,
/* 92 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
92,
/* 93 */
0,
/* 94 */

//Line 432: .
94,
/* 95 */
0,
/* 96 */
0,
/* 97 */
0,
/* 98 */
0,
/* 99 */
0,
/* 100 */
0,
/* 101 */

//Line 377: \"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*
101,
/* 102 */
0,
/* 103 */
0,
/* 104 */
0,
/* 105 */

//Line 377: \"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*
105,
/* 106 */
0,
/* 107 */
0,
/* 108 */
0,
/* 109 */

//Line 377: \"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*
109,
/* 110 */
0,
/* 111 */
0,
/* 112 */
0,
/* 113 */
0,
/* 114 */
0,
/* 115 */

//Line 432: .
115,
/* 116 */
0,
/* 117 */
0,
/* 118 */
0,
/* 119 */

//Line 432: .
119,
/* 120 */
0,
/* 121 */
0,
/* 122 */

//Line 266: .+
122,
/* 123 */

//Line 275: (\\r?\\n)
123,
/* 124 */

//Line 266: .+
124,
/* 125 */
0,
/* 126 */
0,
/* 127 */

//Line 289: ([^[:blank:]\\n]).*
127,
/* 128 */

//Line 287: ([[:blank:]]+)
128,
/* 129 */

//Line 304: (\\r?\\n)
129,
/* 130 */

//Line 289: ([^[:blank:]\\n]).*
130,
/* 131 */
0,
/* 132 */
0,
/* 133 */

//Line 451: .
133,
/* 134 */

//Line 439: ([[:blank:]]+)
134,
/* 135 */

//Line 443: \"*\"
135,
/* 136 */

//Line 441: \",\"
136,
/* 137 */

//Line 445: \">\"
137,
/* 138 */

//Line 449: ((([[:alpha:]_][[:alnum:]_-]*)))
138,
/* 139 */

//Line 447: \">\"/^
139,
/* 140 */
0,
/* 141 */
0,
/* 142 */

//Line 457: \"^\"
142,
/* 143 */
0,
/* 144 */
0,
/* 145 */

//Line 521: .
145,
/* 146 */

//Line 527: (\\r?\\n)
146,
/* 147 */

//Line 517: \",\"
147,
/* 148 */

//Line 511: [[:digit:]]+
148,
/* 149 */

//Line 519: \"}\"
149,
/* 150 */

//Line 521: .
150,
/* 151 */
0,
/* 152 */
0,
/* 153 */

//Line 461: [^\"\\n]
153,
/* 154 */

//Line 465: (\\r?\\n)
154,
/* 155 */

//Line 463: \\\"
155,
/* 156 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
156,
/* 157 */

//Line 461: [^\"\\n]
157,
/* 158 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
158,
/* 159 */

//Line 461: [^\"\\n]
159,
/* 160 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
160,
/* 161 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
161,
/* 162 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
162,
/* 163 */
0,
/* 164 */
0,
/* 165 */

//Line 476: .
165,
/* 166 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
166,
/* 167 */

//Line 474: \"^\"/[^-\\]\\n]
167,
/* 168 */

//Line 475: \"^\"/(\"-\"|\"]\")
168,
/* 169 */

//Line 504: ((\"[:\"[[:alpha:]]+\":]\"))
169,
/* 170 */

//Line 491: \"[:alnum:]\"
170,
/* 171 */

//Line 492: \"[:alpha:]\"
171,
/* 172 */

//Line 493: \"[:blank:]\"
172,
/* 173 */

//Line 494: \"[:cntrl:]\"
173,
/* 174 */

//Line 495: \"[:digit:]\"
174,
/* 175 */

//Line 496: \"[:graph:]\"
175,
/* 176 */

//Line 497: \"[:lower:]\"
176,
/* 177 */

//Line 498: \"[:print:]\"
177,
/* 178 */

//Line 499: \"[:punct:]\"
178,
/* 179 */

//Line 500: \"[:space:]\"
179,
/* 180 */

//Line 501: \"[:upper:]\"
180,
/* 181 */

//Line 502: \"[:xdigit:]\"
181,
/* 182 */
0,
/* 183 */

//Line 476: .
183,
/* 184 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
184,
/* 185 */
0,
/* 186 */

//Line 476: .
186,
/* 187 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
187,
/* 188 */
0,
/* 189 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
189,
/* 190 */
0,
/* 191 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
191,
/* 192 */
0,
/* 193 */
0,
/* 194 */
0,
/* 195 */
0,
/* 196 */
0,
/* 197 */
0,
/* 198 */
0,
/* 199 */
0,
/* 200 */
0,
/* 201 */
0,
/* 202 */
0,
/* 203 */
0,
/* 204 */
0,
/* 205 */
0,
/* 206 */
0,
/* 207 */
0,
/* 208 */
0,
/* 209 */
0,
/* 210 */
0,
/* 211 */
0,
/* 212 */
0,
/* 213 */
0,
/* 214 */
0,
/* 215 */
0,
/* 216 */
0,
/* 217 */
0,
/* 218 */
0,
/* 219 */
0,
/* 220 */
0,
/* 221 */
0,
/* 222 */
0,
/* 223 */
0,
/* 224 */
0,
/* 225 */
0,
/* 226 */
0,
/* 227 */

//Line 476: .
227,
/* 228 */
0,
/* 229 */
0,
/* 230 */
0,
/* 231 */
0,
/* 232 */
0,
/* 233 */
0,
/* 234 */
0,
/* 235 */
0,
/* 236 */
0,
/* 237 */
0,
/* 238 */
0,
/* 239 */
0,
/* 240 */
0,
/* 241 */
0,
/* 242 */
0,
/* 243 */
0,
/* 244 */
0,
/* 245 */
0,
/* 246 */
0,
/* 247 */
0,
/* 248 */
0,
/* 249 */
0,
/* 250 */
0,
/* 251 */
0,
/* 252 */
0,
/* 253 */
0,
/* 254 */
0,
/* 255 */
0,
/* 256 */
0,
/* 257 */
0,
/* 258 */
0,
/* 259 */
0,
/* 260 */
0,
/* 261 */
0,
/* 262 */
0,
/* 263 */
0,
/* 264 */

//Line 481: [^\\]\\n]
264,
/* 265 */

//Line 483: .|(\\r?\\n)
265,
/* 266 */

//Line 482: \"]\"
266,
/* 267 */

//Line 480: -/[^\\]\\n]
267,
/* 268 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
268,
/* 269 */

//Line 504: ((\"[:\"[[:alpha:]]+\":]\"))
269,
/* 270 */

//Line 491: \"[:alnum:]\"
270,
/* 271 */

//Line 492: \"[:alpha:]\"
271,
/* 272 */

//Line 493: \"[:blank:]\"
272,
/* 273 */

//Line 494: \"[:cntrl:]\"
273,
/* 274 */

//Line 495: \"[:digit:]\"
274,
/* 275 */

//Line 496: \"[:graph:]\"
275,
/* 276 */

//Line 497: \"[:lower:]\"
276,
/* 277 */

//Line 498: \"[:print:]\"
277,
/* 278 */

//Line 499: \"[:punct:]\"
278,
/* 279 */

//Line 500: \"[:space:]\"
279,
/* 280 */

//Line 501: \"[:upper:]\"
280,
/* 281 */

//Line 502: \"[:xdigit:]\"
281,
/* 282 */
0,
/* 283 */

//Line 481: [^\\]\\n]
283,
/* 284 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
284,
/* 285 */
0,
/* 286 */

//Line 481: [^\\]\\n]
286,
/* 287 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
287,
/* 288 */
0,
/* 289 */

//Line 481: [^\\]\\n]
289,
/* 290 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
290,
/* 291 */
0,
/* 292 */

//Line 586: ((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
292,
/* 293 */
0,
/* 294 */
0,
/* 295 */
0,
/* 296 */
0,
/* 297 */
0,
/* 298 */
0,
/* 299 */
0,
/* 300 */
0,
/* 301 */
0,
/* 302 */
0,
/* 303 */
0,
/* 304 */
0,
/* 305 */
0,
/* 306 */
0,
/* 307 */
0,
/* 308 */
0,
/* 309 */
0,
/* 310 */
0,
/* 311 */
0,
/* 312 */
0,
/* 313 */
0,
/* 314 */
0,
/* 315 */
0,
/* 316 */
0,
/* 317 */
0,
/* 318 */
0,
/* 319 */
0,
/* 320 */
0,
/* 321 */
0,
/* 322 */
0,
/* 323 */
0,
/* 324 */
0,
/* 325 */
0,
/* 326 */
0,
/* 327 */
0,
/* 328 */

//Line 481: [^\\]\\n]
328,
/* 329 */
0,
/* 330 */
0,
/* 331 */
0,
/* 332 */
0,
/* 333 */
0,
/* 334 */
0,
/* 335 */
0,
/* 336 */
0,
/* 337 */
0,
/* 338 */
0,
/* 339 */
0,
/* 340 */
0,
/* 341 */
0,
/* 342 */
0,
/* 343 */
0,
/* 344 */
0,
/* 345 */
0,
/* 346 */
0,
/* 347 */
0,
/* 348 */
0,
/* 349 */
0,
/* 350 */
0,
/* 351 */
0,
/* 352 */
0,
/* 353 */
0,
/* 354 */
0,
/* 355 */
0,
/* 356 */
0,
/* 357 */
0,
/* 358 */
0,
/* 359 */
0,
/* 360 */
0,
/* 361 */
0,
/* 362 */
0,
/* 363 */
0,
/* 364 */
0,
/* 365 */

//Line 540: [^[:alpha:]_{}\"'*/\\n]+
365,
/* 366 */

//Line 548: (\\r?\\n)
366,
/* 367 */

//Line 546: \\\"
367,
/* 368 */

//Line 562: .
368,
/* 369 */

//Line 542: (([[:alpha:]_][[:alnum:]_-]*))
369,
/* 370 */

//Line 537: \"{\"
370,
/* 371 */

//Line 538: \"}\"
371,
/* 372 */

//Line 544: \"'\"([^'\\\\\\n]|\\\\.)*\"'\"
372,
/* 373 */

//Line 535: \"/*\"
373,
/* 374 */
0,
/* 375 */

//Line 540: [^[:alpha:]_{}\"'*/\\n]+
375,
/* 376 */

//Line 562: .
376,
/* 377 */
0,
/* 378 */

//Line 562: .
378,
/* 379 */
0,
/* 380 */
0,
/* 381 */

//Line 261: [^*\\n]+
381,
/* 382 */

//Line 262: [^*\\n]*(\\r?\\n)
382,
/* 383 */

//Line 260: \"*\"
383,
/* 384 */

//Line 253: \"*/\"
384,
/* 385 */
0,
/* 386 */
0,
/* 387 */

//Line 566: [^\"\\\\\\n]+
387,
/* 388 */

//Line 568: (\\r?\\n)
388,
/* 389 */

//Line 569: \\\"
389,
/* 390 */

//Line 570: .
390,
/* 391 */

//Line 567: \\\\.
391,
/* 392 */

//Line 566: [^\"\\\\\\n]+
392,
/* 393 */
0,
/* 394 */
0,
/* 395 */
0,
/* 396 */
0,
/* 397 */

//Line 576: [^*\\n]+
397,
/* 398 */

//Line 577: [^*\\n]*(\\r?\\n)
398,
/* 399 */

//Line 575: \"*\"
399,
/* 400 */

//Line 574: \"*/\"
400,
/* 401 */
0,
/* 402 */
0,
/* 403 */

//Line 231: .
403,
/* 404 */

//Line 233: (\\r?\\n)
404,
/* 405 */

//Line 235: ^\"\\\\}\"
405,
/* 406 */

//Line 231: .
406,
/* 407 */

//Line 231: .
407
};


//Lookahead-Array
ulong SSLEXScanner::ssLexLA[SSLEX_STATE] =
{
/* 0 */
0,
/* 1 */
0,
/* 2 */
0,
/* 3 */
0,
/* 4 */
0,
/* 5 */
0,
/* 6 */
0,
/* 7 */
0,
/* 8 */
0,
/* 9 */
0,
/* 10 */
0,
/* 11 */
0,
/* 12 */
0,
/* 13 */
0,
/* 14 */
0,
/* 15 */
0,
/* 16 */
0,
/* 17 */
0,
/* 18 */
0,
/* 19 */
0,
/* 20 */
0,
/* 21 */
0,
/* 22 */
0,
/* 23 */
0,
/* 24 */
0,
/* 25 */
0,
/* 26 */
0,
/* 27 */
0,
/* 28 */
0,
/* 29 */
0,
/* 30 */
0,
/* 31 */
0,
/* 32 */
0,
/* 33 */
0,
/* 34 */
0,
/* 35 */
0,
/* 36 */
0,
/* 37 */
0,
/* 38 */
0,
/* 39 */
0,
/* 40 */
0,
/* 41 */
0,
/* 42 */
0,
/* 43 */
0,
/* 44 */
0,
/* 45 */
0,
/* 46 */
0,
/* 47 */
0,
/* 48 */
0,
/* 49 */
0,
/* 50 */
0,
/* 51 */
0,
/* 52 */
0,
/* 53 */
0,
/* 54 */
0,
/* 55 */
0,
/* 56 */
0,
/* 57 */
0,
/* 58 */
0,
/* 59 */
0,
/* 60 */
0,
/* 61 */
0,
/* 62 */

//Line 342: \"{\"/[[:digit:]]
1,
/* 63 */
0,
/* 64 */
0,
/* 65 */
0,
/* 66 */
0,
/* 67 */
0,
/* 68 */
0,
/* 69 */
0,
/* 70 */
0,
/* 71 */
0,
/* 72 */
0,
/* 73 */
0,
/* 74 */
0,
/* 75 */
0,
/* 76 */
0,
/* 77 */
0,
/* 78 */
0,
/* 79 */
0,
/* 80 */
0,
/* 81 */
0,
/* 82 */
0,
/* 83 */
0,
/* 84 */
0,
/* 85 */

//Line 344: \"$\"/([[:blank:]]|(\\r?\\n))
1,
/* 86 */
0,
/* 87 */
0,
/* 88 */
0,
/* 89 */
0,
/* 90 */
0,
/* 91 */
0,
/* 92 */
0,
/* 93 */
0,
/* 94 */
0,
/* 95 */
0,
/* 96 */
0,
/* 97 */
0,
/* 98 */
0,
/* 99 */
0,
/* 100 */
0,
/* 101 */
0,
/* 102 */
0,
/* 103 */
0,
/* 104 */
0,
/* 105 */
0,
/* 106 */
0,
/* 107 */
0,
/* 108 */
0,
/* 109 */
0,
/* 110 */
0,
/* 111 */
0,
/* 112 */
0,
/* 113 */
0,
/* 114 */
0,
/* 115 */
0,
/* 116 */
0,
/* 117 */
0,
/* 118 */
0,
/* 119 */
0,
/* 120 */
0,
/* 121 */
0,
/* 122 */
0,
/* 123 */
0,
/* 124 */
0,
/* 125 */
0,
/* 126 */
0,
/* 127 */
0,
/* 128 */
0,
/* 129 */
0,
/* 130 */
0,
/* 131 */
0,
/* 132 */
0,
/* 133 */
0,
/* 134 */
0,
/* 135 */
0,
/* 136 */
0,
/* 137 */

//Line 447: \">\"/^
1,
/* 138 */
0,
/* 139 */
0,
/* 140 */
0,
/* 141 */
0,
/* 142 */
0,
/* 143 */
0,
/* 144 */
0,
/* 145 */
0,
/* 146 */
0,
/* 147 */
0,
/* 148 */
0,
/* 149 */
0,
/* 150 */
0,
/* 151 */
0,
/* 152 */
0,
/* 153 */
0,
/* 154 */
0,
/* 155 */
0,
/* 156 */
0,
/* 157 */
0,
/* 158 */
0,
/* 159 */
0,
/* 160 */
0,
/* 161 */
0,
/* 162 */
0,
/* 163 */
0,
/* 164 */
0,
/* 165 */
0,
/* 166 */
0,
/* 167 */
0,
/* 168 */
0,
/* 169 */
0,
/* 170 */
0,
/* 171 */
0,
/* 172 */
0,
/* 173 */
0,
/* 174 */
0,
/* 175 */
0,
/* 176 */
0,
/* 177 */
0,
/* 178 */
0,
/* 179 */
0,
/* 180 */
0,
/* 181 */
0,
/* 182 */
0,
/* 183 */
0,
/* 184 */
0,
/* 185 */
0,
/* 186 */

//Line 474: \"^\"/[^-\\]\\n]
1,
/* 187 */
0,
/* 188 */
0,
/* 189 */
0,
/* 190 */
0,
/* 191 */
0,
/* 192 */
0,
/* 193 */
0,
/* 194 */
0,
/* 195 */
0,
/* 196 */
0,
/* 197 */
0,
/* 198 */
0,
/* 199 */
0,
/* 200 */
0,
/* 201 */
0,
/* 202 */
0,
/* 203 */
0,
/* 204 */
0,
/* 205 */
0,
/* 206 */
0,
/* 207 */
0,
/* 208 */
0,
/* 209 */
0,
/* 210 */
0,
/* 211 */
0,
/* 212 */
0,
/* 213 */
0,
/* 214 */
0,
/* 215 */
0,
/* 216 */
0,
/* 217 */
0,
/* 218 */
0,
/* 219 */
0,
/* 220 */
0,
/* 221 */
0,
/* 222 */
0,
/* 223 */
0,
/* 224 */
0,
/* 225 */
0,
/* 226 */
0,
/* 227 */
0,
/* 228 */
0,
/* 229 */
0,
/* 230 */
0,
/* 231 */
0,
/* 232 */
0,
/* 233 */
0,
/* 234 */
0,
/* 235 */
0,
/* 236 */
0,
/* 237 */
0,
/* 238 */
0,
/* 239 */
0,
/* 240 */
0,
/* 241 */
0,
/* 242 */
0,
/* 243 */
0,
/* 244 */
0,
/* 245 */
0,
/* 246 */
0,
/* 247 */
0,
/* 248 */
0,
/* 249 */
0,
/* 250 */
0,
/* 251 */
0,
/* 252 */
0,
/* 253 */
0,
/* 254 */
0,
/* 255 */
0,
/* 256 */
0,
/* 257 */
0,
/* 258 */
0,
/* 259 */
0,
/* 260 */
0,
/* 261 */
0,
/* 262 */
0,
/* 263 */
0,
/* 264 */
0,
/* 265 */
0,
/* 266 */
0,
/* 267 */
0,
/* 268 */
0,
/* 269 */
0,
/* 270 */
0,
/* 271 */
0,
/* 272 */
0,
/* 273 */
0,
/* 274 */
0,
/* 275 */
0,
/* 276 */
0,
/* 277 */
0,
/* 278 */
0,
/* 279 */
0,
/* 280 */
0,
/* 281 */
0,
/* 282 */
0,
/* 283 */
0,
/* 284 */
0,
/* 285 */
0,
/* 286 */

//Line 480: -/[^\\]\\n]
1,
/* 287 */
0,
/* 288 */
0,
/* 289 */
0,
/* 290 */
0,
/* 291 */
0,
/* 292 */
0,
/* 293 */
0,
/* 294 */
0,
/* 295 */
0,
/* 296 */
0,
/* 297 */
0,
/* 298 */
0,
/* 299 */
0,
/* 300 */
0,
/* 301 */
0,
/* 302 */
0,
/* 303 */
0,
/* 304 */
0,
/* 305 */
0,
/* 306 */
0,
/* 307 */
0,
/* 308 */
0,
/* 309 */
0,
/* 310 */
0,
/* 311 */
0,
/* 312 */
0,
/* 313 */
0,
/* 314 */
0,
/* 315 */
0,
/* 316 */
0,
/* 317 */
0,
/* 318 */
0,
/* 319 */
0,
/* 320 */
0,
/* 321 */
0,
/* 322 */
0,
/* 323 */
0,
/* 324 */
0,
/* 325 */
0,
/* 326 */
0,
/* 327 */
0,
/* 328 */
0,
/* 329 */
0,
/* 330 */
0,
/* 331 */
0,
/* 332 */
0,
/* 333 */
0,
/* 334 */
0,
/* 335 */
0,
/* 336 */
0,
/* 337 */
0,
/* 338 */
0,
/* 339 */
0,
/* 340 */
0,
/* 341 */
0,
/* 342 */
0,
/* 343 */
0,
/* 344 */
0,
/* 345 */
0,
/* 346 */
0,
/* 347 */
0,
/* 348 */
0,
/* 349 */
0,
/* 350 */
0,
/* 351 */
0,
/* 352 */
0,
/* 353 */
0,
/* 354 */
0,
/* 355 */
0,
/* 356 */
0,
/* 357 */
0,
/* 358 */
0,
/* 359 */
0,
/* 360 */
0,
/* 361 */
0,
/* 362 */
0,
/* 363 */
0,
/* 364 */
0,
/* 365 */
0,
/* 366 */
0,
/* 367 */
0,
/* 368 */
0,
/* 369 */
0,
/* 370 */
0,
/* 371 */
0,
/* 372 */
0,
/* 373 */
0,
/* 374 */
0,
/* 375 */
0,
/* 376 */
0,
/* 377 */
0,
/* 378 */
0,
/* 379 */
0,
/* 380 */
0,
/* 381 */
0,
/* 382 */
0,
/* 383 */
0,
/* 384 */
0,
/* 385 */
0,
/* 386 */
0,
/* 387 */
0,
/* 388 */
0,
/* 389 */
0,
/* 390 */
0,
/* 391 */
0,
/* 392 */
0,
/* 393 */
0,
/* 394 */
0,
/* 395 */
0,
/* 396 */
0,
/* 397 */
0,
/* 398 */
0,
/* 399 */
0,
/* 400 */
0,
/* 401 */
0,
/* 402 */
0,
/* 403 */
0,
/* 404 */
0,
/* 405 */
0,
/* 406 */
0,
/* 407 */
0
};


#ifdef SSLEX_DEBUG

//Structure with regular expressions in text form
char *SSLEXScanner::regText[regTextSize] = {
"^\"//\".*",	// ^"//".*, line 152
"^\"/*\"",	// ^"/*", line 154
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 162
"^([[:blank:]]+)",	// ^([[:blank:]]+), line 164
"^\"%include\".*",	// ^"%include".*, line 169
"^\"%definition\".*",	// ^"%definition".*, line 180
"^\"%specification\".*(\\r?\\n)*",	// ^"%specification".*(\r?\n)*, line 185
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",	// ^"%s"(([[:alpha:]_][[:alnum:]_-]*))?, line 196
"^\"%x\"(([[:alpha:]_][[:alnum:]_-]*))?",	// ^"%x"(([[:alpha:]_][[:alnum:]_-]*))?, line 198
"([[:blank:]]+)",	// ([[:blank:]]+), line 200
"^(([[:alpha:]_][[:alnum:]_-]*))",	// ^(([[:alpha:]_][[:alnum:]_-]*)), line 202
"((([[:alpha:]_][[:alnum:]_-]*)))",	// ((([[:alpha:]_][[:alnum:]_-]*))), line 219
"([[:blank:]]*)(\\r?\\n)",	// ([[:blank:]]*)(\r?\n), line 225
"^([[:blank:]]*)\"//\".*",	// ^([[:blank:]]*)"//".*, line 317
"^\"%extension\".*",	// ^"%extension".*, line 319
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 334
"^([[:blank:]]*)\"<\"",	// ^([[:blank:]]*)"<", line 336
"^([[:blank:]]*)\"^\"",	// ^([[:blank:]]*)"^", line 338
"\\\"",	// \", line 340
"\"{\"/[[:digit:]]",	// "{"/[[:digit:]], line 342
"\"$\"/([[:blank:]]|(\\r?\\n))",	// "$"/([[:blank:]]|(\r?\n)), line 344
"([[:blank:]]+)\"|\".*(\\r?\\n)",	// ([[:blank:]]+)"|".*(\r?\n), line 346
"^([[:blank:]]+)",	// ^([[:blank:]]+), line 348
"([[:blank:]]+)",	// ([[:blank:]]+), line 350
"([[:blank:]]*)(\\r?\\n)",	// ([[:blank:]]*)(\r?\n), line 363
"^([[:blank:]]*)\"<<EOF>>\"",	// ^([[:blank:]]*)"<<EOF>>", line 374
"\"<<EOF>>\"",	// "<<EOF>>", line 375
"\"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*",	// "["((([^\\\n]|((\\([^\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|(("[:"[[:alpha:]]+":]")))((([^\\\n\]]|((\\([^\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|(("[:"[[:alpha:]]+":]")))*, line 377
"\"{\"(([[:alpha:]_][[:alnum:]_-]*))\"}\"",	// "{"(([[:alpha:]_][[:alnum:]_-]*))"}", line 386
"\"/\"",	// "/", line 412
"\"|\"",	// "|", line 414
"\"*\"",	// "*", line 416
"\"?\"",	// "?", line 418
"\"+\"",	// "+", line 420
"\".\"",	// ".", line 422
"\"(\"",	// "(", line 424
"\")\"",	// ")", line 426
"\"{\"",	// "{", line 428
"\"}\"",	// "}", line 430
".",	// ., line 432
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",	// ((\\([^\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2}))), line 586
".+",	// .+, line 266
"(\\r?\\n)",	// (\r?\n), line 275
"([[:blank:]]+)",	// ([[:blank:]]+), line 287
"([^[:blank:]\\n]).*",	// ([^[:blank:]\n]).*, line 289
"(\\r?\\n)",	// (\r?\n), line 304
"([[:blank:]]+)",	// ([[:blank:]]+), line 439
"\",\"",	// ",", line 441
"\"*\"",	// "*", line 443
"\">\"",	// ">", line 445
"\">\"/^",	// ">"/^, line 447
"((([[:alpha:]_][[:alnum:]_-]*)))",	// ((([[:alpha:]_][[:alnum:]_-]*))), line 449
".",	// ., line 451
"\"^\"",	// "^", line 457
"[[:digit:]]+",	// [[:digit:]]+, line 511
"\",\"",	// ",", line 517
"\"}\"",	// "}", line 519
".",	// ., line 521
"(\\r?\\n)",	// (\r?\n), line 527
"[^\"\\n]",	// [^"\n], line 461
"\\\"",	// \", line 463
"(\\r?\\n)",	// (\r?\n), line 465
"\"^\"/[^-\\]\\n]",	// "^"/[^-\]\n], line 474
"\"^\"/(\"-\"|\"]\")",	// "^"/("-"|"]"), line 475
".",	// ., line 476
"\"[:alnum:]\"",	// "[:alnum:]", line 491
"\"[:alpha:]\"",	// "[:alpha:]", line 492
"\"[:blank:]\"",	// "[:blank:]", line 493
"\"[:cntrl:]\"",	// "[:cntrl:]", line 494
"\"[:digit:]\"",	// "[:digit:]", line 495
"\"[:graph:]\"",	// "[:graph:]", line 496
"\"[:lower:]\"",	// "[:lower:]", line 497
"\"[:print:]\"",	// "[:print:]", line 498
"\"[:punct:]\"",	// "[:punct:]", line 499
"\"[:space:]\"",	// "[:space:]", line 500
"\"[:upper:]\"",	// "[:upper:]", line 501
"\"[:xdigit:]\"",	// "[:xdigit:]", line 502
"((\"[:\"[[:alpha:]]+\":]\"))",	// (("[:"[[:alpha:]]+":]")), line 504
"-/[^\\]\\n]",	// -/[^\]\n], line 480
"[^\\]\\n]",	// [^\]\n], line 481
"\"]\"",	// "]", line 482
".|(\\r?\\n)",	// .|(\r?\n), line 483
"\"/*\"",	// "/*", line 535
"\"{\"",	// "{", line 537
"\"}\"",	// "}", line 538
"[^[:alpha:]_{}\"'*/\\n]+",	// [^[:alpha:]_{}"'*/\n]+, line 540
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 542
"\"'\"([^'\\\\\\n]|\\\\.)*\"'\"",	// "'"([^'\\\n]|\\.)*"'", line 544
"\\\"",	// \", line 546
"(\\r?\\n)",	// (\r?\n), line 548
".",	// ., line 562
"<<EOF>>",	// <<EOF>>, line 580
"\"*/\"",	// "*/", line 253
"\"*\"",	// "*", line 260
"[^*\\n]+",	// [^*\n]+, line 261
"[^*\\n]*(\\r?\\n)",	// [^*\n]*(\r?\n), line 262
"[^\"\\\\\\n]+",	// [^"\\\n]+, line 566
"\\\\.",	// \\., line 567
"(\\r?\\n)",	// (\r?\n), line 568
"\\\"",	// \", line 569
".",	// ., line 570
"\"*/\"",	// "*/", line 574
"\"*\"",	// "*", line 575
"[^*\\n]+",	// [^*\n]+, line 576
"[^*\\n]*(\\r?\\n)",	// [^*\n]*(\r?\n), line 577
".",	// ., line 231
"(\\r?\\n)",	// (\r?\n), line 233
"^\"\\\\}\"",	// ^"\\}", line 235
"<<EOF>>"	// <<EOF>>, line 246
};


//Array with indices in regText
ulong SSLEXScanner::regTextIndex0[] = { 9, 11, 12 };
ulong SSLEXScanner::regTextIndex1[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
ulong SSLEXScanner::regTextIndex2[] = { 9, 12 };
ulong SSLEXScanner::regTextIndex3[] = { 12 };
ulong SSLEXScanner::regTextIndex4[] = { 11 };
ulong SSLEXScanner::regTextIndex5[] = { 2, 3, 9, 12 };
ulong SSLEXScanner::regTextIndex6[] = { 2, 12 };
ulong SSLEXScanner::regTextIndex7[] = { 10, 11 };
ulong SSLEXScanner::regTextIndex8[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex9[] = { 8 };
ulong SSLEXScanner::regTextIndex10[] = { 1 };
ulong SSLEXScanner::regTextIndex11[] = { 0 };
ulong SSLEXScanner::regTextIndex12[] = { 4 };
ulong SSLEXScanner::regTextIndex13[] = { 5 };
ulong SSLEXScanner::regTextIndex14[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex15[] = { 12 };
ulong SSLEXScanner::regTextIndex16[] = { 7 };
ulong SSLEXScanner::regTextIndex17[] = { 8 };
ulong SSLEXScanner::regTextIndex18[] = { 6 };
ulong SSLEXScanner::regTextIndex19[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex20[] = { 2, 12 };
ulong SSLEXScanner::regTextIndex21[] = { 4, 5, 6, 7, 8 };
ulong SSLEXScanner::regTextIndex22[] = { 0, 1 };
ulong SSLEXScanner::regTextIndex23[] = { 4 };
ulong SSLEXScanner::regTextIndex24[] = { 5 };
ulong SSLEXScanner::regTextIndex25[] = { 6 };
ulong SSLEXScanner::regTextIndex26[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex27[] = { 4 };
ulong SSLEXScanner::regTextIndex28[] = { 5 };
ulong SSLEXScanner::regTextIndex29[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex30[] = { 4 };
ulong SSLEXScanner::regTextIndex31[] = { 5 };
ulong SSLEXScanner::regTextIndex32[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex33[] = { 4 };
ulong SSLEXScanner::regTextIndex34[] = { 5 };
ulong SSLEXScanner::regTextIndex35[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex36[] = { 4 };
ulong SSLEXScanner::regTextIndex37[] = { 5 };
ulong SSLEXScanner::regTextIndex38[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex39[] = { 4 };
ulong SSLEXScanner::regTextIndex40[] = { 5 };
ulong SSLEXScanner::regTextIndex41[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex42[] = { 5 };
ulong SSLEXScanner::regTextIndex43[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex44[] = { 5 };
ulong SSLEXScanner::regTextIndex45[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex46[] = { 5 };
ulong SSLEXScanner::regTextIndex47[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex48[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex49[] = { 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 };
ulong SSLEXScanner::regTextIndex50[] = { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 };
ulong SSLEXScanner::regTextIndex51[] = { 39 };
ulong SSLEXScanner::regTextIndex52[] = { 21, 23, 24, 39 };
ulong SSLEXScanner::regTextIndex53[] = { 24 };
ulong SSLEXScanner::regTextIndex54[] = { 18, 39 };
ulong SSLEXScanner::regTextIndex55[] = { 35, 39 };
ulong SSLEXScanner::regTextIndex56[] = { 36, 39 };
ulong SSLEXScanner::regTextIndex57[] = { 31, 39 };
ulong SSLEXScanner::regTextIndex58[] = { 33, 39 };
ulong SSLEXScanner::regTextIndex59[] = { 34, 39 };
ulong SSLEXScanner::regTextIndex60[] = { 29, 39 };
ulong SSLEXScanner::regTextIndex61[] = { 32, 39 };
ulong SSLEXScanner::regTextIndex62[] = { 19, 28, 37, 39 };
ulong SSLEXScanner::regTextIndex63[] = { 30, 39 };
ulong SSLEXScanner::regTextIndex64[] = { 38, 39 };
ulong SSLEXScanner::regTextIndex65[] = { 20 };
ulong SSLEXScanner::regTextIndex66[] = { 27 };
ulong SSLEXScanner::regTextIndex67[] = { 40 };
ulong SSLEXScanner::regTextIndex68[] = { 19 };
ulong SSLEXScanner::regTextIndex69[] = { 21 };
ulong SSLEXScanner::regTextIndex70[] = { 28 };
ulong SSLEXScanner::regTextIndex71[] = { 26 };
ulong SSLEXScanner::regTextIndex72[] = { 13, 15, 16, 17, 21, 22, 23, 24, 25, 39 };
ulong SSLEXScanner::regTextIndex73[] = { 15, 24 };
ulong SSLEXScanner::regTextIndex74[] = { 16, 25, 26, 39 };
ulong SSLEXScanner::regTextIndex75[] = { 17, 39 };
ulong SSLEXScanner::regTextIndex76[] = { 13 };
ulong SSLEXScanner::regTextIndex77[] = { 25, 26 };
ulong SSLEXScanner::regTextIndex78[] = { 14 };
ulong SSLEXScanner::regTextIndex79[] = { 24 };
ulong SSLEXScanner::regTextIndex80[] = { 24, 39 };
ulong SSLEXScanner::regTextIndex81[] = { 13, 29, 39 };
ulong SSLEXScanner::regTextIndex82[] = { 27 };
ulong SSLEXScanner::regTextIndex83[] = { 40 };
ulong SSLEXScanner::regTextIndex84[] = { 21 };
ulong SSLEXScanner::regTextIndex85[] = { 20, 39 };
ulong SSLEXScanner::regTextIndex86[] = { 40 };
ulong SSLEXScanner::regTextIndex87[] = { 20 };
ulong SSLEXScanner::regTextIndex88[] = { 27, 39 };
ulong SSLEXScanner::regTextIndex89[] = { 40 };
ulong SSLEXScanner::regTextIndex90[] = { 26 };
ulong SSLEXScanner::regTextIndex91[] = { 39, 40 };
ulong SSLEXScanner::regTextIndex92[] = { 40 };
ulong SSLEXScanner::regTextIndex93[] = { 27 };
ulong SSLEXScanner::regTextIndex94[] = { 15, 24, 39 };
ulong SSLEXScanner::regTextIndex95[] = { 28 };
ulong SSLEXScanner::regTextIndex96[] = { 26 };
ulong SSLEXScanner::regTextIndex97[] = { 15, 24 };
ulong SSLEXScanner::regTextIndex98[] = { 13 };
ulong SSLEXScanner::regTextIndex99[] = { 25, 26 };
ulong SSLEXScanner::regTextIndex100[] = { 14 };
ulong SSLEXScanner::regTextIndex101[] = { 27 };
ulong SSLEXScanner::regTextIndex102[] = { 26 };
ulong SSLEXScanner::regTextIndex103[] = { 25, 26 };
ulong SSLEXScanner::regTextIndex104[] = { 14 };
ulong SSLEXScanner::regTextIndex105[] = { 27 };
ulong SSLEXScanner::regTextIndex106[] = { 26 };
ulong SSLEXScanner::regTextIndex107[] = { 25, 26 };
ulong SSLEXScanner::regTextIndex108[] = { 14 };
ulong SSLEXScanner::regTextIndex109[] = { 27 };
ulong SSLEXScanner::regTextIndex110[] = { 26 };
ulong SSLEXScanner::regTextIndex111[] = { 25, 26 };
ulong SSLEXScanner::regTextIndex112[] = { 14 };
ulong SSLEXScanner::regTextIndex113[] = { 25, 26 };
ulong SSLEXScanner::regTextIndex114[] = { 14 };
ulong SSLEXScanner::regTextIndex115[] = { 26, 39 };
ulong SSLEXScanner::regTextIndex116[] = { 14 };
ulong SSLEXScanner::regTextIndex117[] = { 14 };
ulong SSLEXScanner::regTextIndex118[] = { 14 };
ulong SSLEXScanner::regTextIndex119[] = { 14, 39 };
ulong SSLEXScanner::regTextIndex120[] = { 41, 42 };
ulong SSLEXScanner::regTextIndex121[] = { 41, 42 };
ulong SSLEXScanner::regTextIndex122[] = { 41 };
ulong SSLEXScanner::regTextIndex123[] = { 42 };
ulong SSLEXScanner::regTextIndex124[] = { 41, 42 };
ulong SSLEXScanner::regTextIndex125[] = { 43, 44, 45 };
ulong SSLEXScanner::regTextIndex126[] = { 43, 44, 45 };
ulong SSLEXScanner::regTextIndex127[] = { 44 };
ulong SSLEXScanner::regTextIndex128[] = { 43 };
ulong SSLEXScanner::regTextIndex129[] = { 45 };
ulong SSLEXScanner::regTextIndex130[] = { 44, 45 };
ulong SSLEXScanner::regTextIndex131[] = { 46, 47, 48, 49, 50, 51, 52 };
ulong SSLEXScanner::regTextIndex132[] = { 46, 47, 48, 49, 50, 51, 52 };
ulong SSLEXScanner::regTextIndex133[] = { 52 };
ulong SSLEXScanner::regTextIndex134[] = { 46, 52 };
ulong SSLEXScanner::regTextIndex135[] = { 48, 52 };
ulong SSLEXScanner::regTextIndex136[] = { 47, 52 };
ulong SSLEXScanner::regTextIndex137[] = { 49, 50, 52 };
ulong SSLEXScanner::regTextIndex138[] = { 51, 52 };
ulong SSLEXScanner::regTextIndex139[] = { 50 };
ulong SSLEXScanner::regTextIndex140[] = { 53 };
ulong SSLEXScanner::regTextIndex141[] = { 53 };
ulong SSLEXScanner::regTextIndex142[] = { 53 };
ulong SSLEXScanner::regTextIndex143[] = { 54, 55, 56, 57, 58 };
ulong SSLEXScanner::regTextIndex144[] = { 54, 55, 56, 57, 58 };
ulong SSLEXScanner::regTextIndex145[] = { 57 };
ulong SSLEXScanner::regTextIndex146[] = { 58 };
ulong SSLEXScanner::regTextIndex147[] = { 55, 57 };
ulong SSLEXScanner::regTextIndex148[] = { 54, 57 };
ulong SSLEXScanner::regTextIndex149[] = { 56, 57 };
ulong SSLEXScanner::regTextIndex150[] = { 57, 58 };
ulong SSLEXScanner::regTextIndex151[] = { 59, 60, 61, 40 };
ulong SSLEXScanner::regTextIndex152[] = { 59, 60, 61, 40 };
ulong SSLEXScanner::regTextIndex153[] = { 59 };
ulong SSLEXScanner::regTextIndex154[] = { 61 };
ulong SSLEXScanner::regTextIndex155[] = { 60 };
ulong SSLEXScanner::regTextIndex156[] = { 40 };
ulong SSLEXScanner::regTextIndex157[] = { 59, 61 };
ulong SSLEXScanner::regTextIndex158[] = { 40 };
ulong SSLEXScanner::regTextIndex159[] = { 59, 40 };
ulong SSLEXScanner::regTextIndex160[] = { 40 };
ulong SSLEXScanner::regTextIndex161[] = { 40 };
ulong SSLEXScanner::regTextIndex162[] = { 40 };
ulong SSLEXScanner::regTextIndex163[] = { 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 40 };
ulong SSLEXScanner::regTextIndex164[] = { 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 40 };
ulong SSLEXScanner::regTextIndex165[] = { 64 };
ulong SSLEXScanner::regTextIndex166[] = { 40 };
ulong SSLEXScanner::regTextIndex167[] = { 62 };
ulong SSLEXScanner::regTextIndex168[] = { 63 };
ulong SSLEXScanner::regTextIndex169[] = { 77 };
ulong SSLEXScanner::regTextIndex170[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex171[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex172[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex173[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex174[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex175[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex176[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex177[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex178[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex179[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex180[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex181[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex182[] = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 };
ulong SSLEXScanner::regTextIndex183[] = { 64, 40 };
ulong SSLEXScanner::regTextIndex184[] = { 40 };
ulong SSLEXScanner::regTextIndex185[] = { 77 };
ulong SSLEXScanner::regTextIndex186[] = { 62, 63, 64 };
ulong SSLEXScanner::regTextIndex187[] = { 40 };
ulong SSLEXScanner::regTextIndex188[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex189[] = { 40 };
ulong SSLEXScanner::regTextIndex190[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex191[] = { 40 };
ulong SSLEXScanner::regTextIndex192[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex193[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex194[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex195[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex196[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex197[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex198[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex199[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex200[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex201[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex202[] = { 77 };
ulong SSLEXScanner::regTextIndex203[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex204[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex205[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex206[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex207[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex208[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex209[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex210[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex211[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex212[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex213[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex214[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex215[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex216[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex217[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex218[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex219[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex220[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex221[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex222[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex223[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex224[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex225[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex226[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex227[] = { 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 };
ulong SSLEXScanner::regTextIndex228[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex229[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex230[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex231[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex232[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex233[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex234[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex235[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex236[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex237[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex238[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex239[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex240[] = { 65, 66, 77 };
ulong SSLEXScanner::regTextIndex241[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex242[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex243[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex244[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex245[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex246[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex247[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex248[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex249[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex250[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex251[] = { 65, 66, 77 };
ulong SSLEXScanner::regTextIndex252[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex253[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex254[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex255[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex256[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex257[] = { 72, 73, 77 };
ulong SSLEXScanner::regTextIndex258[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex259[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex260[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex261[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex262[] = { 78, 79, 80, 81, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 40 };
ulong SSLEXScanner::regTextIndex263[] = { 78, 79, 80, 81, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 40 };
ulong SSLEXScanner::regTextIndex264[] = { 79, 81 };
ulong SSLEXScanner::regTextIndex265[] = { 81 };
ulong SSLEXScanner::regTextIndex266[] = { 80, 81 };
ulong SSLEXScanner::regTextIndex267[] = { 78 };
ulong SSLEXScanner::regTextIndex268[] = { 40 };
ulong SSLEXScanner::regTextIndex269[] = { 77 };
ulong SSLEXScanner::regTextIndex270[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex271[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex272[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex273[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex274[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex275[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex276[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex277[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex278[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex279[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex280[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex281[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex282[] = { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 };
ulong SSLEXScanner::regTextIndex283[] = { 79, 81, 65 };
ulong SSLEXScanner::regTextIndex284[] = { 40 };
ulong SSLEXScanner::regTextIndex285[] = { 77 };
ulong SSLEXScanner::regTextIndex286[] = { 78, 79, 81 };
ulong SSLEXScanner::regTextIndex287[] = { 40 };
ulong SSLEXScanner::regTextIndex288[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex289[] = { 79, 81, 40 };
ulong SSLEXScanner::regTextIndex290[] = { 40 };
ulong SSLEXScanner::regTextIndex291[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex292[] = { 40 };
ulong SSLEXScanner::regTextIndex293[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex294[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex295[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex296[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex297[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex298[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex299[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex300[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex301[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex302[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex303[] = { 77 };
ulong SSLEXScanner::regTextIndex304[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex305[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex306[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex307[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex308[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex309[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex310[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex311[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex312[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex313[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex314[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex315[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex316[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex317[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex318[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex319[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex320[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex321[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex322[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex323[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex324[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex325[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex326[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex327[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex328[] = { 79, 81, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 };
ulong SSLEXScanner::regTextIndex329[] = { 65, 77 };
ulong SSLEXScanner::regTextIndex330[] = { 66, 77 };
ulong SSLEXScanner::regTextIndex331[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex332[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex333[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex334[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex335[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex336[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex337[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex338[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex339[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex340[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex341[] = { 65, 66, 77 };
ulong SSLEXScanner::regTextIndex342[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex343[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex344[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex345[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex346[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex347[] = { 72, 77 };
ulong SSLEXScanner::regTextIndex348[] = { 73, 77 };
ulong SSLEXScanner::regTextIndex349[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex350[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex351[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex352[] = { 65, 66, 77 };
ulong SSLEXScanner::regTextIndex353[] = { 67, 77 };
ulong SSLEXScanner::regTextIndex354[] = { 68, 77 };
ulong SSLEXScanner::regTextIndex355[] = { 69, 77 };
ulong SSLEXScanner::regTextIndex356[] = { 70, 77 };
ulong SSLEXScanner::regTextIndex357[] = { 71, 77 };
ulong SSLEXScanner::regTextIndex358[] = { 72, 73, 77 };
ulong SSLEXScanner::regTextIndex359[] = { 74, 77 };
ulong SSLEXScanner::regTextIndex360[] = { 75, 77 };
ulong SSLEXScanner::regTextIndex361[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex362[] = { 76, 77 };
ulong SSLEXScanner::regTextIndex363[] = { 82, 83, 84, 85, 86, 87, 88, 89, 90 };
ulong SSLEXScanner::regTextIndex364[] = { 82, 83, 84, 85, 86, 87, 88, 89, 90 };
ulong SSLEXScanner::regTextIndex365[] = { 85, 90 };
ulong SSLEXScanner::regTextIndex366[] = { 89 };
ulong SSLEXScanner::regTextIndex367[] = { 88, 90 };
ulong SSLEXScanner::regTextIndex368[] = { 87, 90 };
ulong SSLEXScanner::regTextIndex369[] = { 86, 90 };
ulong SSLEXScanner::regTextIndex370[] = { 83, 90 };
ulong SSLEXScanner::regTextIndex371[] = { 84, 90 };
ulong SSLEXScanner::regTextIndex372[] = { 87 };
ulong SSLEXScanner::regTextIndex373[] = { 82 };
ulong SSLEXScanner::regTextIndex374[] = { 87 };
ulong SSLEXScanner::regTextIndex375[] = { 85, 89, 90 };
ulong SSLEXScanner::regTextIndex376[] = { 90 };
ulong SSLEXScanner::regTextIndex377[] = { 87 };
ulong SSLEXScanner::regTextIndex378[] = { 82, 90 };
ulong SSLEXScanner::regTextIndex379[] = { 92, 93, 94, 95 };
ulong SSLEXScanner::regTextIndex380[] = { 92, 93, 94, 95 };
ulong SSLEXScanner::regTextIndex381[] = { 94, 95 };
ulong SSLEXScanner::regTextIndex382[] = { 95 };
ulong SSLEXScanner::regTextIndex383[] = { 92, 93 };
ulong SSLEXScanner::regTextIndex384[] = { 92 };
ulong SSLEXScanner::regTextIndex385[] = { 96, 97, 98, 99, 100 };
ulong SSLEXScanner::regTextIndex386[] = { 96, 97, 98, 99, 100 };
ulong SSLEXScanner::regTextIndex387[] = { 96, 100 };
ulong SSLEXScanner::regTextIndex388[] = { 98 };
ulong SSLEXScanner::regTextIndex389[] = { 99, 100 };
ulong SSLEXScanner::regTextIndex390[] = { 97, 100 };
ulong SSLEXScanner::regTextIndex391[] = { 97 };
ulong SSLEXScanner::regTextIndex392[] = { 96, 98, 100 };
ulong SSLEXScanner::regTextIndex393[] = {  };
ulong SSLEXScanner::regTextIndex394[] = {  };
ulong SSLEXScanner::regTextIndex395[] = { 101, 102, 103, 104 };
ulong SSLEXScanner::regTextIndex396[] = { 101, 102, 103, 104 };
ulong SSLEXScanner::regTextIndex397[] = { 103, 104 };
ulong SSLEXScanner::regTextIndex398[] = { 104 };
ulong SSLEXScanner::regTextIndex399[] = { 101, 102 };
ulong SSLEXScanner::regTextIndex400[] = { 101 };
ulong SSLEXScanner::regTextIndex401[] = { 105, 106 };
ulong SSLEXScanner::regTextIndex402[] = { 105, 106, 107 };
ulong SSLEXScanner::regTextIndex403[] = { 105 };
ulong SSLEXScanner::regTextIndex404[] = { 106 };
ulong SSLEXScanner::regTextIndex405[] = { 107 };
ulong SSLEXScanner::regTextIndex406[] = { 105, 106 };
ulong SSLEXScanner::regTextIndex407[] = { 105, 107 };


//Structure with debugging information
SSLEXScanner::SSLEXDebugStr SSLEXScanner::debugStr[SSLEX_STATE] = {
{ 0, regTextIndex0, 3 },
{ 1, regTextIndex1, 13 },
{ 2, regTextIndex2, 2 },
{ 3, regTextIndex3, 1 },
{ 4, regTextIndex4, 1 },
{ 5, regTextIndex5, 4 },
{ 6, regTextIndex6, 2 },
{ 7, regTextIndex7, 2 },
{ 8, regTextIndex8, 2 },
{ 9, regTextIndex9, 1 },
{ 10, regTextIndex10, 1 },
{ 11, regTextIndex11, 1 },
{ 12, regTextIndex12, 1 },
{ 13, regTextIndex13, 1 },
{ 14, regTextIndex14, 2 },
{ 15, regTextIndex15, 1 },
{ 16, regTextIndex16, 1 },
{ 17, regTextIndex17, 1 },
{ 18, regTextIndex18, 1 },
{ 19, regTextIndex19, 2 },
{ 20, regTextIndex20, 2 },
{ 21, regTextIndex21, 5 },
{ 22, regTextIndex22, 2 },
{ 23, regTextIndex23, 1 },
{ 24, regTextIndex24, 1 },
{ 25, regTextIndex25, 1 },
{ 26, regTextIndex26, 2 },
{ 27, regTextIndex27, 1 },
{ 28, regTextIndex28, 1 },
{ 29, regTextIndex29, 2 },
{ 30, regTextIndex30, 1 },
{ 31, regTextIndex31, 1 },
{ 32, regTextIndex32, 2 },
{ 33, regTextIndex33, 1 },
{ 34, regTextIndex34, 1 },
{ 35, regTextIndex35, 2 },
{ 36, regTextIndex36, 1 },
{ 37, regTextIndex37, 1 },
{ 38, regTextIndex38, 2 },
{ 39, regTextIndex39, 1 },
{ 40, regTextIndex40, 1 },
{ 41, regTextIndex41, 2 },
{ 42, regTextIndex42, 1 },
{ 43, regTextIndex43, 2 },
{ 44, regTextIndex44, 1 },
{ 45, regTextIndex45, 2 },
{ 46, regTextIndex46, 1 },
{ 47, regTextIndex47, 2 },
{ 48, regTextIndex48, 2 },
{ 49, regTextIndex49, 21 },
{ 50, regTextIndex50, 28 },
{ 51, regTextIndex51, 1 },
{ 52, regTextIndex52, 4 },
{ 53, regTextIndex53, 1 },
{ 54, regTextIndex54, 2 },
{ 55, regTextIndex55, 2 },
{ 56, regTextIndex56, 2 },
{ 57, regTextIndex57, 2 },
{ 58, regTextIndex58, 2 },
{ 59, regTextIndex59, 2 },
{ 60, regTextIndex60, 2 },
{ 61, regTextIndex61, 2 },
{ 62, regTextIndex62, 4 },
{ 63, regTextIndex63, 2 },
{ 64, regTextIndex64, 2 },
{ 65, regTextIndex65, 1 },
{ 66, regTextIndex66, 1 },
{ 67, regTextIndex67, 1 },
{ 68, regTextIndex68, 1 },
{ 69, regTextIndex69, 1 },
{ 70, regTextIndex70, 1 },
{ 71, regTextIndex71, 1 },
{ 72, regTextIndex72, 10 },
{ 73, regTextIndex73, 2 },
{ 74, regTextIndex74, 4 },
{ 75, regTextIndex75, 2 },
{ 76, regTextIndex76, 1 },
{ 77, regTextIndex77, 2 },
{ 78, regTextIndex78, 1 },
{ 79, regTextIndex79, 1 },
{ 80, regTextIndex80, 2 },
{ 81, regTextIndex81, 3 },
{ 82, regTextIndex82, 1 },
{ 83, regTextIndex83, 1 },
{ 84, regTextIndex84, 1 },
{ 85, regTextIndex85, 2 },
{ 86, regTextIndex86, 1 },
{ 87, regTextIndex87, 1 },
{ 88, regTextIndex88, 2 },
{ 89, regTextIndex89, 1 },
{ 90, regTextIndex90, 1 },
{ 91, regTextIndex91, 2 },
{ 92, regTextIndex92, 1 },
{ 93, regTextIndex93, 1 },
{ 94, regTextIndex94, 3 },
{ 95, regTextIndex95, 1 },
{ 96, regTextIndex96, 1 },
{ 97, regTextIndex97, 2 },
{ 98, regTextIndex98, 1 },
{ 99, regTextIndex99, 2 },
{ 100, regTextIndex100, 1 },
{ 101, regTextIndex101, 1 },
{ 102, regTextIndex102, 1 },
{ 103, regTextIndex103, 2 },
{ 104, regTextIndex104, 1 },
{ 105, regTextIndex105, 1 },
{ 106, regTextIndex106, 1 },
{ 107, regTextIndex107, 2 },
{ 108, regTextIndex108, 1 },
{ 109, regTextIndex109, 1 },
{ 110, regTextIndex110, 1 },
{ 111, regTextIndex111, 2 },
{ 112, regTextIndex112, 1 },
{ 113, regTextIndex113, 2 },
{ 114, regTextIndex114, 1 },
{ 115, regTextIndex115, 2 },
{ 116, regTextIndex116, 1 },
{ 117, regTextIndex117, 1 },
{ 118, regTextIndex118, 1 },
{ 119, regTextIndex119, 2 },
{ 120, regTextIndex120, 2 },
{ 121, regTextIndex121, 2 },
{ 122, regTextIndex122, 1 },
{ 123, regTextIndex123, 1 },
{ 124, regTextIndex124, 2 },
{ 125, regTextIndex125, 3 },
{ 126, regTextIndex126, 3 },
{ 127, regTextIndex127, 1 },
{ 128, regTextIndex128, 1 },
{ 129, regTextIndex129, 1 },
{ 130, regTextIndex130, 2 },
{ 131, regTextIndex131, 7 },
{ 132, regTextIndex132, 7 },
{ 133, regTextIndex133, 1 },
{ 134, regTextIndex134, 2 },
{ 135, regTextIndex135, 2 },
{ 136, regTextIndex136, 2 },
{ 137, regTextIndex137, 3 },
{ 138, regTextIndex138, 2 },
{ 139, regTextIndex139, 1 },
{ 140, regTextIndex140, 1 },
{ 141, regTextIndex141, 1 },
{ 142, regTextIndex142, 1 },
{ 143, regTextIndex143, 5 },
{ 144, regTextIndex144, 5 },
{ 145, regTextIndex145, 1 },
{ 146, regTextIndex146, 1 },
{ 147, regTextIndex147, 2 },
{ 148, regTextIndex148, 2 },
{ 149, regTextIndex149, 2 },
{ 150, regTextIndex150, 2 },
{ 151, regTextIndex151, 4 },
{ 152, regTextIndex152, 4 },
{ 153, regTextIndex153, 1 },
{ 154, regTextIndex154, 1 },
{ 155, regTextIndex155, 1 },
{ 156, regTextIndex156, 1 },
{ 157, regTextIndex157, 2 },
{ 158, regTextIndex158, 1 },
{ 159, regTextIndex159, 2 },
{ 160, regTextIndex160, 1 },
{ 161, regTextIndex161, 1 },
{ 162, regTextIndex162, 1 },
{ 163, regTextIndex163, 17 },
{ 164, regTextIndex164, 17 },
{ 165, regTextIndex165, 1 },
{ 166, regTextIndex166, 1 },
{ 167, regTextIndex167, 1 },
{ 168, regTextIndex168, 1 },
{ 169, regTextIndex169, 1 },
{ 170, regTextIndex170, 2 },
{ 171, regTextIndex171, 2 },
{ 172, regTextIndex172, 2 },
{ 173, regTextIndex173, 2 },
{ 174, regTextIndex174, 2 },
{ 175, regTextIndex175, 2 },
{ 176, regTextIndex176, 2 },
{ 177, regTextIndex177, 2 },
{ 178, regTextIndex178, 2 },
{ 179, regTextIndex179, 2 },
{ 180, regTextIndex180, 2 },
{ 181, regTextIndex181, 2 },
{ 182, regTextIndex182, 13 },
{ 183, regTextIndex183, 2 },
{ 184, regTextIndex184, 1 },
{ 185, regTextIndex185, 1 },
{ 186, regTextIndex186, 3 },
{ 187, regTextIndex187, 1 },
{ 188, regTextIndex188, 2 },
{ 189, regTextIndex189, 1 },
{ 190, regTextIndex190, 2 },
{ 191, regTextIndex191, 1 },
{ 192, regTextIndex192, 2 },
{ 193, regTextIndex193, 2 },
{ 194, regTextIndex194, 2 },
{ 195, regTextIndex195, 2 },
{ 196, regTextIndex196, 2 },
{ 197, regTextIndex197, 2 },
{ 198, regTextIndex198, 2 },
{ 199, regTextIndex199, 2 },
{ 200, regTextIndex200, 2 },
{ 201, regTextIndex201, 2 },
{ 202, regTextIndex202, 1 },
{ 203, regTextIndex203, 2 },
{ 204, regTextIndex204, 2 },
{ 205, regTextIndex205, 2 },
{ 206, regTextIndex206, 2 },
{ 207, regTextIndex207, 2 },
{ 208, regTextIndex208, 2 },
{ 209, regTextIndex209, 2 },
{ 210, regTextIndex210, 2 },
{ 211, regTextIndex211, 2 },
{ 212, regTextIndex212, 2 },
{ 213, regTextIndex213, 2 },
{ 214, regTextIndex214, 2 },
{ 215, regTextIndex215, 2 },
{ 216, regTextIndex216, 2 },
{ 217, regTextIndex217, 2 },
{ 218, regTextIndex218, 2 },
{ 219, regTextIndex219, 2 },
{ 220, regTextIndex220, 2 },
{ 221, regTextIndex221, 2 },
{ 222, regTextIndex222, 2 },
{ 223, regTextIndex223, 2 },
{ 224, regTextIndex224, 2 },
{ 225, regTextIndex225, 2 },
{ 226, regTextIndex226, 2 },
{ 227, regTextIndex227, 14 },
{ 228, regTextIndex228, 2 },
{ 229, regTextIndex229, 2 },
{ 230, regTextIndex230, 2 },
{ 231, regTextIndex231, 2 },
{ 232, regTextIndex232, 2 },
{ 233, regTextIndex233, 2 },
{ 234, regTextIndex234, 2 },
{ 235, regTextIndex235, 2 },
{ 236, regTextIndex236, 2 },
{ 237, regTextIndex237, 2 },
{ 238, regTextIndex238, 2 },
{ 239, regTextIndex239, 2 },
{ 240, regTextIndex240, 3 },
{ 241, regTextIndex241, 2 },
{ 242, regTextIndex242, 2 },
{ 243, regTextIndex243, 2 },
{ 244, regTextIndex244, 2 },
{ 245, regTextIndex245, 2 },
{ 246, regTextIndex246, 2 },
{ 247, regTextIndex247, 2 },
{ 248, regTextIndex248, 2 },
{ 249, regTextIndex249, 2 },
{ 250, regTextIndex250, 2 },
{ 251, regTextIndex251, 3 },
{ 252, regTextIndex252, 2 },
{ 253, regTextIndex253, 2 },
{ 254, regTextIndex254, 2 },
{ 255, regTextIndex255, 2 },
{ 256, regTextIndex256, 2 },
{ 257, regTextIndex257, 3 },
{ 258, regTextIndex258, 2 },
{ 259, regTextIndex259, 2 },
{ 260, regTextIndex260, 2 },
{ 261, regTextIndex261, 2 },
{ 262, regTextIndex262, 18 },
{ 263, regTextIndex263, 18 },
{ 264, regTextIndex264, 2 },
{ 265, regTextIndex265, 1 },
{ 266, regTextIndex266, 2 },
{ 267, regTextIndex267, 1 },
{ 268, regTextIndex268, 1 },
{ 269, regTextIndex269, 1 },
{ 270, regTextIndex270, 2 },
{ 271, regTextIndex271, 2 },
{ 272, regTextIndex272, 2 },
{ 273, regTextIndex273, 2 },
{ 274, regTextIndex274, 2 },
{ 275, regTextIndex275, 2 },
{ 276, regTextIndex276, 2 },
{ 277, regTextIndex277, 2 },
{ 278, regTextIndex278, 2 },
{ 279, regTextIndex279, 2 },
{ 280, regTextIndex280, 2 },
{ 281, regTextIndex281, 2 },
{ 282, regTextIndex282, 13 },
{ 283, regTextIndex283, 3 },
{ 284, regTextIndex284, 1 },
{ 285, regTextIndex285, 1 },
{ 286, regTextIndex286, 3 },
{ 287, regTextIndex287, 1 },
{ 288, regTextIndex288, 2 },
{ 289, regTextIndex289, 3 },
{ 290, regTextIndex290, 1 },
{ 291, regTextIndex291, 2 },
{ 292, regTextIndex292, 1 },
{ 293, regTextIndex293, 2 },
{ 294, regTextIndex294, 2 },
{ 295, regTextIndex295, 2 },
{ 296, regTextIndex296, 2 },
{ 297, regTextIndex297, 2 },
{ 298, regTextIndex298, 2 },
{ 299, regTextIndex299, 2 },
{ 300, regTextIndex300, 2 },
{ 301, regTextIndex301, 2 },
{ 302, regTextIndex302, 2 },
{ 303, regTextIndex303, 1 },
{ 304, regTextIndex304, 2 },
{ 305, regTextIndex305, 2 },
{ 306, regTextIndex306, 2 },
{ 307, regTextIndex307, 2 },
{ 308, regTextIndex308, 2 },
{ 309, regTextIndex309, 2 },
{ 310, regTextIndex310, 2 },
{ 311, regTextIndex311, 2 },
{ 312, regTextIndex312, 2 },
{ 313, regTextIndex313, 2 },
{ 314, regTextIndex314, 2 },
{ 315, regTextIndex315, 2 },
{ 316, regTextIndex316, 2 },
{ 317, regTextIndex317, 2 },
{ 318, regTextIndex318, 2 },
{ 319, regTextIndex319, 2 },
{ 320, regTextIndex320, 2 },
{ 321, regTextIndex321, 2 },
{ 322, regTextIndex322, 2 },
{ 323, regTextIndex323, 2 },
{ 324, regTextIndex324, 2 },
{ 325, regTextIndex325, 2 },
{ 326, regTextIndex326, 2 },
{ 327, regTextIndex327, 2 },
{ 328, regTextIndex328, 15 },
{ 329, regTextIndex329, 2 },
{ 330, regTextIndex330, 2 },
{ 331, regTextIndex331, 2 },
{ 332, regTextIndex332, 2 },
{ 333, regTextIndex333, 2 },
{ 334, regTextIndex334, 2 },
{ 335, regTextIndex335, 2 },
{ 336, regTextIndex336, 2 },
{ 337, regTextIndex337, 2 },
{ 338, regTextIndex338, 2 },
{ 339, regTextIndex339, 2 },
{ 340, regTextIndex340, 2 },
{ 341, regTextIndex341, 3 },
{ 342, regTextIndex342, 2 },
{ 343, regTextIndex343, 2 },
{ 344, regTextIndex344, 2 },
{ 345, regTextIndex345, 2 },
{ 346, regTextIndex346, 2 },
{ 347, regTextIndex347, 2 },
{ 348, regTextIndex348, 2 },
{ 349, regTextIndex349, 2 },
{ 350, regTextIndex350, 2 },
{ 351, regTextIndex351, 2 },
{ 352, regTextIndex352, 3 },
{ 353, regTextIndex353, 2 },
{ 354, regTextIndex354, 2 },
{ 355, regTextIndex355, 2 },
{ 356, regTextIndex356, 2 },
{ 357, regTextIndex357, 2 },
{ 358, regTextIndex358, 3 },
{ 359, regTextIndex359, 2 },
{ 360, regTextIndex360, 2 },
{ 361, regTextIndex361, 2 },
{ 362, regTextIndex362, 2 },
{ 363, regTextIndex363, 9 },
{ 364, regTextIndex364, 9 },
{ 365, regTextIndex365, 2 },
{ 366, regTextIndex366, 1 },
{ 367, regTextIndex367, 2 },
{ 368, regTextIndex368, 2 },
{ 369, regTextIndex369, 2 },
{ 370, regTextIndex370, 2 },
{ 371, regTextIndex371, 2 },
{ 372, regTextIndex372, 1 },
{ 373, regTextIndex373, 1 },
{ 374, regTextIndex374, 1 },
{ 375, regTextIndex375, 3 },
{ 376, regTextIndex376, 1 },
{ 377, regTextIndex377, 1 },
{ 378, regTextIndex378, 2 },
{ 379, regTextIndex379, 4 },
{ 380, regTextIndex380, 4 },
{ 381, regTextIndex381, 2 },
{ 382, regTextIndex382, 1 },
{ 383, regTextIndex383, 2 },
{ 384, regTextIndex384, 1 },
{ 385, regTextIndex385, 5 },
{ 386, regTextIndex386, 5 },
{ 387, regTextIndex387, 2 },
{ 388, regTextIndex388, 1 },
{ 389, regTextIndex389, 2 },
{ 390, regTextIndex390, 2 },
{ 391, regTextIndex391, 1 },
{ 392, regTextIndex392, 3 },
{ 393, regTextIndex393, 0 },
{ 394, regTextIndex394, 0 },
{ 395, regTextIndex395, 4 },
{ 396, regTextIndex396, 4 },
{ 397, regTextIndex397, 2 },
{ 398, regTextIndex398, 1 },
{ 399, regTextIndex399, 2 },
{ 400, regTextIndex400, 1 },
{ 401, regTextIndex401, 2 },
{ 402, regTextIndex402, 3 },
{ 403, regTextIndex403, 1 },
{ 404, regTextIndex404, 1 },
{ 405, regTextIndex405, 1 },
{ 406, regTextIndex406, 2 },
{ 407, regTextIndex407, 2 }
};


//Array with regular expression at accepting
char *SSLEXScanner::acceptRegText[SSLEX_STATE] = { 0L,
0L,
"([[:blank:]]+)",
"([[:blank:]]*)(\\r?\\n)",
"((([[:alpha:]_][[:alnum:]_-]*)))",
"^([[:blank:]]+)",
"^([[:blank:]]*)(\\r?\\n)",
"^(([[:alpha:]_][[:alnum:]_-]*))",
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
"^\"%x\"(([[:alpha:]_][[:alnum:]_-]*))?",
"^\"/*\"",
"^\"//\".*",
"^\"%include\".*",
"^\"%definition\".*",
"^\"%specification\".*(\\r?\\n)*",
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
"^\"%x\"(([[:alpha:]_][[:alnum:]_-]*))?",
"^\"%specification\".*(\\r?\\n)*",
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
0L,
0L,
0L,
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
"^\"%s\"(([[:alpha:]_][[:alnum:]_-]*))?",
0L,
0L,
".",
"([[:blank:]]+)",
"([[:blank:]]*)(\\r?\\n)",
"\\\"",
"\"(\"",
"\")\"",
"\"*\"",
"\"+\"",
"\".\"",
"\"/\"",
"\"?\"",
"\"{\"",
"\"|\"",
"\"}\"",
"\"$\"/([[:blank:]]|(\\r?\\n))",
"\"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"\"{\"/[[:digit:]]",
"([[:blank:]]+)\"|\".*(\\r?\\n)",
"\"{\"(([[:alpha:]_][[:alnum:]_-]*))\"}\"",
"\"<<EOF>>\"",
"^([[:blank:]]+)",
"^([[:blank:]]*)(\\r?\\n)",
"^([[:blank:]]*)\"<\"",
"^([[:blank:]]*)\"^\"",
"^([[:blank:]]*)\"//\".*",
"^([[:blank:]]*)\"<<EOF>>\"",
"^\"%extension\".*",
0L,
".",
"\"/\"",
"\"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
".",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
".",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
".",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
".",
0L,
0L,
0L,
0L,
0L,
0L,
"\"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*",
0L,
0L,
0L,
"\"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*",
0L,
0L,
0L,
"\"[\"((([^\\\\\\n]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))((([^\\\\\\n\\]]|((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|((\"[:\"[[:alpha:]]+\":]\")))*",
0L,
0L,
0L,
0L,
0L,
".",
0L,
0L,
0L,
".",
0L,
0L,
".+",
"(\\r?\\n)",
".+",
0L,
0L,
"([^[:blank:]\\n]).*",
"([[:blank:]]+)",
"(\\r?\\n)",
"([^[:blank:]\\n]).*",
0L,
0L,
".",
"([[:blank:]]+)",
"\"*\"",
"\",\"",
"\">\"",
"((([[:alpha:]_][[:alnum:]_-]*)))",
"\">\"/^",
0L,
0L,
"\"^\"",
0L,
0L,
".",
"(\\r?\\n)",
"\",\"",
"[[:digit:]]+",
"\"}\"",
".",
0L,
0L,
"[^\"\\n]",
"(\\r?\\n)",
"\\\"",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"[^\"\\n]",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"[^\"\\n]",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
0L,
".",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"\"^\"/[^-\\]\\n]",
"\"^\"/(\"-\"|\"]\")",
"((\"[:\"[[:alpha:]]+\":]\"))",
"\"[:alnum:]\"",
"\"[:alpha:]\"",
"\"[:blank:]\"",
"\"[:cntrl:]\"",
"\"[:digit:]\"",
"\"[:graph:]\"",
"\"[:lower:]\"",
"\"[:print:]\"",
"\"[:punct:]\"",
"\"[:space:]\"",
"\"[:upper:]\"",
"\"[:xdigit:]\"",
0L,
".",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
".",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
".",
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
"[^\\]\\n]",
".|(\\r?\\n)",
"\"]\"",
"-/[^\\]\\n]",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
"((\"[:\"[[:alpha:]]+\":]\"))",
"\"[:alnum:]\"",
"\"[:alpha:]\"",
"\"[:blank:]\"",
"\"[:cntrl:]\"",
"\"[:digit:]\"",
"\"[:graph:]\"",
"\"[:lower:]\"",
"\"[:print:]\"",
"\"[:punct:]\"",
"\"[:space:]\"",
"\"[:upper:]\"",
"\"[:xdigit:]\"",
0L,
"[^\\]\\n]",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
"[^\\]\\n]",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
"[^\\]\\n]",
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
"((\\\\([^\\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))",
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
"[^\\]\\n]",
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
"[^[:alpha:]_{}\"'*/\\n]+",
"(\\r?\\n)",
"\\\"",
".",
"(([[:alpha:]_][[:alnum:]_-]*))",
"\"{\"",
"\"}\"",
"\"'\"([^'\\\\\\n]|\\\\.)*\"'\"",
"\"/*\"",
0L,
"[^[:alpha:]_{}\"'*/\\n]+",
".",
0L,
".",
0L,
0L,
"[^*\\n]+",
"[^*\\n]*(\\r?\\n)",
"\"*\"",
"\"*/\"",
0L,
0L,
"[^\"\\\\\\n]+",
"(\\r?\\n)",
"\\\"",
".",
"\\\\.",
"[^\"\\\\\\n]+",
0L,
0L,
0L,
0L,
"[^*\\n]+",
"[^*\\n]*(\\r?\\n)",
"\"*\"",
"\"*/\"",
0L,
0L,
".",
"(\\r?\\n)",
"^\"\\\\}\"",
".",
"."

};
#endif

//name of the start conditions
char *SSLEXScanner::scName[] = {
	"INITIAL", "NL_INITIAL",
	"SECT2", "NL_SECT2",
	"CODEBLOCK", "NL_CODEBLOCK",
	"PICKUPDEF", "NL_PICKUPDEF",
	"SC", "NL_SC",
	"CARETISBOL", "NL_CARETISBOL",
	"NUM", "NL_NUM",
	"QUOTE", "NL_QUOTE",
	"FIRSTCCL", "NL_FIRSTCCL",
	"CCL", "NL_CCL",
	"ACTION", "NL_ACTION",
	"COMMENT", "NL_COMMENT",
	"ACTION_STRING", "NL_ACTION_STRING",
	"LINEDIR", "NL_LINEDIR",
	"ACTION_COMMENT", "NL_ACTION_COMMENT",
	"SC_INCLUDE", "NL_SC_INCLUDE"
};

//Table for error handling
int SSLEXScanner::err[scSize][CCLWIDTH] = { 0 };



//state of start conditions
ulong SSLEXScanner::scIndex[] = {
	0, //INITIAL
	1, //NL_INITIAL
	49, //SECT2
	50, //NL_SECT2
	120, //CODEBLOCK
	121, //NL_CODEBLOCK
	125, //PICKUPDEF
	126, //NL_PICKUPDEF
	131, //SC
	132, //NL_SC
	140, //CARETISBOL
	141, //NL_CARETISBOL
	143, //NUM
	144, //NL_NUM
	151, //QUOTE
	152, //NL_QUOTE
	163, //FIRSTCCL
	164, //NL_FIRSTCCL
	262, //CCL
	263, //NL_CCL
	363, //ACTION
	364, //NL_ACTION
	379, //COMMENT
	380, //NL_COMMENT
	385, //ACTION_STRING
	386, //NL_ACTION_STRING
	393, //LINEDIR
	394, //NL_LINEDIR
	395, //ACTION_COMMENT
	396, //NL_ACTION_COMMENT
	401, //SC_INCLUDE
	402 //NL_SC_INCLUDE
};


SSLEXScanner::SSLEXScanner( char *data, ulong size )
{
	//initialize SSLEX

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::SSLEXScanner: No data!\n";

		//exit
		exit( 1 );
	}

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//init with SSLEX_YYTEXTSIZE bytes
	yyTextLen = SSLEX_YYTEXTSIZE;
	yyText = new( char[yyTextLen + 1] );
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackSize = 0;
	scStackPos = 0;
	scStack = 0L;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


SSLEXScanner::~SSLEXScanner()
{
	//free memory
	if( yyText )
		delete[] ( yyText );

	if( scStack )
		delete[] ( scStack );

	//free old text
	if( basePos )
		delete[] ( basePos );


#ifdef SSLEX_INIT

	//deinizialize user defined variables
	deinit();
#endif
}


void SSLEXScanner::reset( void )
{
	//reset the whole scanner

	//start position
	pos = basePos;

	//end of scanning
	end = pos + basePosLength;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//start-condition INITIAL
	state = baseState = INITIAL;

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


void SSLEXScanner::reset( char *data, ulong size )
{
	//reset the whole scanner and give him new input

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::reset: No data!\n";

		//exit
		exit( 1 );
	}

	//free old text
	if( basePos )
		delete[] ( basePos );

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


int SSLEXScanner::yyLex( SSLR_TYPE *attributeStr )
{
	//start scanning
	unsigned char	c;

	//Basis-Position für das Lexem
	startPos = pos;

	//setup some stuff
	yyDoBeforeRule();

	while( pos <= end )
	{
		//Zeichen
		c = *pos;

		//when we use a 7 bit scanner
		if( c > 127 )
		{
			//we need a 8 bit scanner
//			cerr << "SSLEXScanner::yyLex: Line " << yyLineno << ": You need a 8 bit scanner to match the character " << c << "!\n";

			//skip character
			pos++;
			continue;
		}

#ifdef SSLEX_DEBUG
		//print debugging information
		mainDebug( c );
#endif

		//schieben?
		if( ssLexTable[state][c] >= 0 )
		{

#ifdef SSLEX_DEBUG
			//print debugging information
			shiftDebug( c );
#endif

			//akzeptieren?
			if( ssLexAccept[state] )
			{
				//ja, merken
				lastAcceptingState = state;
				lastAcceptingPos = pos;
			}

			//Lookahead-Zustand?
			if( ssLexLA[state] )
				//ja, merken
				lastLAPos = pos;

			//shift new state
			state = ssLexTable[state][c];

			//nächstes Zeichen
			pos++;
		}

		else
		{
			//akzeptieren
			do
			{

#ifdef SSLEX_DEBUG
				//print debugging information
				acceptDebug();
#endif

				switch( ssLexAccept[state] )
				{
					//([[:blank:]]+)
					case 2:
					{
						//setup yyText
						setupyyText();

/* discard */

						break;
					}

					//([[:blank:]]*)(\r?\n)
					case 3:
					{
						//setup yyText
						setupyyText();

/* maybe end of comment line */

						break;
					}

					//((([[:alpha:]_][[:alnum:]_-]*)))
					case 4:
					{
						//setup yyText
						setupyyText();

{
					//Name einer SC
					attributeStr->name = yyStrCpy( yyText );
					return( NAME );
				}

						break;
					}

					//^([[:blank:]]+)
					case 5:
					{
						//setup yyText
						setupyyText();

{
					//user-defined Deklarationen zum Übernehmen in die erzeugte Klasse
					BEGIN( CODEBLOCK );
				}

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 6:
					{
						//setup yyText
						setupyyText();

/* allows blank lines in section 1 */

						break;
					}

					//^(([[:alpha:]_][[:alnum:]_-]*))
					case 7:
					{
						//setup yyText
						setupyyText();

{
					/*
						Im %definition-Teil kann man reg. Ausdrücke, die man im Regel-Teil später
						häufig nutzt, einen Namen zuweisen, also z.b.
						NAME		([[:alpha:]_][[:alnum:]_-]*)

						Dies wird hier erkannt.
					*/
					tmpStr = yyStrCpy( yyText );

					//ist noch nicht komplett
					regExpDef = false;

					//zurückliefern
					BEGIN( PICKUPDEF );
				}

						break;
					}

					//^"%s"(([[:alpha:]_][[:alnum:]_-]*))?
					case 8:
					case 16:
					case 19:
					case 26:
					case 29:
					case 32:
					case 35:
					case 38:
					case 41:
					case 43:
					case 45:
					case 47:
					case 48:
					{
						//setup yyText
						setupyyText();

/* inclusive start condition */ return( SCDECL );

						break;
					}

					//^"%x"(([[:alpha:]_][[:alnum:]_-]*))?
					case 9:
					case 17:
					{
						//setup yyText
						setupyyText();

/* exclusive start condition */ return( XSCDECL );

						break;
					}

					//^"/*"
					case 10:
					{
						//setup yyText
						setupyyText();

{
					//scanne C-Kommentar
					cComment = true;

					//C-Kommentar scannen
					yyPushState( COMMENT );
				}

						break;
					}

					//^"//".*
					case 11:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//^"%include".*
					case 12:
					{
						//setup yyText
						setupyyText();

{
							//eigene Erweiterungen
							if( incl )
								//ist schon mal benutzt
								cerr << "sslex: line " << yyLineno << ": %include already occured!" << endl;

							else
								//den Include-Teil einfach einlesen
								BEGIN( SC_INCLUDE );
						}

						break;
					}

					//^"%definition".*
					case 13:
					{
						//setup yyText
						setupyyText();

{
							//es beginnt der %definition-Teil
							return( DEF );
						}

						break;
					}

					//^"%specification".*(\r?\n)*
					case 14:
					case 18:
					{
						//setup yyText
						setupyyText();

{
									//Regel-Teil
									BEGIN( SECT2 );

									//nicht im Aktion-Teil
									scanAction = false;

									//zurückliefern
									return( SPEC );
								}

						break;
					}

					//.
					case 51:
					case 80:
					case 85:
					case 88:
					case 91:
					case 94:
					case 115:
					case 119:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; attributeStr->character = yyText[0]; return( CHAR );

						break;
					}

					//([[:blank:]]+)
					case 52:
					{
						//setup yyText
						setupyyText();

{
			/* This rule is separate from the one below because
			 * otherwise we get variable trailing context, so
			 * we can't build the scanner using -{f,F}.
			 */
			bracelevel = 0;
			BEGIN( ACTION );

			regTextLine = yyLineno;

				scanAction = true;
			}

						break;
					}

					//([[:blank:]]*)(\r?\n)
					case 53:
					{
						//setup yyText
						setupyyText();

{

				if( scanAction == true )
				{
					//hierher wird gesprungen, wenn eine Regel ohne Aktionsteil angegeben wurde
					scanAction = false;
					regTextLine = yyLineno;
					return( NEWLINE );
				}
			}

						break;
					}

					//\"
					case 54:
					{
						//setup yyText
						setupyyText();

BEGIN( QUOTE ); appendScanRegTxt( yyText ); scanAction = true; return( SOPEN );

						break;
					}

					//"("
					case 55:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( KLOPEN );

						break;
					}

					//")"
					case 56:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( KLCLOSE );

						break;
					}

					//"*"
					case 57:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( MUL );

						break;
					}

					//"+"
					case 58:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( PLUS );

						break;
					}

					//"."
					case 59:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( ANY );

						break;
					}

					//"/"
					case 60:
					case 81:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( LA );

						break;
					}

					//"?"
					case 61:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( QUEST );

						break;
					}

					//"{"
					case 62:
					{
						//setup yyText
						setupyyText();

return( BOPEN );

						break;
					}

					//"|"
					case 63:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( OR );

						break;
					}

					//"}"
					case 64:
					{
						//setup yyText
						setupyyText();

return( BCLOSE );

						break;
					}

					//"$"/([[:blank:]]|(\r?\n))
					case 65:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); scanAction = true; return( ENDLINE );

						break;
					}

					//"["((([^\\\n]|((\\([^\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|(("[:"[[:alpha:]]+":]")))((([^\\\n\]]|((\\([^\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))))|(("[:"[[:alpha:]]+":]")))*
					case 66:
					case 82:
					case 101:
					case 105:
					case 109:
					{
						//setup yyText
						setupyyText();

{

				yyLess( 1 );
				appendScanRegTxt( "[" );
				scanAction = true;
				BEGIN( FIRSTCCL );
				return( COPEN );
			}

						break;
					}

					//((\\([^\n]|[0-7]{1,3}|x[[:xdigit:]]{1,2})))
					case 67:
					case 83:
					case 86:
					case 89:
					case 92:
					case 156:
					case 158:
					case 160:
					case 161:
					case 162:
					case 166:
					case 184:
					case 187:
					case 189:
					case 191:
					case 268:
					case 284:
					case 287:
					case 290:
					case 292:
					{
						//setup yyText
						setupyyText();

{
										//es folgt eine Escape-Sequenz
										attributeStr->i = getEsc( yyText );
										appendScanRegTxt( yyText );
										if ( YY_START == FIRSTCCL )
										BEGIN( CCL );
										return( CHAR );
									}

						break;
					}

					//"{"/[[:digit:]]
					case 68:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

BEGIN( NUM ); appendScanRegTxt( yyText );  scanAction = true; return( BOPEN );

						break;
					}

					//([[:blank:]]+)"|".*(\r?\n)
					case 69:
					{
						//setup yyText
						setupyyText();

regTextLine = yyLineno - 1; insertAction( yyStrCpy( "|" ) ); return( NEWLINE );

						break;
					}

					//"{"(([[:alpha:]_][[:alnum:]_-]*))"}"
					case 70:
					{
						//setup yyText
						setupyyText();

{

			NAME_NEA	*nameNea;
			int			ret;

			strcpy( yyText, yyText + 1 );
			yyText[yyLeng - 2] = 0;


			if( ( ret = findRegExp( yyText ) ) >= 0 )
			{
				nameNea = &nameNeaStr[ret];

				nameNea->used = true;

				yyUnput( ')' );

				yyUnput( nameNea->text );

				yyUnput( '(' );
			}

			else
				cerr << "sslex: line " << yyLineno << ": Undefined definition " << yyText << "!" << endl;
		}

						break;
					}

					//"<<EOF>>"
					case 71:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( "<<EOF>>" ); scanAction = true; return( EOF_OP );

						break;
					}

					//^([[:blank:]]+)
					case 72:
					{
						//setup yyText
						setupyyText();

/* allow indented rules */

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 73:
					{
						//setup yyText
						setupyyText();

/* allow blank lines in section 2 */

						break;
					}

					//^([[:blank:]]*)"<"
					case 74:
					{
						//setup yyText
						setupyyText();

BEGIN( SC );	/* Es folgt eine SC zur Regel */ return( SCOPEN );

						break;
					}

					//^([[:blank:]]*)"^"
					case 75:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( "^" ); scanAction = true; return( BEGLINE );

						break;
					}

					//^([[:blank:]]*)"//".*
					case 76:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//^([[:blank:]]*)"<<EOF>>"
					case 77:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( "<<EOF>>" ); scanAction = true; return( EOF_OP );

						break;
					}

					//^"%extension".*
					case 78:
					{
						//setup yyText
						setupyyText();

{
							/*
								Im %extension-Teil kann man eigene Erweiterungen platzieren, die
								später unverändert ins erzeugte cpp-File des Scanners eingetragen
								werden, also z.b. Hilfsroutinen, etc.
							*/
							if( extension )
								//%extension wurde mehrfach angegeben
								cerr << "sslex: line " << yyLineno << ": %extension already occured!" << endl;

							else
								//einlesen
								scanExtension();
						}

						break;
					}

					//.+
					case 122:
					case 124:
					{
						//setup yyText
						setupyyText();

{
				/*
					Im %definition-Teil eingerückte Zeilen werden unverändert ins erzeugte
					Header-File des Scanners übernommen. Mit ihnen kann man z.b. im %extension-Teil
					benutzte Variablen oder Funktionen deklarieren.
				*/
				insertUserDefHeader( yyText );
			}

						break;
					}

					//(\r?\n)
					case 123:
					{
						//setup yyText
						setupyyText();

{
				//wird später ins Header-File eingetragen
				insertUserDefHeader( yyText );

				//nach dem Lesen einer Zeile (die ja mit {NL} endet), wieder in den normalen Modus
				BEGIN(INITIAL);
			}

						break;
					}

					//([^[:blank:]\n]).*
					case 127:
					case 130:
					{
						//setup yyText
						setupyyText();

{
					/*
						Im %definition-Teil kann man reg. Ausdrücke, die man im Regel-Teil später
						häufig nutzt, einen Namen zuweisen, also z.b.
						NAME		([[:alpha:]_][[:alnum:]_-]*)

						Dies wird hier erkannt.
					*/
					char	*tmp = yyStrCpy( yyText );

					//den Namen für den reg. Ausdruck eintragen
					insertRegExpDef( tmpStr, tmp );
					regExpDef = true;
				}

						break;
					}

					//([[:blank:]]+)
					case 128:
					{
						//setup yyText
						setupyyText();

/* separates name and definition */

						break;
					}

					//(\r?\n)
					case 129:
					{
						//setup yyText
						setupyyText();

{
					//Ende der Definition
					if( regExpDef == false )
						//Fehler
						cerr << "sslex: line " << yyLineno << ": Incomplete name definition!" << endl;

					//wieder in den normalen Modus gehen
					BEGIN( INITIAL );
			}

						break;
					}

					//.
					case 133:
					{
						//setup yyText
						setupyyText();

{
				//Es folgte ANY, also einfach.
				cerr << "sslex: line " << yyLineno << ": Bad <start condition>!" << endl;
			}

						break;
					}

					//([[:blank:]]+)
					case 134:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//"*"
					case 135:
					{
						//setup yyText
						setupyyText();

return( SCALL );

						break;
					}

					//","
					case 136:
					{
						//setup yyText
						setupyyText();

return( KOMMA );

						break;
					}

					//">"
					case 137:
					{
						//setup yyText
						setupyyText();

BEGIN( SECT2 ); return( SCCLOSE );

						break;
					}

					//((([[:alpha:]_][[:alnum:]_-]*)))
					case 138:
					{
						//setup yyText
						setupyyText();

attributeStr->name = yyStrCpy( yyText ); return( NAME );

						break;
					}

					//">"/^
					case 139:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

BEGIN( CARETISBOL ); return( SCCLOSE );

						break;
					}

					//"^"
					case 142:
					{
						//setup yyText
						setupyyText();

BEGIN( SECT2 ); return( BEGLINE );

						break;
					}

					//.
					case 145:
					case 150:
					{
						//setup yyText
						setupyyText();

{
			cerr << "sslex: line " << yyLineno << ": Bad character inside {}'s!" << endl;
			BEGIN( SECT2 );
			return( BCLOSE );
			}

						break;
					}

					//(\r?\n)
					case 146:
					{
						//setup yyText
						setupyyText();

{
			cerr << "sslex: line " << yyLineno << ": Missing }!" << endl;
			BEGIN( SECT2 );
			return( BCLOSE );
			}

						break;
					}

					//","
					case 147:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); return( KOMMA );

						break;
					}

					//[[:digit:]]+
					case 148:
					{
						//setup yyText
						setupyyText();

{
			attributeStr->i = atoi( yyText );
			appendScanRegTxt( yyText );
			return( NUMBER );
			}

						break;
					}

					//"}"
					case 149:
					{
						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); BEGIN( SECT2 ); return( BCLOSE );

						break;
					}

					//[^"\n]
					case 153:
					case 157:
					case 159:
					{
						//setup yyText
						setupyyText();

attributeStr->character = yyText[0]; appendScanRegTxt( yyText );return( CHAR );

						break;
					}

					//(\r?\n)
					case 154:
					{
						//setup yyText
						setupyyText();

{
			cerr << "sslex: line " << yyLineno << ": Missing quote!" << endl;
			BEGIN( SECT2 );
			return( SOPEN );
			}

						break;
					}

					//\"
					case 155:
					{
						//setup yyText
						setupyyText();

BEGIN( SECT2 ); appendScanRegTxt( yyText );return( SOPEN );

						break;
					}

					//.
					case 165:
					case 183:
					case 186:
					case 227:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); attributeStr->character = yyText[0]; appendScanRegTxt( yyText ); return( CHAR );

						break;
					}

					//"^"/[^-\]\n]
					case 167:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

BEGIN(CCL); appendScanRegTxt( yyText ); return( NEGATE );

						break;
					}

					//"^"/("-"|"]")
					case 168:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); return( NEGATE );

						break;
					}

					//(("[:"[[:alpha:]]+":]"))
					case 169:
					case 269:
					{
						//setup yyText
						setupyyText();

{
			cerr << "sslex: line " << yyLineno << ": Bad character class expression: " << yyText << "!" << endl;
			BEGIN( CCL ); return CCE_ALNUM;
			}

						break;
					}

					//"[:alnum:]"
					case 170:
					case 270:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_ALNUM;

						break;
					}

					//"[:alpha:]"
					case 171:
					case 271:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_ALPHA;

						break;
					}

					//"[:blank:]"
					case 172:
					case 272:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_BLANK;

						break;
					}

					//"[:cntrl:]"
					case 173:
					case 273:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_CNTRL;

						break;
					}

					//"[:digit:]"
					case 174:
					case 274:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_DIGIT;

						break;
					}

					//"[:graph:]"
					case 175:
					case 275:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_GRAPH;

						break;
					}

					//"[:lower:]"
					case 176:
					case 276:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_LOWER;

						break;
					}

					//"[:print:]"
					case 177:
					case 277:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_PRINT;

						break;
					}

					//"[:punct:]"
					case 178:
					case 278:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_PUNCT;

						break;
					}

					//"[:space:]"
					case 179:
					case 279:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_SPACE;

						break;
					}

					//"[:upper:]"
					case 180:
					case 280:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_UPPER;

						break;
					}

					//"[:xdigit:]"
					case 181:
					case 281:
					{
						//setup yyText
						setupyyText();

BEGIN( CCL ); appendScanRegTxt( yyText ); return CCE_XDIGIT;

						break;
					}

					//[^\]\n]
					case 264:
					case 283:
					case 286:
					case 289:
					case 328:
					{
						//setup yyText
						setupyyText();

attributeStr->character = yyText[0]; appendScanRegTxt( yyText ); return( CHAR );

						break;
					}

					//.|(\r?\n)
					case 265:
					{
						//setup yyText
						setupyyText();

{
			cerr << "sslex: line " << yyLineno << ": Bad character class!" << endl;
			BEGIN( SECT2 );
			return( CCLOSE );
			}

						break;
					}

					//"]"
					case 266:
					{
						//setup yyText
						setupyyText();

BEGIN( SECT2 ); appendScanRegTxt( yyText ); return( CCLOSE );

						break;
					}

					//-/[^\]\n]
					case 267:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

appendScanRegTxt( yyText ); return( MINUS );

						break;
					}

					//[^[:alpha:]_{}"'*/\n]+
					case 365:
					case 375:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//(\r?\n)
					case 366:
					{
						//setup yyText
						setupyyText();

{

			if( scanAction == true )
				insertAction( yyText );

			if ( bracelevel == 0 )
				{
			insertAction( yyText );
			scanAction = false;
				BEGIN( SECT2 );

					return( NEWLINE );
				}
			}

						break;
					}

					//\"
					case 367:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); BEGIN( ACTION_STRING );

						break;
					}

					//.
					case 368:
					case 376:
					case 378:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 369:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//"{"
					case 370:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); ++bracelevel;

						break;
					}

					//"}"
					case 371:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); --bracelevel;

						break;
					}

					//"'"([^'\\\n]|\\.)*"'"
					case 372:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); /* character constant */

						break;
					}

					//"/*"
					case 373:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); yyPushState( ACTION_COMMENT );

						break;
					}

					//[^*\n]+
					case 381:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//[^*\n]*(\r?\n)
					case 382:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*"
					case 383:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*/"
					case 384:
					{
						//setup yyText
						setupyyText();

{
				//sind wir noch in der Analyse eines C-Kommentars?
				if( cComment == true )
					//ja, die oberste SC entfernen
					yyPopState();
			}

						break;
					}

					//[^"\\\n]+
					case 387:
					case 392:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//(\r?\n)
					case 388:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//\"
					case 389:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); BEGIN( ACTION );

						break;
					}

					//.
					case 390:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//\\.
					case 391:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//[^*\n]+
					case 397:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//[^*\n]*(\r?\n)
					case 398:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//"*"
					case 399:
					{
						//setup yyText
						setupyyText();

insertAction( yyText );

						break;
					}

					//"*/"
					case 400:
					{
						//setup yyText
						setupyyText();

insertAction( yyText ); yyPopState();

						break;
					}

					//.
					case 403:
					case 406:
					case 407:
					{
						//setup yyText
						setupyyText();

/* irgendein Zeichen, nicht \n */ yyMore();

						break;
					}

					//(\r?\n)
					case 404:
					{
						//setup yyText
						setupyyText();

yyMore();

						break;
					}

					//^"\\}"
					case 405:
					{
						//setup yyText
						setupyyText();

{
				/* das Ende von %include ist erreicht */
				char	*tmp = yyStrCpy( yyText );

				//merken
				incl = tmp;

				//zurück zu INITIAL
				BEGIN( INITIAL );
			}

						break;
					}


					default:
					{
						//unable to accept, backtracking or error
						if( lastAcceptingState >= 0 )
						{
							//set back to last accept position
							state = lastAcceptingState;
							pos = lastAcceptingPos;

#ifdef SSLEX_DEBUG
							//backtracking
							cout << "Backtracking, set new state " << state << "\n";
#endif
							//now accept with last accept position
							continue;
						}

						else
						{
							//error
							error( *startPos );

							//remove character
							pos++;
						}

						break;
					}
				}

				//setup some stuff
				yyDoBeforeRule();

				//exit while-loop
				break;

			}while( 1 );

			//Ende der Eingabe erreicht?
			if( pos == end )
				//ja
				break;
		}
	}

	//call eof-rules
	return( endOfLine() );
}


void SSLEXScanner::yyDoBeforeRule( void )
{
	//set some stuff before a new rule is scanned

	//reset
	lastAcceptingState = -1;

	//base position for lexem
	startPos = pos;

	//are we at the beginning of a line?
	if( ( pos == basePos ) || ( pos[-1] == '\n' ) )
		//setup state
		state = setupState( baseState );

	else
		//base-State
		state = baseState;
}


void SSLEXScanner::error( uchar c )
{
	//simple error handling routine
	ulong		i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//did already an error occur in that sc?
	if( !err[i][c] )
	{
		//No, print an error message
		cerr << "line " << yyLineno << ": SC " << scName[i] << ": Illegal character " << transChar[c] << "!\n";

		//mark to avoid ever lasting loops
		err[i][c]++;
	}
}


void SSLEXScanner::setupYYLineno( char *beg, char *end )
{
	//setup yyLineno
	ulong	len = end - beg, i;
	int		nl = 0;

	//count newlines
	for( i = 0; i < len; i++ )
	{
		//newline?
		if( beg[i] == '\n' )
			nl++;
	}

	//add to yyLineno
	yyLineno += nl;
}


void SSLEXScanner::setupyyText( void )
{
	//insert text in yytext
	ulong	len;
	char	*tmp;

	//reg. expression one-character?
	if( pos == startPos )
		//yes, move to next character
		pos++;

	//get length of lexem
	yyLeng = pos - startPos;

	//concatenate token? (yyMore)
	if( concatenate == true )
	{
		//yes, append
		len = strlen( yyText );

		//enough space?
		if( yyTextLen <= ( yyLeng + len ) )
		{
			//extend memory

			//fix yyTextLen
			yyTextLen = yyLeng + len;

			//get enough memory für lexem
			tmp = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );

			//copy string
			strcpy( tmp, yyText );

			//release memory
			if( yyText )
				delete[] ( yyText );

			//copy adress
			yyText = tmp;
		}

		//append
		strncat( yyText, startPos, yyLeng );

		//zero
		yyText[yyLeng + len] = 0;

		//set up yyLeng
		yyLeng += len;

		//next time we want to set up yyText as usual
		concatenate = false;
	}

	else
	{
		//enough space?
		if( yyTextLen <= yyLeng )
		{
			//extend memory
			if( yyText )
				delete[] ( yyText );

			//fix yyTextLen
			yyTextLen = yyLeng;

			//get enough memory für lexem
			yyText = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );
		}

		//insert
		strncpy( yyText, startPos, yyLeng );

		//end with zere
		yyText[yyLeng] = 0;
	}

	//setup yyLineno
	setupYYLineno( startPos, pos );
}


ulong SSLEXScanner::setupState( ulong baseState )
{
	//setup state for begin-of-line-rules
	ulong	state = baseState, i;

	//test if the current state is valid
	switch( baseState )
	{
		case INITIAL:
		case SECT2:
		case CODEBLOCK:
		case PICKUPDEF:
		case SC:
		case CARETISBOL:
		case NUM:
		case QUOTE:
		case FIRSTCCL:
		case CCL:
		case ACTION:
		case COMMENT:
		case ACTION_STRING:
		case LINEDIR:
		case ACTION_COMMENT:
		case SC_INCLUDE:
		{
			//it is right the next state;
			state++;
			break;
		}

		default:
		{
			//ups, unknown start condition
			cerr << "SSLEXScanner::setupState: Line " << yyLineno << ": Unknown start condition!\n";
			exit( 1 );
		}
	}

#ifdef SSLEX_DEBUG
	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//print debugging information
	cout << "switch to " << scName[i] << "\n";
#endif

	//return state
	return( state );
}


void SSLEXScanner::setStartCondition( ulong state )
{
	//set a new start condition
	switch( state )
	{
		case INITIAL:
		{
			//set new start condition
			baseState = INITIAL;
			break;
		}

		case SECT2:
		{
			//set new start condition
			baseState = SECT2;
			break;
		}

		case CODEBLOCK:
		{
			//set new start condition
			baseState = CODEBLOCK;
			break;
		}

		case PICKUPDEF:
		{
			//set new start condition
			baseState = PICKUPDEF;
			break;
		}

		case SC:
		{
			//set new start condition
			baseState = SC;
			break;
		}

		case CARETISBOL:
		{
			//set new start condition
			baseState = CARETISBOL;
			break;
		}

		case NUM:
		{
			//set new start condition
			baseState = NUM;
			break;
		}

		case QUOTE:
		{
			//set new start condition
			baseState = QUOTE;
			break;
		}

		case FIRSTCCL:
		{
			//set new start condition
			baseState = FIRSTCCL;
			break;
		}

		case CCL:
		{
			//set new start condition
			baseState = CCL;
			break;
		}

		case ACTION:
		{
			//set new start condition
			baseState = ACTION;
			break;
		}

		case COMMENT:
		{
			//set new start condition
			baseState = COMMENT;
			break;
		}

		case ACTION_STRING:
		{
			//set new start condition
			baseState = ACTION_STRING;
			break;
		}

		case ACTION_COMMENT:
		{
			//set new start condition
			baseState = ACTION_COMMENT;
			break;
		}

		case SC_INCLUDE:
		{
			//set new start condition
			baseState = SC_INCLUDE;
			break;
		}


		default:
		{
			//unknown start condition
			cerr << "SSLEXScanner::setStartCondition: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore call
			break;
		}
	}
}


ulong SSLEXScanner::getYYLeng( void )
{
	//return length of yyText
	return( yyLeng );
}


ulong SSLEXScanner::getYYLineno( void )
{
	//return line number
	return( yyLineno );
}


char *SSLEXScanner::getYYText( void )
{
	//return yyText
	return( yyText );
}


char *SSLEXScanner::yyStrCpy( char *txt )
{
	//return txt in it's own memory
	ulong	len;
	char	*tmp;

	//length of txt
	len = strlen( txt );

	//get memory for txt
	tmp = new( char[len + 1] );

	//copy
	strcpy( tmp, txt );

	//zero
	tmp[len] = 0;

	//return
	return( tmp );
}


void SSLEXScanner::yyLess( int n )
{
	//returns all but the first n characters of yyText back to the input

	//check
	if( ( n < 0 ) || ( n > yyLeng ) )
	{
		//bad n
		cerr << "SSLEXScanner::yyLess: Line " << yyLineno << ": Bad argument!\n";

		//ignore
		return;
	}

	//zero
	yyText[n] = 0;

	//return to input spring
	pos -= ( yyLeng - n );
}


void SSLEXScanner::yyPushState( ulong newState )
{
	/*
		Pushes the current start condition onto the top of the start condition stack
		and switches to newState as though you have used BEGIN( newState ).
	*/

	//enough memory
	if( scStackPos == scStackSize )
		//enlarge start condition stack
		enlargeSCStack();

	//put on stack
	scStack[scStackPos++] = baseState;

	//switch to new state
	BEGIN( newState );
}


void SSLEXScanner::yyPopState( void )
{
	//pops the top of the start condition stack and switches to it

	//underflow?
	if( scStackPos <= 0 )
		//error
		cerr << "SSLEXScanner::yyPopState: Line " << yyLineno << ": Start condition stack underflow!\n";

	else
	{
		//get new SC state
		ulong	newState = scStack[--scStackPos];

		//switch to it
		BEGIN( newState );

		//set new state
		state = newState;
	}
}


ulong SSLEXScanner::yyTopState( void )
{
	//returns the top of the start condition stack without altering its contents
	return( scStack[scStackPos - 1] );
}


void SSLEXScanner::enlargeSCStack( void )
{
	//enlarge start condition stack
	ulong	*tmp;

	//get enough memory
	tmp = new( ulong[scStackSize + SCStackSize] );

	//copy old content
	memcpy( tmp, scStack, sizeof( ulong ) * scStackSize );

	//free old memory?
	if( scStack )
		//yes
		delete[] ( scStack );

	//set new adress
	scStack = tmp;

	//add size
	scStackSize += SCStackSize;
}


void SSLEXScanner::yyUnput( unsigned char c )
{
	//puts the character c back to the input stream
	ulong	len = basePosLength++;
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + 2] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now insert c
	txt[diff] = c;

	//append rest of the input
	memcpy( &txt[diff + 1], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + 1] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + 1];

	//set new beginning
	basePos = txt;
}


void SSLEXScanner::yyUnput( char *str )
{
	//puts the string str back to the input stream
	ulong	len = basePosLength, strLen = strlen( str );
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + strLen + 1] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now append str
	strcpy( &txt[diff], str );

	//append rest of the input
	memcpy( &txt[strLen + diff], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + strLen] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + strLen + 1];

	//set new beginning
	basePos = txt;

	//correct basePosLength
	basePosLength += strLen;
}


char SSLEXScanner::yyInput( void )
{
	//return the next character to be scanned
	return( *pos++ );
}


#ifdef SSLEX_DEBUG
void SSLEXScanner::mainDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char			tmp[200], *transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//current line
	cout << endl << "current line: " << getYYLineno() << endl;

	//print the next 40 chars of the input
	txtFilter( pos, tmp, 40 );
	cout << "current pos: " << tmp << endl;

	//current SC
	cout << "current start condition: " << scName[i] << endl;

	//current state
	cout << "current state: " << state << endl;

	//current character
	cout << "current character: " << transChar[c] << endl;

	//print assocciated regular expression
	cout << "associated regular expressions:" << endl;

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << endl;

	//print ssLexTable
	cout << "ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << endl << endl;
}


void SSLEXScanner::shiftDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//shift?
	cout << "shift ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << "\n";

	//accepting state?
	if( ssLexAccept[state] )
		//yes
		cout << "ssLexAccept[" << state << "] = " << ssLexAccept[state] << " -> " << acceptRegText[ssLexAccept[state]] << "\n";

	//lookahead state?
	if( ssLexLA[state] )
		//yes
		cout << "lookahead state\n";

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::acceptDebug( void )
{
	//print debugging information

	//accept?
	if( ssLexAccept[state] )
		//yes
		cout << "accepting with " << acceptRegText[ssLexAccept[state]] << "\n";

	else
		//backtrack
		cout << "backtracking to state " << lastAcceptingState << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::txtFilter( char *from, char *to, ulong cnt )
{
	//copy cnt bytes from from to to, but transform escape sequences into
	//readable text form
	ulong	i;
	char	c, tmp[10], *base = to;

	//init
	*to = 0;

	//as long as there is another char
	for( i = 0; i < cnt; i++ )
	{
		//get char
		c = *from++;

		//is it printable?
		if( !isprint( c ) )
		{
			//transform into readable
			switch( c )
			{
				//newline?
				case '\n':
				{
					//newline
					strcat( to, "\\n" );
					break;
				}

				//Backspace
				case '\b':
				{
					//Backspace
					strcat( to, "\\b" );
					break;
				}

				//Linefeed
				case '\f':
				{
					//Linefeed
					strcat( to, "\\f" );
					break;
				}

				//carriage return
				case '\r':
				{
					//carriage return
					strcat( to, "\\r" );
					break;
				}

				//Tabulator
				case '\t':
				{
					//Tabulator
					strcat( to, "\\t" );
					break;
				}

#if __STDC__
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\a" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\v" );
					break;
				}
#else
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\007" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\013" );
					break;
				}
#endif

				default:
				{
					//neither of the above
					sprintf( tmp, "%x", c );

					//append
					strcat( to, tmp );
				}
			}
		}

		else
		{
			//yes, printable
			sprintf( tmp, "%c", c );

			//append
			strcat( to, tmp );
		}
	}
}
#endif

int SSLEXScanner::endOfLine( void )
{
	//call eof-rules

	//action depends on start condition
	switch( baseState )
	{
		case INITIAL:
		{
			//default action
			yyTerminate();

			break;
		}

		case SECT2:
		{
			//default action
			yyTerminate();

			break;
		}

		case CODEBLOCK:
		{
			//default action
			yyTerminate();

			break;
		}

		case PICKUPDEF:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC:
		{
			//default action
			yyTerminate();

			break;
		}

		case CARETISBOL:
		{
			//default action
			yyTerminate();

			break;
		}

		case NUM:
		{
			//default action
			yyTerminate();

			break;
		}

		case QUOTE:
		{
			//default action
			yyTerminate();

			break;
		}

		case FIRSTCCL:
		{
			//default action
			yyTerminate();

			break;
		}

		case CCL:
		{
			//default action
			yyTerminate();

			break;
		}

		case ACTION:
		{
{
			cerr << "sslex: line " << yyLineno << ": EOF encountered inside an action!" << endl;
			yyTerminate();
			}


		}

		case COMMENT:
		{
{
			cerr << "sslex: line " << yyLineno << ": EOF encountered inside an action!" << endl;
			yyTerminate();
			}


		}

		case ACTION_STRING:
		{
{
			cerr << "sslex: line " << yyLineno << ": EOF encountered inside an action!" << endl;
			yyTerminate();
			}


		}

		case LINEDIR:
		{
			//default action
			yyTerminate();

			break;
		}

		case ACTION_COMMENT:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_INCLUDE:
		{
{
				//%include ist nicht korrekt abgeschlossen
				cerr << "sslex: line " << yyLineno << ": Unexpected end of file in %include!" << endl;
			}


		}


		default:
		{
			//Unknown start condition
			cerr << "SSLEXScanner::endOfLine: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore
			break;
		}
	}

	//this should never be executed!
	return( 0 );
}



	//eigene Erweiterungen und Hilfsroutinen

void SSLEXScanner::init( void )
{
	//initialize user defined variables
	userDefHeader = 0L;
	userDefHeaderAnz = 0;
	incl = 0L;
	nameNeaStr = 0L;
	nameNeaAnz = 0;
	actionStr = 0L;
	actionAnz = 0;
	actionMax = 0;
	extension = 0L;

	//Speicher für den reg. Ausdruck als Text
	scanRegTxt = new( char[SCAN_REG_TXT] );
	scanRegTxt[0] = 0;
	scanRegTxtLength = SCAN_REG_TXT;
}


void SSLEXScanner::deinit( void )
{
	//deinitialize user defined variables
	NAME_NEA	*nameNea;
	int			i;

	if( scanRegTxt )
		delete[] ( scanRegTxt );

	if( incl )
		delete[] ( incl );

	if( extension )
		delete[] ( extension );


	//name-definitions?
	if( nameNeaStr )
	{
		//Alle bisherigen Einträge
		for( i = 0; i < nameNeaAnz; i++ )
		{
			//Zeiger
			nameNea = &nameNeaStr[i];

			//Speicher freigeben
			delete[] ( nameNea->name );
			delete[] ( nameNea->text );
		}

		//freigeben
		delete[] ( nameNeaStr );
	}

	//user-def. Header-Angaben freigeben?
	if( userDefHeader )
	{
		//alle Zeilen
		for( i = 0; i < userDefHeaderAnz; i++ )
			delete[] ( userDefHeader[i] );

		delete[] ( userDefHeader );
	}
}


void SSLEXScanner::insertUserDefHeader( char *str )
{
	/*
		Alle eingerückten Zeilen in %definition werden in das Header-File des erzeugten
		Scanners eingefügt. Dies nutzt man, um in den Aktion-Teilen benutzte Variablen
		zu deklarieren.
	*/
	char	**tmp, *copy;

	//genug Speicher anfordern
	tmp = new( char *[userDefHeaderAnz + 1] );

	//alte Zeiger kopieren
	memcpy( tmp, userDefHeader, sizeof( char * ) * userDefHeaderAnz );

	//alten Speicher freigeben?
	if( userDefHeader )
		delete[] ( userDefHeader );

	//Zeiger umkopieren
	userDefHeader = tmp;

	//string kopieren
	copy = yyStrCpy( str );

	//eintragen
	userDefHeader[userDefHeaderAnz++] = copy;
}


char **SSLEXScanner::getUserDefHeader( int &anz )
{
	/*
		Alle eingerückten Zeilen in %definition werden in das Header-File des erzeugten
		Scanners eingefügt. Dies nutzt man, um in den Aktion-Teilen benutzte Variablen
		zu deklarieren.
	*/

	//Anzahl der Zeilen
	anz = userDefHeaderAnz;

	//zurückliefern
	return( userDefHeader );
}


void SSLEXScanner::insertAction( char *str )
{
	/*
		Eine Regel kann von einer Aktion gefolgt sein. Diese werden hier eingetragen und
		vom Parser abgerufen.
	*/
	char	**tmp, *copy;

	//Speicher vorhanden?
	if( actionAnz >= actionMax )
	{
		//Nein, genug Speicher anfordern
		tmp = new( char *[actionAnz + 100] );

		//alte Zeiger kopieren
		memcpy( tmp, actionStr, sizeof( char * ) * actionAnz );

		//alten Speicher freigeben?
		if( actionStr )
			delete[] ( actionStr );

		//Zeiger umkopieren
		actionStr = tmp;

		//neue max. Zahl der Zeilen
		actionMax += 100;
	}

	//string kopieren
	copy = yyStrCpy( str );

	//eintragen
	actionStr[actionAnz++] = copy;
}


char **SSLEXScanner::getAction( int &anz )
{
	//liefert die Aktionen zurück, die nach erfolgreichem Erkennen einer
	//Regel ausgeführt werden sollen.
	char	**tmp = actionStr;

	//Anzahl der Einträge in actionStr
	anz = actionAnz;

	//zurücksetzen
	actionAnz = 0;
	actionMax = 0;
	actionStr = 0L;

	//zurückliefern
	return( tmp );
}


void SSLEXScanner::scanExtension( void )
{
	//%extension-Angabe scannen
	ulong	size;
	char	*base;

	//aktuelle Position im Text merken
	base = pos;

	//\} muss am Anfang einer Zeile stehen
	while( !( ( pos[-1] == '\n' ) && ( pos[0] == '\\' ) && ( pos[1] == '}' ) ) )
	{
		//Überlauf?
		if( pos >= end )
		{
			//Fehler
			cerr << "sslex: line " << yyLineno << ": Missing } in %extension!" << endl;
			exit( 1 );
		}

		pos++;
	}

	//löschen
	pos += 2;

	//extrahieren
	size = pos - base + 1;

	//Speicher anfordern
	extension = new( char[size] );

	//copieren
	strncpy( extension, base, size - 1 );

	//abschließen
	extension[size - 1] = 0;
}


char *SSLEXScanner::getExtension( void )
{
	//%extension-Angaben liefern
	return( extension );
}


char *SSLEXScanner::getInclude( void )
{
	//%include-Angaben liefern
	return( incl );
}


void SSLEXScanner::insertRegExpDef( char *name, char *regExp )
{
	//ein NEA der Art "{NAME} reg" eintragen und in den Text zurücksetzen
	NAME_NEA	*nameNea;
	int			ret;

	//reg. Ausdruck schon eingetragen?
	if( ( ret = findRegExp( name ) ) < 0 )
	{
		//Speicher für eine neue Struktur anfordern
		nameNea = new( NAME_NEA[nameNeaAnz + 1] );

		//alten Bereich kopieren
		memcpy( nameNea, nameNeaStr, sizeof( NAME_NEA ) * nameNeaAnz );

		//alten Speicherbereich freigeben
		if( nameNeaStr )
			delete[] ( nameNeaStr );

		//neuer Speicherbereich
		nameNeaStr = nameNea;

		//Zeiger auf neue Struktur
		nameNea = &nameNeaStr[nameNeaAnz++];

		//Namen eintragen
		nameNea->name = name;

		//Zeilennummer der Definition eintragen
		nameNea->line = yyLineno;

		//noch nicht benutzt
		nameNea->used = false;

		//reg. Ausdruck eintragen
		nameNea->text = regExp;
	}

	else
	{
		//Fehler

		//Zeiger auf Struktur
		nameNeaStr = &nameNeaStr[ret];

		//Meldung ausgeben
		cerr << "sslex: line " << yyLineno << ": Reg. Expression already defined in line " << nameNeaStr->line <<"!" << endl;

		//Fehler
//		err++;
	}
}


int SSLEXScanner::findRegExp( char *name )
{
	//ein reg. Ausdruck der Art {NAME} reg suchen
	NAME_NEA	*nameNea;
	int 		i;

	//alle bisherigen Einträge
	for( i = 0; i < nameNeaAnz; i++ )
	{
		//Zeiger
		nameNea = &nameNeaStr[i];

		//Name gleich?
		if( !strcmp( name, nameNea->name ) )
			//ja
			return( i );
	}

	//noch nicht da
	return( -1 );
}


void SSLEXScanner::checkRegExp( void )
{
	//prüft, ob alle reg. Ausdrücke in %definition auch benutzt wurden
	NAME_NEA	*nameNea;
	int 		i;

	//alle bisherigen Einträge
	for( i = 0; i < nameNeaAnz; i++ )
	{
		//Zeiger
		nameNea = &nameNeaStr[i];

		//benutzt?
		if( nameNea->used == false )
			//Meldung
			cerr << "sslex: line " << nameNea->line << ": Regular Expression " << nameNea->name << " not used!" << endl;
	}
}


char SSLEXScanner::getEsc( char *esc )
{
	//returns the correspondig character to an escape sequence
	char	c, esc_char;
	int		sptr, result;

	switch( esc[1] )
	{
		//Backspace
		case 'b':
			return( '\b' );

		//Linefeed
		case 'f':
			return( '\f' );

		//newline
		case 'n':
			return( '\n' );

		//carriage return
		case 'r':
			return( '\r' );

		//Tabulator
		case 't':
			return( '\t' );

#if __STDC__
		//bing
		case 'a':
			return( '\a' );

		//vertical tab
		case 'v':
			return( '\v' );
#else
		//bing
		case 'a':
			return( '\007' );

		//vertical tab
		case 'v':
			return( '\013' );
#endif

		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		{
			//ist ein oktaler Wert, ala \123
			sptr = 1;

			while( isascii( esc[sptr] ) && isdigit( esc[sptr] ) )
				++sptr;

			c = esc[sptr];
			esc[sptr] = 0;

			sscanf( esc + 1, "%o", &result );
			esc_char = result;

			esc[sptr] = c;

			return( esc_char );
		}

		case 'x':
		{
			//ist ein hexadezimaler Wert
			sptr = 2;

			while( isascii( esc[sptr] ) && isxdigit( (char) esc[sptr] ) )
				++sptr;

			c = esc[sptr];
			esc[sptr] = 0;

			sscanf( esc + 2, "%x", &result );
			esc_char = result;

			esc[sptr] = c;

			return( esc_char );
		}

		default:
			return( esc[1] );
	}
}



void SSLEXScanner::appendScanRegTxt( char *txt )
{
	//anhängen
	char	*tmp;
	int		len1 = strlen( scanRegTxt );
	int		len2 = strlen( txt );

	//vergrößern?
	if( ( len1 + len2 ) >= scanRegTxtLength )
	{
		//ja
		len2 = ( len2 > SCAN_REG_TXT ) ? len2 : SCAN_REG_TXT;

		//Speicher anfordern
		tmp = new( char[scanRegTxtLength + len2 + 1] );

		//alten Inhalt kopieren
		strcpy( tmp, scanRegTxt );

		//löschen
		delete[] ( scanRegTxt );

		//Zeiger anpassen
		scanRegTxt = tmp;

		//neue Größe
		scanRegTxtLength = scanRegTxtLength + len2;
	}

	//anhängen
	strcat( scanRegTxt, txt );
}


char *SSLEXScanner::getScanRegTxt( ulong &line )
{
	/*
		Jeder reg. Ausdruck wird in textform gespeichert. Dieser ist nach dem Erhalt
		von NEWLINE anzufordern.
	*/
	char	*tmp = yyStrCpy( scanRegTxt );

	//initialisieren für den nächsten Scan
	scanRegTxt[0] = 0;

	//Zeile zurückliefern
	line = regTextLine;

	//zurückliefern
	return( tmp );
}




