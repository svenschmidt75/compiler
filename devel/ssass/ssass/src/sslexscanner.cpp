/***************************************************************************
                          sslexscanner.cpp  -  description
                             -------------------
    copyright            : (C) 2002 by Sven Schmidt
    email                : s.schmidt@lboro.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "sslexscanner.h"
#include <iostream>


/****************************
* This is the debug-version *
****************************/




//Define macro ECHO
#define ECHO	cout << yyText

//set a new start condition in user-defined action
#define BEGIN	setStartCondition

//current start condition
#define YY_START	baseState

//yyTerminate
#define yyTerminate()	return( ACCEPT )


//concatenate lexem
#define yyMore()	concatenate = true


//Size of start condition stack
#define SCStackSize	100


//enlargement for yyText if neccesary
#define SSLEX_YYTEXTSIZE	(8*1024)



	//initialize user defined variables
	#define SSLEX_INIT

//Transition-Table
long SSLEXScanner::ssLexTable[SSLEX_STATE][CCLWIDTH] = 
{
/*
  \0,  \1,  \2,  \3,  \4,  \5,  \6,  \a,  \b,  \t,  \n,  \v,  \f,  \r,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    ,   !,   ",   #,   $,   %,   &,   ',   (,   ),   *,   +,   ,,   -,   .,   /,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   :,   ;,   <,   =,   >,   ?,
   @,   A,   B,   C,   D,   E,   F,   G,   H,   I,   J,   K,   L,   M,   N,   O,   P,   Q,   R,   S,   T,   U,   V,   W,   X,   Y,   Z,   [,   \,   ],   ^,   _,
   `,   a,   b,   c,   d,   e,   f,   g,   h,   i,   j,   k,   l,   m,   n,   o,   p,   q,   r,   s,   t,   u,   v,   w,   x,   y,   z,   {,   |,   },   ~, DEL
*/

//Startcondition: INITIAL
/* 0 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   3,  -1,  -1, 101,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1, 186,   4,  -1,  -1,  -1,  -1,   5,   6,  -1,   7,   8,   9, 190,  -1,  10, 308, 308, 308, 308, 308, 308, 308, 308, 308,  -1,  11,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1, 103, 309, 311, 187, 313,  12,  12,  12,  12, 315,  12, 317, 349, 319, 191, 193,  12, 321, 195, 323, 351,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 1 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 102,  97,  -1,  -1, 199,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 102,  -1, 186,   4,  -1,  -1,  -1,  -1,   5,   6,  -1,   7,   8,   9, 201, 203,  10, 308, 308, 308, 308, 308, 308, 308, 308, 308,  -1,  11,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 252, 310, 312, 253, 314, 251, 251, 251, 251, 316, 251, 318, 350, 320, 254, 255, 251, 322, 256, 324, 352, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 2 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 3 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 4 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 5 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 6 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 7 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 8 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 9 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 10 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 192,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 11 */
{
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  -1,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11
},
/* 12 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 13 */
{
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,  -1, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186,  13, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186
},
/* 14 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 15 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1, 335,  12,  25,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 16 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 355,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 17 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 357,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 18 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 19 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 194,  -1, 197,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 20 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1, 217,  -1,  -1,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 21 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 22 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 23 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  72,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 24 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 25 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 26 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  26,  26,  26,  26,  26,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  26,  26,  26,  26,  26,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 27 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  79,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 28 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 29 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 30 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 31 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 32 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 33 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 34 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 35 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 36 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 37 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 38 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 39 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 40 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 41 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 42 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 43 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 44 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 45 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 46 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 47 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 48 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 49 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 50 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  82,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 51 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 52 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 53 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 54 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 55 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 56 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  87,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 57 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 58 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 59 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 60 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 61 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 62 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 63 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 64 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 65 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 66 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 67 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 68 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 69 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 70 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 71 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 72 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 73 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 74 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 75 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  88,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 76 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 77 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 78 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 79 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 80 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 81 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 82 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 83 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 84 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 85 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 86 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 87 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 88 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 89 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 90 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 91 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 92 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 93 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 94 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 95 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 96 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 97 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 98 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 99 */
{
  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  -1,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,
  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99
},
/* 100 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 101 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 102 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 102,  97,  -1,  -1, 199,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 102,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 103 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 194,  -1, 197,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12, 198,  12,  12,  12,  12,  12,  12,  12,  12,  12, 200,  12,  12,  12,  12, 202,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 104 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 105 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 336, 251, 115, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 106 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 356, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 107 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 358, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 108 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 109 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 194,  -1, 194,  -1,  -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 110 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1, 196,  -1,  -1, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 111 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 112 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 113 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 161, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 114 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 115 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 116 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 168, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 117 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 118 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 119 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 120 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 121 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 122 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 123 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 124 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 125 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 126 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 127 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 128 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 129 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 130 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 131 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 132 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 133 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 134 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 135 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 136 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 137 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 138 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 139 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 171, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 140 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 141 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 142 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 143 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 144 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 145 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 176, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 146 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 147 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 148 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 149 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 150 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 151 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 152 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 153 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 154 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 155 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 156 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 157 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 158 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 159 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 160 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 161 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 162 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 163 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 164 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 177, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 165 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 166 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 167 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 168 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 169 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 170 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 171 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 172 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 173 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 174 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 175 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 176 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 177 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 178 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 179 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 180 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 181 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 182 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 183 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 184 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 185 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 186 */
{
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,  -1, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186,  13, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186
},
/* 187 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1, 217,  -1,  -1,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12, 325,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 188 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 194,  -1, 257,  -1,  -1, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 189 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1, 274,  -1,  -1, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 190 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  14,  12,  15, 369,  12,  12,  12, 371,  12,  12,  16,  12,  12,  12,  12,  12,  12,  17, 353,  12,  12,  18,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 191 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  21,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 192 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  26,  26,  26,  26,  26,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  26,  26,  26,  26,  26,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 193 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  22,  12, 226,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 194 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 195 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12, 228,  12, 229,  12, 230, 231,  12,  12,  12, 232, 233, 234,  12,  23,  12,  24, 235,  12, 236, 237,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 196 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 197 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 198 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  27,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 199 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  97,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 200 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  28,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 201 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 104, 251, 105, 370, 251, 251, 251, 372, 251, 251, 106, 251, 251, 251, 251, 251, 251, 107, 354, 251, 251, 108, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 202 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  29,  12,  12,  12,  12,  12,  30,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 203 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  98,  -1,  -1,  -1,  -1,  99,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 204 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  31,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  32,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 205 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  33,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 206 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  34,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  35,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 207 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  36,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 208 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  37,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  38,  39,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 209 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  40,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 210 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  41,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 211 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  42,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 212 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  43,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 213 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  44,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 214 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  45,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  46,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 215 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  47,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 216 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  48,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 217 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 218 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  49,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 219 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  50,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 220 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  51,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 221 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  52,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 222 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  53,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 223 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  54,  12,  12,  12,  12,  12,  55,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 224 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  56,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 225 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  57,  12,  12,  12,  58,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 226 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  59,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 227 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  60,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 228 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  61,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  62,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 229 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  63,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 230 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  64,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  65,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 231 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  66,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 232 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  67,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  68,  69,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 233 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  70,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 234 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  71,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 235 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  73,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  74,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 236 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  75,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 237 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  76,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  77,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 238 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  78,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 239 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  80,  12,  81,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 240 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  83,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 241 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  84,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 242 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  85,  12,  86,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 243 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  89,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 244 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  90,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 245 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  91,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 246 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  92,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 247 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  93,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 248 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  94,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 249 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  95,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 250 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  96,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 251 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 252 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 194,  -1, 257,  -1,  -1, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 258, 251, 251, 251, 251, 251, 251, 251, 251, 251, 259, 251, 251, 251, 251, 260, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 253 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1, 274,  -1,  -1, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 326, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 254 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 111, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 255 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 112, 251, 283, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 256 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 285, 251, 286, 251, 287, 288, 251, 251, 251, 289, 290, 291, 251, 113, 251, 114, 292, 251, 293, 294, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 257 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 258 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 116, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 259 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 117, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 260 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 118, 251, 251, 251, 251, 251, 119, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 261 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 120, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 121, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 262 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 122, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 263 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 123, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 124, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 264 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 125, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 265 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 126, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 127, 128, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 266 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 129, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 267 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 130, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 268 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 131, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 269 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 132, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 270 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 133, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 271 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 134, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 135, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 272 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 136, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 273 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 137, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 274 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 275 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 138, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 276 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 139, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 277 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 140, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 278 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 141, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 279 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 142, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 280 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 143, 251, 251, 251, 251, 251, 144, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 281 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 145, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 282 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 146, 251, 251, 251, 147, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 283 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 148, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 284 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 149, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 285 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 150, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 151, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 286 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 152, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 287 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 153, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 154, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 288 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 155, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 289 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 156, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 157, 158, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 290 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 159, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 291 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 160, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 292 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 162, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 163, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 293 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 164, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 294 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 165, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 166, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 295 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 167, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 296 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 169, 251, 170, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 297 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 172, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 298 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 173, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 299 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 174, 251, 175, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 300 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 178, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 301 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 179, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 302 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 180, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 303 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 181, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 304 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 182, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 305 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 183, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 306 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 184, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 307 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 185, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 308 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 309 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12, 204,  12, 205,  12, 206, 207,  12,  12,  12, 208, 209, 210,  12, 211,  12, 212, 213,  12,  12, 214,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 310 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 261, 251, 262, 251, 263, 264, 251, 251, 251, 265, 266, 267, 251, 268, 251, 269, 270, 251, 251, 271, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 311 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 215, 216,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 312 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 272, 273, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 313 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 218,  12,  12,  12,  12,  12,  12,  12,  12, 219,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 314 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 275, 251, 251, 251, 251, 251, 251, 251, 251, 276, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 315 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 220,  12,  12,  12,  12,  12, 221,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 316 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 277, 251, 251, 251, 251, 251, 278, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 317 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12, 222,  12,  12,  12, 327,  12,  12,  12,  12,  12,  12,  12,  12,  12, 223,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 318 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 279, 251, 251, 251, 328, 251, 251, 251, 251, 251, 251, 251, 251, 251, 280, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 319 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12, 224,  12,  12,  12,  12,  12,  12,  12,  12,  12, 225,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 320 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 281, 251, 251, 251, 251, 251, 251, 251, 251, 251, 282, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 321 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 227,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 322 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 284, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 323 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 238,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 324 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 295, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 325 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 239,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 326 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 296, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 327 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 240,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 328 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 297, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 329 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 241,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 330 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 298, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 331 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 242,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 332 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 299, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 333 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 243,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 334 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 300, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 335 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 244,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 336 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 301, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 337 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 245,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 338 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 302, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 339 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1, 246,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 340 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 303, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 341 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12, 247,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 342 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 304, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 343 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 248,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 344 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 305, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 345 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 249,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 346 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 306, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 347 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 250,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 348 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 307, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 349 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 329,  12,  12,  12,  12,  12, 331,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 350 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 330, 251, 251, 251, 251, 251, 332, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 351 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 333,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 352 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 334, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 353 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12, 337,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 354 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 338, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 355 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12, 339,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 356 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 340, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 357 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1, 341,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 363,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 358 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 342, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 364, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 359 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 343,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 360 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 344, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 361 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 345,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 362 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 346, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 363 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12, 347,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 364 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 348, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 365 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 359,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 366 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 360, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 367 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 361,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 368 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 362, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 369 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 365,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 370 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 366, 251, 251,  -1,  -1,  -1,  -1,  -1
},
/* 371 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  12,
  -1,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12, 367,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  -1,  -1,  -1,  -1,  -1
},
/* 372 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 251,  -1,  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 100,  -1,  -1,  -1,  -1,  -1,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1, 251,
  -1, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 368, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_COMMENT
/* 373 */
{
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 376, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 377, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375
},
/* 374 */
{
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 376, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 377, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375
},
/* 375 */
{
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 376, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,  -1, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375, 375
},
/* 376 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 377 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 378,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 378 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
}

};

//Accept-Array
ulong SSLEXScanner::ssLexAccept[SSLEX_STATE] = 
{
/* 0 */
0,
/* 1 */
0,
/* 2 */

//Line 79: ([[:blank:]]+)
2,
/* 3 */

//Line 254: (\\r?\\n)
3,
/* 4 */

//Line 148: \"#\"
4,
/* 5 */

//Line 141: \"(\"
5,
/* 6 */

//Line 142: \")\"
6,
/* 7 */

//Line 143: \"+\"
7,
/* 8 */

//Line 252: \",\"
8,
/* 9 */

//Line 144: \"-\"
9,
/* 10 */

//Line 150: ((\"+\"|\"-\")?([[:digit:]])+)
10,
/* 11 */

//Line 257: \";\".*
11,
/* 12 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
12,
/* 13 */

//Line 109: \\\".*\\\"
13,
/* 14 */

//Line 101: \".b\"
14,
/* 15 */

//Line 105: \".d\"
15,
/* 16 */

//Line 103: \".l\"
16,
/* 17 */

//Line 104: \".s\"
17,
/* 18 */

//Line 102: \".w\"
18,
/* 19 */

//Line 125: \"a\"((\"+\"|\"-\")?([[:digit:]])+)+
19,
/* 20 */

//Line 117: \"d\"((\"+\"|\"-\")?([[:digit:]])+)+
20,
/* 21 */

//Line 184: \"or\"
21,
/* 22 */

//Line 147: \"pc\"
22,
/* 23 */

//Line 133: \"sp\"
23,
/* 24 */

//Line 146: \"sr\"
24,
/* 25 */

//Line 107: \".dc\"
25,
/* 26 */

//Line 161: (\"0x\"([[:xdigit:]])+)
26,
/* 27 */

//Line 174: \"add\"
27,
/* 28 */

//Line 183: \"and\"
28,
/* 29 */

//Line 192: \"asl\"
29,
/* 30 */

//Line 193: \"asr\"
30,
/* 31 */

//Line 208: \"bcc\"
31,
/* 32 */

//Line 209: \"bcs\"
32,
/* 33 */

//Line 197: \"beq\"
33,
/* 34 */

//Line 202: \"bge\"
34,
/* 35 */

//Line 201: \"bgt\"
35,
/* 36 */

//Line 206: \"bhi\"
36,
/* 37 */

//Line 200: \"ble\"
37,
/* 38 */

//Line 207: \"bls\"
38,
/* 39 */

//Line 199: \"blt\"
39,
/* 40 */

//Line 204: \"bmi\"
40,
/* 41 */

//Line 198: \"bne\"
41,
/* 42 */

//Line 203: \"bpl\"
42,
/* 43 */

//Line 196: \"bra\"
43,
/* 44 */

//Line 205: \"bsr\"
44,
/* 45 */

//Line 210: \"bvc\"
45,
/* 46 */

//Line 211: \"bvs\"
46,
/* 47 */

//Line 213: \"clr\"
47,
/* 48 */

//Line 214: \"cmp\"
48,
/* 49 */

//Line 185: \"eor\"
49,
/* 50 */

//Line 215: \"ext\"
50,
/* 51 */

//Line 217: \"jmp\"
51,
/* 52 */

//Line 218: \"jsr\"
52,
/* 53 */

//Line 219: \"lea\"
53,
/* 54 */

//Line 190: \"lsl\"
54,
/* 55 */

//Line 191: \"lsr\"
55,
/* 56 */

//Line 186: \"neg\"
56,
/* 57 */

//Line 223: \"nop\"
57,
/* 58 */

//Line 188: \"not\"
58,
/* 59 */

//Line 220: \"pea\"
59,
/* 60 */

//Line 224: \"rts\"
60,
/* 61 */

//Line 239: \"scc\"
61,
/* 62 */

//Line 240: \"scs\"
62,
/* 63 */

//Line 229: \"seq\"
63,
/* 64 */

//Line 234: \"sge\"
64,
/* 65 */

//Line 233: \"sgt\"
65,
/* 66 */

//Line 237: \"shi\"
66,
/* 67 */

//Line 232: \"sle\"
67,
/* 68 */

//Line 238: \"sls\"
68,
/* 69 */

//Line 231: \"slt\"
69,
/* 70 */

//Line 236: \"smi\"
70,
/* 71 */

//Line 230: \"sne\"
71,
/* 72 */

//Line 235: \"spl\"
72,
/* 73 */

//Line 228: \"ssf\"
73,
/* 74 */

//Line 227: \"sst\"
74,
/* 75 */

//Line 176: \"sub\"
75,
/* 76 */

//Line 241: \"svc\"
76,
/* 77 */

//Line 242: \"svs\"
77,
/* 78 */

//Line 225: \"tst\"
78,
/* 79 */

//Line 175: \"addx\"
79,
/* 80 */

//Line 181: \"divs\"
80,
/* 81 */

//Line 180: \"divu\"
81,
/* 82 */

//Line 216: \"extb\"
82,
/* 83 */

//Line 221: \"link\"
83,
/* 84 */

//Line 172: \"move\"
84,
/* 85 */

//Line 179: \"muls\"
85,
/* 86 */

//Line 178: \"mulu\"
86,
/* 87 */

//Line 187: \"negx\"
87,
/* 88 */

//Line 177: \"subx\"
88,
/* 89 */

//Line 222: \"unlk\"
89,
/* 90 */

//Line 86: \".data\"
90,
/* 91 */

//Line 85: \".text\"
91,
/* 92 */

//Line 84: \".local\"
92,
/* 93 */

//Line 81: \".stack\"
93,
/* 94 */

//Line 83: \".export\"
94,
/* 95 */

//Line 82: \".import\"
95,
/* 96 */

//Line 88: \".string\"
96,
/* 97 */

//Line 77: ^([[:blank:]]*)(\\r?\\n)
97,
/* 98 */

//Line 71: ^\"/*\"
98,
/* 99 */

//Line 69: ^\"//\".*
99,
/* 100 */

//Line 90: ^((\".\"?([[:alpha:]_][[:alnum:]_-]*))\":\")
100,
/* 101 */
0,
/* 102 */

//Line 79: ([[:blank:]]+)
102,
/* 103 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
103,
/* 104 */

//Line 101: \".b\"
104,
/* 105 */

//Line 105: \".d\"
105,
/* 106 */

//Line 103: \".l\"
106,
/* 107 */

//Line 104: \".s\"
107,
/* 108 */

//Line 102: \".w\"
108,
/* 109 */

//Line 125: \"a\"((\"+\"|\"-\")?([[:digit:]])+)+
109,
/* 110 */

//Line 117: \"d\"((\"+\"|\"-\")?([[:digit:]])+)+
110,
/* 111 */

//Line 184: \"or\"
111,
/* 112 */

//Line 147: \"pc\"
112,
/* 113 */

//Line 133: \"sp\"
113,
/* 114 */

//Line 146: \"sr\"
114,
/* 115 */

//Line 107: \".dc\"
115,
/* 116 */

//Line 174: \"add\"
116,
/* 117 */

//Line 183: \"and\"
117,
/* 118 */

//Line 192: \"asl\"
118,
/* 119 */

//Line 193: \"asr\"
119,
/* 120 */

//Line 208: \"bcc\"
120,
/* 121 */

//Line 209: \"bcs\"
121,
/* 122 */

//Line 197: \"beq\"
122,
/* 123 */

//Line 202: \"bge\"
123,
/* 124 */

//Line 201: \"bgt\"
124,
/* 125 */

//Line 206: \"bhi\"
125,
/* 126 */

//Line 200: \"ble\"
126,
/* 127 */

//Line 207: \"bls\"
127,
/* 128 */

//Line 199: \"blt\"
128,
/* 129 */

//Line 204: \"bmi\"
129,
/* 130 */

//Line 198: \"bne\"
130,
/* 131 */

//Line 203: \"bpl\"
131,
/* 132 */

//Line 196: \"bra\"
132,
/* 133 */

//Line 205: \"bsr\"
133,
/* 134 */

//Line 210: \"bvc\"
134,
/* 135 */

//Line 211: \"bvs\"
135,
/* 136 */

//Line 213: \"clr\"
136,
/* 137 */

//Line 214: \"cmp\"
137,
/* 138 */

//Line 185: \"eor\"
138,
/* 139 */

//Line 215: \"ext\"
139,
/* 140 */

//Line 217: \"jmp\"
140,
/* 141 */

//Line 218: \"jsr\"
141,
/* 142 */

//Line 219: \"lea\"
142,
/* 143 */

//Line 190: \"lsl\"
143,
/* 144 */

//Line 191: \"lsr\"
144,
/* 145 */

//Line 186: \"neg\"
145,
/* 146 */

//Line 223: \"nop\"
146,
/* 147 */

//Line 188: \"not\"
147,
/* 148 */

//Line 220: \"pea\"
148,
/* 149 */

//Line 224: \"rts\"
149,
/* 150 */

//Line 239: \"scc\"
150,
/* 151 */

//Line 240: \"scs\"
151,
/* 152 */

//Line 229: \"seq\"
152,
/* 153 */

//Line 234: \"sge\"
153,
/* 154 */

//Line 233: \"sgt\"
154,
/* 155 */

//Line 237: \"shi\"
155,
/* 156 */

//Line 232: \"sle\"
156,
/* 157 */

//Line 238: \"sls\"
157,
/* 158 */

//Line 231: \"slt\"
158,
/* 159 */

//Line 236: \"smi\"
159,
/* 160 */

//Line 230: \"sne\"
160,
/* 161 */

//Line 235: \"spl\"
161,
/* 162 */

//Line 228: \"ssf\"
162,
/* 163 */

//Line 227: \"sst\"
163,
/* 164 */

//Line 176: \"sub\"
164,
/* 165 */

//Line 241: \"svc\"
165,
/* 166 */

//Line 242: \"svs\"
166,
/* 167 */

//Line 225: \"tst\"
167,
/* 168 */

//Line 175: \"addx\"
168,
/* 169 */

//Line 181: \"divs\"
169,
/* 170 */

//Line 180: \"divu\"
170,
/* 171 */

//Line 216: \"extb\"
171,
/* 172 */

//Line 221: \"link\"
172,
/* 173 */

//Line 172: \"move\"
173,
/* 174 */

//Line 179: \"muls\"
174,
/* 175 */

//Line 178: \"mulu\"
175,
/* 176 */

//Line 187: \"negx\"
176,
/* 177 */

//Line 177: \"subx\"
177,
/* 178 */

//Line 222: \"unlk\"
178,
/* 179 */

//Line 86: \".data\"
179,
/* 180 */

//Line 85: \".text\"
180,
/* 181 */

//Line 84: \".local\"
181,
/* 182 */

//Line 81: \".stack\"
182,
/* 183 */

//Line 83: \".export\"
183,
/* 184 */

//Line 82: \".import\"
184,
/* 185 */

//Line 88: \".string\"
185,
/* 186 */
0,
/* 187 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
187,
/* 188 */

//Line 125: \"a\"((\"+\"|\"-\")?([[:digit:]])+)+
188,
/* 189 */

//Line 117: \"d\"((\"+\"|\"-\")?([[:digit:]])+)+
189,
/* 190 */
0,
/* 191 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
191,
/* 192 */
0,
/* 193 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
193,
/* 194 */
0,
/* 195 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
195,
/* 196 */
0,
/* 197 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
197,
/* 198 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
198,
/* 199 */
0,
/* 200 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
200,
/* 201 */
0,
/* 202 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
202,
/* 203 */
0,
/* 204 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
204,
/* 205 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
205,
/* 206 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
206,
/* 207 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
207,
/* 208 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
208,
/* 209 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
209,
/* 210 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
210,
/* 211 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
211,
/* 212 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
212,
/* 213 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
213,
/* 214 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
214,
/* 215 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
215,
/* 216 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
216,
/* 217 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
217,
/* 218 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
218,
/* 219 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
219,
/* 220 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
220,
/* 221 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
221,
/* 222 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
222,
/* 223 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
223,
/* 224 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
224,
/* 225 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
225,
/* 226 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
226,
/* 227 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
227,
/* 228 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
228,
/* 229 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
229,
/* 230 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
230,
/* 231 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
231,
/* 232 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
232,
/* 233 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
233,
/* 234 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
234,
/* 235 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
235,
/* 236 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
236,
/* 237 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
237,
/* 238 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
238,
/* 239 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
239,
/* 240 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
240,
/* 241 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
241,
/* 242 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
242,
/* 243 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
243,
/* 244 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
244,
/* 245 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
245,
/* 246 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
246,
/* 247 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
247,
/* 248 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
248,
/* 249 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
249,
/* 250 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
250,
/* 251 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
251,
/* 252 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
252,
/* 253 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
253,
/* 254 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
254,
/* 255 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
255,
/* 256 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
256,
/* 257 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
257,
/* 258 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
258,
/* 259 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
259,
/* 260 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
260,
/* 261 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
261,
/* 262 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
262,
/* 263 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
263,
/* 264 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
264,
/* 265 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
265,
/* 266 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
266,
/* 267 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
267,
/* 268 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
268,
/* 269 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
269,
/* 270 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
270,
/* 271 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
271,
/* 272 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
272,
/* 273 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
273,
/* 274 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
274,
/* 275 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
275,
/* 276 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
276,
/* 277 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
277,
/* 278 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
278,
/* 279 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
279,
/* 280 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
280,
/* 281 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
281,
/* 282 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
282,
/* 283 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
283,
/* 284 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
284,
/* 285 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
285,
/* 286 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
286,
/* 287 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
287,
/* 288 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
288,
/* 289 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
289,
/* 290 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
290,
/* 291 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
291,
/* 292 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
292,
/* 293 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
293,
/* 294 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
294,
/* 295 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
295,
/* 296 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
296,
/* 297 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
297,
/* 298 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
298,
/* 299 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
299,
/* 300 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
300,
/* 301 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
301,
/* 302 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
302,
/* 303 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
303,
/* 304 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
304,
/* 305 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
305,
/* 306 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
306,
/* 307 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
307,
/* 308 */

//Line 150: ((\"+\"|\"-\")?([[:digit:]])+)
308,
/* 309 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
309,
/* 310 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
310,
/* 311 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
311,
/* 312 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
312,
/* 313 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
313,
/* 314 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
314,
/* 315 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
315,
/* 316 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
316,
/* 317 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
317,
/* 318 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
318,
/* 319 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
319,
/* 320 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
320,
/* 321 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
321,
/* 322 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
322,
/* 323 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
323,
/* 324 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
324,
/* 325 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
325,
/* 326 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
326,
/* 327 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
327,
/* 328 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
328,
/* 329 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
329,
/* 330 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
330,
/* 331 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
331,
/* 332 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
332,
/* 333 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
333,
/* 334 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
334,
/* 335 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
335,
/* 336 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
336,
/* 337 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
337,
/* 338 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
338,
/* 339 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
339,
/* 340 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
340,
/* 341 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
341,
/* 342 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
342,
/* 343 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
343,
/* 344 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
344,
/* 345 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
345,
/* 346 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
346,
/* 347 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
347,
/* 348 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
348,
/* 349 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
349,
/* 350 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
350,
/* 351 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
351,
/* 352 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
352,
/* 353 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
353,
/* 354 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
354,
/* 355 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
355,
/* 356 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
356,
/* 357 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
357,
/* 358 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
358,
/* 359 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
359,
/* 360 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
360,
/* 361 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
361,
/* 362 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
362,
/* 363 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
363,
/* 364 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
364,
/* 365 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
365,
/* 366 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
366,
/* 367 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
367,
/* 368 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
368,
/* 369 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
369,
/* 370 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
370,
/* 371 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
371,
/* 372 */

//Line 244: (\".\"?([[:alpha:]_][[:alnum:]_-]*))
372,
/* 373 */
0,
/* 374 */
0,
/* 375 */

//Line 270: [^*\\n]+
375,
/* 376 */

//Line 271: [^*\\n]*(\\r?\\n)
376,
/* 377 */

//Line 269: \"*\"
377,
/* 378 */

//Line 262: \"*/\"
378
};


#ifdef SSLEX_DEBUG

//Structure with regular expressions in text form
char *SSLEXScanner::regText[regTextSize] = {
"^\"//\".*",	// ^"//".*, line 69
"^\"/*\"",	// ^"/*", line 71
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 77
"([[:blank:]]+)",	// ([[:blank:]]+), line 79
"\".stack\"",	// ".stack", line 81
"\".import\"",	// ".import", line 82
"\".export\"",	// ".export", line 83
"\".local\"",	// ".local", line 84
"\".text\"",	// ".text", line 85
"\".data\"",	// ".data", line 86
"\".string\"",	// ".string", line 88
"^((\".\"?([[:alpha:]_][[:alnum:]_-]*))\":\")",	// ^(("."?([[:alpha:]_][[:alnum:]_-]*))":"), line 90
"\".b\"",	// ".b", line 101
"\".w\"",	// ".w", line 102
"\".l\"",	// ".l", line 103
"\".s\"",	// ".s", line 104
"\".d\"",	// ".d", line 105
"\".dc\"",	// ".dc", line 107
"\\\".*\\\"",	// \".*\", line 109
"\"d\"((\"+\"|\"-\")?([[:digit:]])+)+",	// "d"(("+"|"-")?([[:digit:]])+)+, line 117
"\"a\"((\"+\"|\"-\")?([[:digit:]])+)+",	// "a"(("+"|"-")?([[:digit:]])+)+, line 125
"\"sp\"",	// "sp", line 133
"\"(\"",	// "(", line 141
"\")\"",	// ")", line 142
"\"+\"",	// "+", line 143
"\"-\"",	// "-", line 144
"\"sr\"",	// "sr", line 146
"\"pc\"",	// "pc", line 147
"\"#\"",	// "#", line 148
"((\"+\"|\"-\")?([[:digit:]])+)",	// (("+"|"-")?([[:digit:]])+), line 150
"(\"0x\"([[:xdigit:]])+)",	// ("0x"([[:xdigit:]])+), line 161
"\"move\"",	// "move", line 172
"\"add\"",	// "add", line 174
"\"addx\"",	// "addx", line 175
"\"sub\"",	// "sub", line 176
"\"subx\"",	// "subx", line 177
"\"mulu\"",	// "mulu", line 178
"\"muls\"",	// "muls", line 179
"\"divu\"",	// "divu", line 180
"\"divs\"",	// "divs", line 181
"\"and\"",	// "and", line 183
"\"or\"",	// "or", line 184
"\"eor\"",	// "eor", line 185
"\"neg\"",	// "neg", line 186
"\"negx\"",	// "negx", line 187
"\"not\"",	// "not", line 188
"\"lsl\"",	// "lsl", line 190
"\"lsr\"",	// "lsr", line 191
"\"asl\"",	// "asl", line 192
"\"asr\"",	// "asr", line 193
"\"bra\"",	// "bra", line 196
"\"beq\"",	// "beq", line 197
"\"bne\"",	// "bne", line 198
"\"blt\"",	// "blt", line 199
"\"ble\"",	// "ble", line 200
"\"bgt\"",	// "bgt", line 201
"\"bge\"",	// "bge", line 202
"\"bpl\"",	// "bpl", line 203
"\"bmi\"",	// "bmi", line 204
"\"bsr\"",	// "bsr", line 205
"\"bhi\"",	// "bhi", line 206
"\"bls\"",	// "bls", line 207
"\"bcc\"",	// "bcc", line 208
"\"bcs\"",	// "bcs", line 209
"\"bvc\"",	// "bvc", line 210
"\"bvs\"",	// "bvs", line 211
"\"clr\"",	// "clr", line 213
"\"cmp\"",	// "cmp", line 214
"\"ext\"",	// "ext", line 215
"\"extb\"",	// "extb", line 216
"\"jmp\"",	// "jmp", line 217
"\"jsr\"",	// "jsr", line 218
"\"lea\"",	// "lea", line 219
"\"pea\"",	// "pea", line 220
"\"link\"",	// "link", line 221
"\"unlk\"",	// "unlk", line 222
"\"nop\"",	// "nop", line 223
"\"rts\"",	// "rts", line 224
"\"tst\"",	// "tst", line 225
"\"sst\"",	// "sst", line 227
"\"ssf\"",	// "ssf", line 228
"\"seq\"",	// "seq", line 229
"\"sne\"",	// "sne", line 230
"\"slt\"",	// "slt", line 231
"\"sle\"",	// "sle", line 232
"\"sgt\"",	// "sgt", line 233
"\"sge\"",	// "sge", line 234
"\"spl\"",	// "spl", line 235
"\"smi\"",	// "smi", line 236
"\"shi\"",	// "shi", line 237
"\"sls\"",	// "sls", line 238
"\"scc\"",	// "scc", line 239
"\"scs\"",	// "scs", line 240
"\"svc\"",	// "svc", line 241
"\"svs\"",	// "svs", line 242
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",	// ("."?([[:alpha:]_][[:alnum:]_-]*)), line 244
"\",\"",	// ",", line 252
"(\\r?\\n)",	// (\r?\n), line 254
"\";\".*",	// ";".*, line 257
"\"*/\"",	// "*/", line 262
"\"*\"",	// "*", line 269
"[^*\\n]+",	// [^*\n]+, line 270
"[^*\\n]*(\\r?\\n)"	// [^*\n]*(\r?\n), line 271
};


//Array with indices in regText
ulong SSLEXScanner::regTextIndex0[] = { 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 };
ulong SSLEXScanner::regTextIndex1[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98 };
ulong SSLEXScanner::regTextIndex2[] = { 3 };
ulong SSLEXScanner::regTextIndex3[] = { 97 };
ulong SSLEXScanner::regTextIndex4[] = { 28 };
ulong SSLEXScanner::regTextIndex5[] = { 22 };
ulong SSLEXScanner::regTextIndex6[] = { 23 };
ulong SSLEXScanner::regTextIndex7[] = { 24, 29 };
ulong SSLEXScanner::regTextIndex8[] = { 96 };
ulong SSLEXScanner::regTextIndex9[] = { 25, 29 };
ulong SSLEXScanner::regTextIndex10[] = { 29, 30 };
ulong SSLEXScanner::regTextIndex11[] = { 98 };
ulong SSLEXScanner::regTextIndex12[] = { 95 };
ulong SSLEXScanner::regTextIndex13[] = { 18 };
ulong SSLEXScanner::regTextIndex14[] = { 12, 95 };
ulong SSLEXScanner::regTextIndex15[] = { 9, 16, 17, 95 };
ulong SSLEXScanner::regTextIndex16[] = { 7, 14, 95 };
ulong SSLEXScanner::regTextIndex17[] = { 4, 10, 15, 95 };
ulong SSLEXScanner::regTextIndex18[] = { 13, 95 };
ulong SSLEXScanner::regTextIndex19[] = { 20, 95 };
ulong SSLEXScanner::regTextIndex20[] = { 19, 95 };
ulong SSLEXScanner::regTextIndex21[] = { 41, 95 };
ulong SSLEXScanner::regTextIndex22[] = { 27, 95 };
ulong SSLEXScanner::regTextIndex23[] = { 21, 87, 95 };
ulong SSLEXScanner::regTextIndex24[] = { 26, 95 };
ulong SSLEXScanner::regTextIndex25[] = { 17, 95 };
ulong SSLEXScanner::regTextIndex26[] = { 30 };
ulong SSLEXScanner::regTextIndex27[] = { 32, 33, 95 };
ulong SSLEXScanner::regTextIndex28[] = { 40, 95 };
ulong SSLEXScanner::regTextIndex29[] = { 48, 95 };
ulong SSLEXScanner::regTextIndex30[] = { 49, 95 };
ulong SSLEXScanner::regTextIndex31[] = { 62, 95 };
ulong SSLEXScanner::regTextIndex32[] = { 63, 95 };
ulong SSLEXScanner::regTextIndex33[] = { 51, 95 };
ulong SSLEXScanner::regTextIndex34[] = { 56, 95 };
ulong SSLEXScanner::regTextIndex35[] = { 55, 95 };
ulong SSLEXScanner::regTextIndex36[] = { 60, 95 };
ulong SSLEXScanner::regTextIndex37[] = { 54, 95 };
ulong SSLEXScanner::regTextIndex38[] = { 61, 95 };
ulong SSLEXScanner::regTextIndex39[] = { 53, 95 };
ulong SSLEXScanner::regTextIndex40[] = { 58, 95 };
ulong SSLEXScanner::regTextIndex41[] = { 52, 95 };
ulong SSLEXScanner::regTextIndex42[] = { 57, 95 };
ulong SSLEXScanner::regTextIndex43[] = { 50, 95 };
ulong SSLEXScanner::regTextIndex44[] = { 59, 95 };
ulong SSLEXScanner::regTextIndex45[] = { 64, 95 };
ulong SSLEXScanner::regTextIndex46[] = { 65, 95 };
ulong SSLEXScanner::regTextIndex47[] = { 66, 95 };
ulong SSLEXScanner::regTextIndex48[] = { 67, 95 };
ulong SSLEXScanner::regTextIndex49[] = { 42, 95 };
ulong SSLEXScanner::regTextIndex50[] = { 68, 69, 95 };
ulong SSLEXScanner::regTextIndex51[] = { 70, 95 };
ulong SSLEXScanner::regTextIndex52[] = { 71, 95 };
ulong SSLEXScanner::regTextIndex53[] = { 72, 95 };
ulong SSLEXScanner::regTextIndex54[] = { 46, 95 };
ulong SSLEXScanner::regTextIndex55[] = { 47, 95 };
ulong SSLEXScanner::regTextIndex56[] = { 43, 44, 95 };
ulong SSLEXScanner::regTextIndex57[] = { 76, 95 };
ulong SSLEXScanner::regTextIndex58[] = { 45, 95 };
ulong SSLEXScanner::regTextIndex59[] = { 73, 95 };
ulong SSLEXScanner::regTextIndex60[] = { 77, 95 };
ulong SSLEXScanner::regTextIndex61[] = { 91, 95 };
ulong SSLEXScanner::regTextIndex62[] = { 92, 95 };
ulong SSLEXScanner::regTextIndex63[] = { 81, 95 };
ulong SSLEXScanner::regTextIndex64[] = { 86, 95 };
ulong SSLEXScanner::regTextIndex65[] = { 85, 95 };
ulong SSLEXScanner::regTextIndex66[] = { 89, 95 };
ulong SSLEXScanner::regTextIndex67[] = { 84, 95 };
ulong SSLEXScanner::regTextIndex68[] = { 90, 95 };
ulong SSLEXScanner::regTextIndex69[] = { 83, 95 };
ulong SSLEXScanner::regTextIndex70[] = { 88, 95 };
ulong SSLEXScanner::regTextIndex71[] = { 82, 95 };
ulong SSLEXScanner::regTextIndex72[] = { 87, 95 };
ulong SSLEXScanner::regTextIndex73[] = { 80, 95 };
ulong SSLEXScanner::regTextIndex74[] = { 79, 95 };
ulong SSLEXScanner::regTextIndex75[] = { 34, 35, 95 };
ulong SSLEXScanner::regTextIndex76[] = { 93, 95 };
ulong SSLEXScanner::regTextIndex77[] = { 94, 95 };
ulong SSLEXScanner::regTextIndex78[] = { 78, 95 };
ulong SSLEXScanner::regTextIndex79[] = { 33, 95 };
ulong SSLEXScanner::regTextIndex80[] = { 39, 95 };
ulong SSLEXScanner::regTextIndex81[] = { 38, 95 };
ulong SSLEXScanner::regTextIndex82[] = { 69, 95 };
ulong SSLEXScanner::regTextIndex83[] = { 74, 95 };
ulong SSLEXScanner::regTextIndex84[] = { 31, 95 };
ulong SSLEXScanner::regTextIndex85[] = { 37, 95 };
ulong SSLEXScanner::regTextIndex86[] = { 36, 95 };
ulong SSLEXScanner::regTextIndex87[] = { 44, 95 };
ulong SSLEXScanner::regTextIndex88[] = { 35, 95 };
ulong SSLEXScanner::regTextIndex89[] = { 75, 95 };
ulong SSLEXScanner::regTextIndex90[] = { 9, 95 };
ulong SSLEXScanner::regTextIndex91[] = { 8, 95 };
ulong SSLEXScanner::regTextIndex92[] = { 7, 95 };
ulong SSLEXScanner::regTextIndex93[] = { 4, 95 };
ulong SSLEXScanner::regTextIndex94[] = { 6, 95 };
ulong SSLEXScanner::regTextIndex95[] = { 5, 95 };
ulong SSLEXScanner::regTextIndex96[] = { 10, 95 };
ulong SSLEXScanner::regTextIndex97[] = { 2, 97 };
ulong SSLEXScanner::regTextIndex98[] = { 1 };
ulong SSLEXScanner::regTextIndex99[] = { 0 };
ulong SSLEXScanner::regTextIndex100[] = { 11 };
ulong SSLEXScanner::regTextIndex101[] = { 97 };
ulong SSLEXScanner::regTextIndex102[] = { 2, 3 };
ulong SSLEXScanner::regTextIndex103[] = { 20, 32, 33, 40, 48, 49, 95 };
ulong SSLEXScanner::regTextIndex104[] = { 11, 12, 95 };
ulong SSLEXScanner::regTextIndex105[] = { 9, 11, 16, 17, 95 };
ulong SSLEXScanner::regTextIndex106[] = { 7, 11, 14, 95 };
ulong SSLEXScanner::regTextIndex107[] = { 4, 10, 11, 15, 95 };
ulong SSLEXScanner::regTextIndex108[] = { 11, 13, 95 };
ulong SSLEXScanner::regTextIndex109[] = { 20 };
ulong SSLEXScanner::regTextIndex110[] = { 19 };
ulong SSLEXScanner::regTextIndex111[] = { 11, 41, 95 };
ulong SSLEXScanner::regTextIndex112[] = { 11, 27, 95 };
ulong SSLEXScanner::regTextIndex113[] = { 11, 21, 87, 95 };
ulong SSLEXScanner::regTextIndex114[] = { 11, 26, 95 };
ulong SSLEXScanner::regTextIndex115[] = { 11, 17, 95 };
ulong SSLEXScanner::regTextIndex116[] = { 11, 32, 33, 95 };
ulong SSLEXScanner::regTextIndex117[] = { 11, 40, 95 };
ulong SSLEXScanner::regTextIndex118[] = { 11, 48, 95 };
ulong SSLEXScanner::regTextIndex119[] = { 11, 49, 95 };
ulong SSLEXScanner::regTextIndex120[] = { 11, 62, 95 };
ulong SSLEXScanner::regTextIndex121[] = { 11, 63, 95 };
ulong SSLEXScanner::regTextIndex122[] = { 11, 51, 95 };
ulong SSLEXScanner::regTextIndex123[] = { 11, 56, 95 };
ulong SSLEXScanner::regTextIndex124[] = { 11, 55, 95 };
ulong SSLEXScanner::regTextIndex125[] = { 11, 60, 95 };
ulong SSLEXScanner::regTextIndex126[] = { 11, 54, 95 };
ulong SSLEXScanner::regTextIndex127[] = { 11, 61, 95 };
ulong SSLEXScanner::regTextIndex128[] = { 11, 53, 95 };
ulong SSLEXScanner::regTextIndex129[] = { 11, 58, 95 };
ulong SSLEXScanner::regTextIndex130[] = { 11, 52, 95 };
ulong SSLEXScanner::regTextIndex131[] = { 11, 57, 95 };
ulong SSLEXScanner::regTextIndex132[] = { 11, 50, 95 };
ulong SSLEXScanner::regTextIndex133[] = { 11, 59, 95 };
ulong SSLEXScanner::regTextIndex134[] = { 11, 64, 95 };
ulong SSLEXScanner::regTextIndex135[] = { 11, 65, 95 };
ulong SSLEXScanner::regTextIndex136[] = { 11, 66, 95 };
ulong SSLEXScanner::regTextIndex137[] = { 11, 67, 95 };
ulong SSLEXScanner::regTextIndex138[] = { 11, 42, 95 };
ulong SSLEXScanner::regTextIndex139[] = { 11, 68, 69, 95 };
ulong SSLEXScanner::regTextIndex140[] = { 11, 70, 95 };
ulong SSLEXScanner::regTextIndex141[] = { 11, 71, 95 };
ulong SSLEXScanner::regTextIndex142[] = { 11, 72, 95 };
ulong SSLEXScanner::regTextIndex143[] = { 11, 46, 95 };
ulong SSLEXScanner::regTextIndex144[] = { 11, 47, 95 };
ulong SSLEXScanner::regTextIndex145[] = { 11, 43, 44, 95 };
ulong SSLEXScanner::regTextIndex146[] = { 11, 76, 95 };
ulong SSLEXScanner::regTextIndex147[] = { 11, 45, 95 };
ulong SSLEXScanner::regTextIndex148[] = { 11, 73, 95 };
ulong SSLEXScanner::regTextIndex149[] = { 11, 77, 95 };
ulong SSLEXScanner::regTextIndex150[] = { 11, 91, 95 };
ulong SSLEXScanner::regTextIndex151[] = { 11, 92, 95 };
ulong SSLEXScanner::regTextIndex152[] = { 11, 81, 95 };
ulong SSLEXScanner::regTextIndex153[] = { 11, 86, 95 };
ulong SSLEXScanner::regTextIndex154[] = { 11, 85, 95 };
ulong SSLEXScanner::regTextIndex155[] = { 11, 89, 95 };
ulong SSLEXScanner::regTextIndex156[] = { 11, 84, 95 };
ulong SSLEXScanner::regTextIndex157[] = { 11, 90, 95 };
ulong SSLEXScanner::regTextIndex158[] = { 11, 83, 95 };
ulong SSLEXScanner::regTextIndex159[] = { 11, 88, 95 };
ulong SSLEXScanner::regTextIndex160[] = { 11, 82, 95 };
ulong SSLEXScanner::regTextIndex161[] = { 11, 87, 95 };
ulong SSLEXScanner::regTextIndex162[] = { 11, 80, 95 };
ulong SSLEXScanner::regTextIndex163[] = { 11, 79, 95 };
ulong SSLEXScanner::regTextIndex164[] = { 11, 34, 35, 95 };
ulong SSLEXScanner::regTextIndex165[] = { 11, 93, 95 };
ulong SSLEXScanner::regTextIndex166[] = { 11, 94, 95 };
ulong SSLEXScanner::regTextIndex167[] = { 11, 78, 95 };
ulong SSLEXScanner::regTextIndex168[] = { 11, 33, 95 };
ulong SSLEXScanner::regTextIndex169[] = { 11, 39, 95 };
ulong SSLEXScanner::regTextIndex170[] = { 11, 38, 95 };
ulong SSLEXScanner::regTextIndex171[] = { 11, 69, 95 };
ulong SSLEXScanner::regTextIndex172[] = { 11, 74, 95 };
ulong SSLEXScanner::regTextIndex173[] = { 11, 31, 95 };
ulong SSLEXScanner::regTextIndex174[] = { 11, 37, 95 };
ulong SSLEXScanner::regTextIndex175[] = { 11, 36, 95 };
ulong SSLEXScanner::regTextIndex176[] = { 11, 44, 95 };
ulong SSLEXScanner::regTextIndex177[] = { 11, 35, 95 };
ulong SSLEXScanner::regTextIndex178[] = { 11, 75, 95 };
ulong SSLEXScanner::regTextIndex179[] = { 9, 11, 95 };
ulong SSLEXScanner::regTextIndex180[] = { 8, 11, 95 };
ulong SSLEXScanner::regTextIndex181[] = { 7, 11, 95 };
ulong SSLEXScanner::regTextIndex182[] = { 4, 11, 95 };
ulong SSLEXScanner::regTextIndex183[] = { 6, 11, 95 };
ulong SSLEXScanner::regTextIndex184[] = { 5, 11, 95 };
ulong SSLEXScanner::regTextIndex185[] = { 10, 11, 95 };
ulong SSLEXScanner::regTextIndex186[] = { 18 };
ulong SSLEXScanner::regTextIndex187[] = { 19, 38, 39, 95 };
ulong SSLEXScanner::regTextIndex188[] = { 11, 20, 95 };
ulong SSLEXScanner::regTextIndex189[] = { 11, 19, 95 };
ulong SSLEXScanner::regTextIndex190[] = { 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 95 };
ulong SSLEXScanner::regTextIndex191[] = { 41, 95 };
ulong SSLEXScanner::regTextIndex192[] = { 30 };
ulong SSLEXScanner::regTextIndex193[] = { 27, 73, 95 };
ulong SSLEXScanner::regTextIndex194[] = { 20 };
ulong SSLEXScanner::regTextIndex195[] = { 21, 26, 34, 35, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 };
ulong SSLEXScanner::regTextIndex196[] = { 19 };
ulong SSLEXScanner::regTextIndex197[] = { 20, 95 };
ulong SSLEXScanner::regTextIndex198[] = { 32, 33, 95 };
ulong SSLEXScanner::regTextIndex199[] = { 2, 97 };
ulong SSLEXScanner::regTextIndex200[] = { 40, 95 };
ulong SSLEXScanner::regTextIndex201[] = { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 95 };
ulong SSLEXScanner::regTextIndex202[] = { 48, 49, 95 };
ulong SSLEXScanner::regTextIndex203[] = { 0, 1 };
ulong SSLEXScanner::regTextIndex204[] = { 62, 63, 95 };
ulong SSLEXScanner::regTextIndex205[] = { 51, 95 };
ulong SSLEXScanner::regTextIndex206[] = { 55, 56, 95 };
ulong SSLEXScanner::regTextIndex207[] = { 60, 95 };
ulong SSLEXScanner::regTextIndex208[] = { 53, 54, 61, 95 };
ulong SSLEXScanner::regTextIndex209[] = { 58, 95 };
ulong SSLEXScanner::regTextIndex210[] = { 52, 95 };
ulong SSLEXScanner::regTextIndex211[] = { 57, 95 };
ulong SSLEXScanner::regTextIndex212[] = { 50, 95 };
ulong SSLEXScanner::regTextIndex213[] = { 59, 95 };
ulong SSLEXScanner::regTextIndex214[] = { 64, 65, 95 };
ulong SSLEXScanner::regTextIndex215[] = { 66, 95 };
ulong SSLEXScanner::regTextIndex216[] = { 67, 95 };
ulong SSLEXScanner::regTextIndex217[] = { 19, 95 };
ulong SSLEXScanner::regTextIndex218[] = { 42, 95 };
ulong SSLEXScanner::regTextIndex219[] = { 68, 69, 95 };
ulong SSLEXScanner::regTextIndex220[] = { 70, 95 };
ulong SSLEXScanner::regTextIndex221[] = { 71, 95 };
ulong SSLEXScanner::regTextIndex222[] = { 72, 95 };
ulong SSLEXScanner::regTextIndex223[] = { 46, 47, 95 };
ulong SSLEXScanner::regTextIndex224[] = { 43, 44, 95 };
ulong SSLEXScanner::regTextIndex225[] = { 45, 76, 95 };
ulong SSLEXScanner::regTextIndex226[] = { 73, 95 };
ulong SSLEXScanner::regTextIndex227[] = { 77, 95 };
ulong SSLEXScanner::regTextIndex228[] = { 91, 92, 95 };
ulong SSLEXScanner::regTextIndex229[] = { 81, 95 };
ulong SSLEXScanner::regTextIndex230[] = { 85, 86, 95 };
ulong SSLEXScanner::regTextIndex231[] = { 89, 95 };
ulong SSLEXScanner::regTextIndex232[] = { 83, 84, 90, 95 };
ulong SSLEXScanner::regTextIndex233[] = { 88, 95 };
ulong SSLEXScanner::regTextIndex234[] = { 82, 95 };
ulong SSLEXScanner::regTextIndex235[] = { 79, 80, 95 };
ulong SSLEXScanner::regTextIndex236[] = { 34, 35, 95 };
ulong SSLEXScanner::regTextIndex237[] = { 93, 94, 95 };
ulong SSLEXScanner::regTextIndex238[] = { 78, 95 };
ulong SSLEXScanner::regTextIndex239[] = { 38, 39, 95 };
ulong SSLEXScanner::regTextIndex240[] = { 74, 95 };
ulong SSLEXScanner::regTextIndex241[] = { 31, 95 };
ulong SSLEXScanner::regTextIndex242[] = { 36, 37, 95 };
ulong SSLEXScanner::regTextIndex243[] = { 75, 95 };
ulong SSLEXScanner::regTextIndex244[] = { 9, 95 };
ulong SSLEXScanner::regTextIndex245[] = { 8, 95 };
ulong SSLEXScanner::regTextIndex246[] = { 7, 95 };
ulong SSLEXScanner::regTextIndex247[] = { 4, 95 };
ulong SSLEXScanner::regTextIndex248[] = { 6, 95 };
ulong SSLEXScanner::regTextIndex249[] = { 5, 95 };
ulong SSLEXScanner::regTextIndex250[] = { 10, 95 };
ulong SSLEXScanner::regTextIndex251[] = { 11, 95 };
ulong SSLEXScanner::regTextIndex252[] = { 11, 20, 32, 33, 40, 48, 49, 95 };
ulong SSLEXScanner::regTextIndex253[] = { 11, 19, 38, 39, 95 };
ulong SSLEXScanner::regTextIndex254[] = { 11, 41, 95 };
ulong SSLEXScanner::regTextIndex255[] = { 11, 27, 73, 95 };
ulong SSLEXScanner::regTextIndex256[] = { 11, 21, 26, 34, 35, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95 };
ulong SSLEXScanner::regTextIndex257[] = { 11, 20, 95 };
ulong SSLEXScanner::regTextIndex258[] = { 11, 32, 33, 95 };
ulong SSLEXScanner::regTextIndex259[] = { 11, 40, 95 };
ulong SSLEXScanner::regTextIndex260[] = { 11, 48, 49, 95 };
ulong SSLEXScanner::regTextIndex261[] = { 11, 62, 63, 95 };
ulong SSLEXScanner::regTextIndex262[] = { 11, 51, 95 };
ulong SSLEXScanner::regTextIndex263[] = { 11, 55, 56, 95 };
ulong SSLEXScanner::regTextIndex264[] = { 11, 60, 95 };
ulong SSLEXScanner::regTextIndex265[] = { 11, 53, 54, 61, 95 };
ulong SSLEXScanner::regTextIndex266[] = { 11, 58, 95 };
ulong SSLEXScanner::regTextIndex267[] = { 11, 52, 95 };
ulong SSLEXScanner::regTextIndex268[] = { 11, 57, 95 };
ulong SSLEXScanner::regTextIndex269[] = { 11, 50, 95 };
ulong SSLEXScanner::regTextIndex270[] = { 11, 59, 95 };
ulong SSLEXScanner::regTextIndex271[] = { 11, 64, 65, 95 };
ulong SSLEXScanner::regTextIndex272[] = { 11, 66, 95 };
ulong SSLEXScanner::regTextIndex273[] = { 11, 67, 95 };
ulong SSLEXScanner::regTextIndex274[] = { 11, 19, 95 };
ulong SSLEXScanner::regTextIndex275[] = { 11, 42, 95 };
ulong SSLEXScanner::regTextIndex276[] = { 11, 68, 69, 95 };
ulong SSLEXScanner::regTextIndex277[] = { 11, 70, 95 };
ulong SSLEXScanner::regTextIndex278[] = { 11, 71, 95 };
ulong SSLEXScanner::regTextIndex279[] = { 11, 72, 95 };
ulong SSLEXScanner::regTextIndex280[] = { 11, 46, 47, 95 };
ulong SSLEXScanner::regTextIndex281[] = { 11, 43, 44, 95 };
ulong SSLEXScanner::regTextIndex282[] = { 11, 45, 76, 95 };
ulong SSLEXScanner::regTextIndex283[] = { 11, 73, 95 };
ulong SSLEXScanner::regTextIndex284[] = { 11, 77, 95 };
ulong SSLEXScanner::regTextIndex285[] = { 11, 91, 92, 95 };
ulong SSLEXScanner::regTextIndex286[] = { 11, 81, 95 };
ulong SSLEXScanner::regTextIndex287[] = { 11, 85, 86, 95 };
ulong SSLEXScanner::regTextIndex288[] = { 11, 89, 95 };
ulong SSLEXScanner::regTextIndex289[] = { 11, 83, 84, 90, 95 };
ulong SSLEXScanner::regTextIndex290[] = { 11, 88, 95 };
ulong SSLEXScanner::regTextIndex291[] = { 11, 82, 95 };
ulong SSLEXScanner::regTextIndex292[] = { 11, 79, 80, 95 };
ulong SSLEXScanner::regTextIndex293[] = { 11, 34, 35, 95 };
ulong SSLEXScanner::regTextIndex294[] = { 11, 93, 94, 95 };
ulong SSLEXScanner::regTextIndex295[] = { 11, 78, 95 };
ulong SSLEXScanner::regTextIndex296[] = { 11, 38, 39, 95 };
ulong SSLEXScanner::regTextIndex297[] = { 11, 74, 95 };
ulong SSLEXScanner::regTextIndex298[] = { 11, 31, 95 };
ulong SSLEXScanner::regTextIndex299[] = { 11, 36, 37, 95 };
ulong SSLEXScanner::regTextIndex300[] = { 11, 75, 95 };
ulong SSLEXScanner::regTextIndex301[] = { 9, 11, 95 };
ulong SSLEXScanner::regTextIndex302[] = { 8, 11, 95 };
ulong SSLEXScanner::regTextIndex303[] = { 7, 11, 95 };
ulong SSLEXScanner::regTextIndex304[] = { 4, 11, 95 };
ulong SSLEXScanner::regTextIndex305[] = { 6, 11, 95 };
ulong SSLEXScanner::regTextIndex306[] = { 5, 11, 95 };
ulong SSLEXScanner::regTextIndex307[] = { 10, 11, 95 };
ulong SSLEXScanner::regTextIndex308[] = { 29 };
ulong SSLEXScanner::regTextIndex309[] = { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95 };
ulong SSLEXScanner::regTextIndex310[] = { 11, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 95 };
ulong SSLEXScanner::regTextIndex311[] = { 66, 67, 95 };
ulong SSLEXScanner::regTextIndex312[] = { 11, 66, 67, 95 };
ulong SSLEXScanner::regTextIndex313[] = { 42, 68, 69, 95 };
ulong SSLEXScanner::regTextIndex314[] = { 11, 42, 68, 69, 95 };
ulong SSLEXScanner::regTextIndex315[] = { 70, 71, 95 };
ulong SSLEXScanner::regTextIndex316[] = { 11, 70, 71, 95 };
ulong SSLEXScanner::regTextIndex317[] = { 46, 47, 72, 74, 95 };
ulong SSLEXScanner::regTextIndex318[] = { 11, 46, 47, 72, 74, 95 };
ulong SSLEXScanner::regTextIndex319[] = { 43, 44, 45, 76, 95 };
ulong SSLEXScanner::regTextIndex320[] = { 11, 43, 44, 45, 76, 95 };
ulong SSLEXScanner::regTextIndex321[] = { 77, 95 };
ulong SSLEXScanner::regTextIndex322[] = { 11, 77, 95 };
ulong SSLEXScanner::regTextIndex323[] = { 78, 95 };
ulong SSLEXScanner::regTextIndex324[] = { 11, 78, 95 };
ulong SSLEXScanner::regTextIndex325[] = { 38, 39, 95 };
ulong SSLEXScanner::regTextIndex326[] = { 11, 38, 39, 95 };
ulong SSLEXScanner::regTextIndex327[] = { 74, 95 };
ulong SSLEXScanner::regTextIndex328[] = { 11, 74, 95 };
ulong SSLEXScanner::regTextIndex329[] = { 31, 95 };
ulong SSLEXScanner::regTextIndex330[] = { 11, 31, 95 };
ulong SSLEXScanner::regTextIndex331[] = { 36, 37, 95 };
ulong SSLEXScanner::regTextIndex332[] = { 11, 36, 37, 95 };
ulong SSLEXScanner::regTextIndex333[] = { 75, 95 };
ulong SSLEXScanner::regTextIndex334[] = { 11, 75, 95 };
ulong SSLEXScanner::regTextIndex335[] = { 9, 95 };
ulong SSLEXScanner::regTextIndex336[] = { 9, 11, 95 };
ulong SSLEXScanner::regTextIndex337[] = { 8, 95 };
ulong SSLEXScanner::regTextIndex338[] = { 8, 11, 95 };
ulong SSLEXScanner::regTextIndex339[] = { 7, 95 };
ulong SSLEXScanner::regTextIndex340[] = { 7, 11, 95 };
ulong SSLEXScanner::regTextIndex341[] = { 4, 95 };
ulong SSLEXScanner::regTextIndex342[] = { 4, 11, 95 };
ulong SSLEXScanner::regTextIndex343[] = { 6, 95 };
ulong SSLEXScanner::regTextIndex344[] = { 6, 11, 95 };
ulong SSLEXScanner::regTextIndex345[] = { 5, 95 };
ulong SSLEXScanner::regTextIndex346[] = { 5, 11, 95 };
ulong SSLEXScanner::regTextIndex347[] = { 10, 95 };
ulong SSLEXScanner::regTextIndex348[] = { 10, 11, 95 };
ulong SSLEXScanner::regTextIndex349[] = { 31, 36, 37, 95 };
ulong SSLEXScanner::regTextIndex350[] = { 11, 31, 36, 37, 95 };
ulong SSLEXScanner::regTextIndex351[] = { 75, 95 };
ulong SSLEXScanner::regTextIndex352[] = { 11, 75, 95 };
ulong SSLEXScanner::regTextIndex353[] = { 8, 95 };
ulong SSLEXScanner::regTextIndex354[] = { 8, 11, 95 };
ulong SSLEXScanner::regTextIndex355[] = { 7, 95 };
ulong SSLEXScanner::regTextIndex356[] = { 7, 11, 95 };
ulong SSLEXScanner::regTextIndex357[] = { 4, 10, 95 };
ulong SSLEXScanner::regTextIndex358[] = { 4, 10, 11, 95 };
ulong SSLEXScanner::regTextIndex359[] = { 6, 95 };
ulong SSLEXScanner::regTextIndex360[] = { 6, 11, 95 };
ulong SSLEXScanner::regTextIndex361[] = { 5, 95 };
ulong SSLEXScanner::regTextIndex362[] = { 5, 11, 95 };
ulong SSLEXScanner::regTextIndex363[] = { 10, 95 };
ulong SSLEXScanner::regTextIndex364[] = { 10, 11, 95 };
ulong SSLEXScanner::regTextIndex365[] = { 6, 95 };
ulong SSLEXScanner::regTextIndex366[] = { 6, 11, 95 };
ulong SSLEXScanner::regTextIndex367[] = { 5, 95 };
ulong SSLEXScanner::regTextIndex368[] = { 5, 11, 95 };
ulong SSLEXScanner::regTextIndex369[] = { 6, 95 };
ulong SSLEXScanner::regTextIndex370[] = { 6, 11, 95 };
ulong SSLEXScanner::regTextIndex371[] = { 5, 95 };
ulong SSLEXScanner::regTextIndex372[] = { 5, 11, 95 };
ulong SSLEXScanner::regTextIndex373[] = { 99, 100, 101, 102 };
ulong SSLEXScanner::regTextIndex374[] = { 99, 100, 101, 102 };
ulong SSLEXScanner::regTextIndex375[] = { 101, 102 };
ulong SSLEXScanner::regTextIndex376[] = { 102 };
ulong SSLEXScanner::regTextIndex377[] = { 99, 100 };
ulong SSLEXScanner::regTextIndex378[] = { 99 };


//Structure with debugging information
SSLEXScanner::SSLEXDebugStr SSLEXScanner::debugStr[SSLEX_STATE] = {
{ 0, regTextIndex0, 95 },
{ 1, regTextIndex1, 99 },
{ 2, regTextIndex2, 1 },
{ 3, regTextIndex3, 1 },
{ 4, regTextIndex4, 1 },
{ 5, regTextIndex5, 1 },
{ 6, regTextIndex6, 1 },
{ 7, regTextIndex7, 2 },
{ 8, regTextIndex8, 1 },
{ 9, regTextIndex9, 2 },
{ 10, regTextIndex10, 2 },
{ 11, regTextIndex11, 1 },
{ 12, regTextIndex12, 1 },
{ 13, regTextIndex13, 1 },
{ 14, regTextIndex14, 2 },
{ 15, regTextIndex15, 4 },
{ 16, regTextIndex16, 3 },
{ 17, regTextIndex17, 4 },
{ 18, regTextIndex18, 2 },
{ 19, regTextIndex19, 2 },
{ 20, regTextIndex20, 2 },
{ 21, regTextIndex21, 2 },
{ 22, regTextIndex22, 2 },
{ 23, regTextIndex23, 3 },
{ 24, regTextIndex24, 2 },
{ 25, regTextIndex25, 2 },
{ 26, regTextIndex26, 1 },
{ 27, regTextIndex27, 3 },
{ 28, regTextIndex28, 2 },
{ 29, regTextIndex29, 2 },
{ 30, regTextIndex30, 2 },
{ 31, regTextIndex31, 2 },
{ 32, regTextIndex32, 2 },
{ 33, regTextIndex33, 2 },
{ 34, regTextIndex34, 2 },
{ 35, regTextIndex35, 2 },
{ 36, regTextIndex36, 2 },
{ 37, regTextIndex37, 2 },
{ 38, regTextIndex38, 2 },
{ 39, regTextIndex39, 2 },
{ 40, regTextIndex40, 2 },
{ 41, regTextIndex41, 2 },
{ 42, regTextIndex42, 2 },
{ 43, regTextIndex43, 2 },
{ 44, regTextIndex44, 2 },
{ 45, regTextIndex45, 2 },
{ 46, regTextIndex46, 2 },
{ 47, regTextIndex47, 2 },
{ 48, regTextIndex48, 2 },
{ 49, regTextIndex49, 2 },
{ 50, regTextIndex50, 3 },
{ 51, regTextIndex51, 2 },
{ 52, regTextIndex52, 2 },
{ 53, regTextIndex53, 2 },
{ 54, regTextIndex54, 2 },
{ 55, regTextIndex55, 2 },
{ 56, regTextIndex56, 3 },
{ 57, regTextIndex57, 2 },
{ 58, regTextIndex58, 2 },
{ 59, regTextIndex59, 2 },
{ 60, regTextIndex60, 2 },
{ 61, regTextIndex61, 2 },
{ 62, regTextIndex62, 2 },
{ 63, regTextIndex63, 2 },
{ 64, regTextIndex64, 2 },
{ 65, regTextIndex65, 2 },
{ 66, regTextIndex66, 2 },
{ 67, regTextIndex67, 2 },
{ 68, regTextIndex68, 2 },
{ 69, regTextIndex69, 2 },
{ 70, regTextIndex70, 2 },
{ 71, regTextIndex71, 2 },
{ 72, regTextIndex72, 2 },
{ 73, regTextIndex73, 2 },
{ 74, regTextIndex74, 2 },
{ 75, regTextIndex75, 3 },
{ 76, regTextIndex76, 2 },
{ 77, regTextIndex77, 2 },
{ 78, regTextIndex78, 2 },
{ 79, regTextIndex79, 2 },
{ 80, regTextIndex80, 2 },
{ 81, regTextIndex81, 2 },
{ 82, regTextIndex82, 2 },
{ 83, regTextIndex83, 2 },
{ 84, regTextIndex84, 2 },
{ 85, regTextIndex85, 2 },
{ 86, regTextIndex86, 2 },
{ 87, regTextIndex87, 2 },
{ 88, regTextIndex88, 2 },
{ 89, regTextIndex89, 2 },
{ 90, regTextIndex90, 2 },
{ 91, regTextIndex91, 2 },
{ 92, regTextIndex92, 2 },
{ 93, regTextIndex93, 2 },
{ 94, regTextIndex94, 2 },
{ 95, regTextIndex95, 2 },
{ 96, regTextIndex96, 2 },
{ 97, regTextIndex97, 2 },
{ 98, regTextIndex98, 1 },
{ 99, regTextIndex99, 1 },
{ 100, regTextIndex100, 1 },
{ 101, regTextIndex101, 1 },
{ 102, regTextIndex102, 2 },
{ 103, regTextIndex103, 7 },
{ 104, regTextIndex104, 3 },
{ 105, regTextIndex105, 5 },
{ 106, regTextIndex106, 4 },
{ 107, regTextIndex107, 5 },
{ 108, regTextIndex108, 3 },
{ 109, regTextIndex109, 1 },
{ 110, regTextIndex110, 1 },
{ 111, regTextIndex111, 3 },
{ 112, regTextIndex112, 3 },
{ 113, regTextIndex113, 4 },
{ 114, regTextIndex114, 3 },
{ 115, regTextIndex115, 3 },
{ 116, regTextIndex116, 4 },
{ 117, regTextIndex117, 3 },
{ 118, regTextIndex118, 3 },
{ 119, regTextIndex119, 3 },
{ 120, regTextIndex120, 3 },
{ 121, regTextIndex121, 3 },
{ 122, regTextIndex122, 3 },
{ 123, regTextIndex123, 3 },
{ 124, regTextIndex124, 3 },
{ 125, regTextIndex125, 3 },
{ 126, regTextIndex126, 3 },
{ 127, regTextIndex127, 3 },
{ 128, regTextIndex128, 3 },
{ 129, regTextIndex129, 3 },
{ 130, regTextIndex130, 3 },
{ 131, regTextIndex131, 3 },
{ 132, regTextIndex132, 3 },
{ 133, regTextIndex133, 3 },
{ 134, regTextIndex134, 3 },
{ 135, regTextIndex135, 3 },
{ 136, regTextIndex136, 3 },
{ 137, regTextIndex137, 3 },
{ 138, regTextIndex138, 3 },
{ 139, regTextIndex139, 4 },
{ 140, regTextIndex140, 3 },
{ 141, regTextIndex141, 3 },
{ 142, regTextIndex142, 3 },
{ 143, regTextIndex143, 3 },
{ 144, regTextIndex144, 3 },
{ 145, regTextIndex145, 4 },
{ 146, regTextIndex146, 3 },
{ 147, regTextIndex147, 3 },
{ 148, regTextIndex148, 3 },
{ 149, regTextIndex149, 3 },
{ 150, regTextIndex150, 3 },
{ 151, regTextIndex151, 3 },
{ 152, regTextIndex152, 3 },
{ 153, regTextIndex153, 3 },
{ 154, regTextIndex154, 3 },
{ 155, regTextIndex155, 3 },
{ 156, regTextIndex156, 3 },
{ 157, regTextIndex157, 3 },
{ 158, regTextIndex158, 3 },
{ 159, regTextIndex159, 3 },
{ 160, regTextIndex160, 3 },
{ 161, regTextIndex161, 3 },
{ 162, regTextIndex162, 3 },
{ 163, regTextIndex163, 3 },
{ 164, regTextIndex164, 4 },
{ 165, regTextIndex165, 3 },
{ 166, regTextIndex166, 3 },
{ 167, regTextIndex167, 3 },
{ 168, regTextIndex168, 3 },
{ 169, regTextIndex169, 3 },
{ 170, regTextIndex170, 3 },
{ 171, regTextIndex171, 3 },
{ 172, regTextIndex172, 3 },
{ 173, regTextIndex173, 3 },
{ 174, regTextIndex174, 3 },
{ 175, regTextIndex175, 3 },
{ 176, regTextIndex176, 3 },
{ 177, regTextIndex177, 3 },
{ 178, regTextIndex178, 3 },
{ 179, regTextIndex179, 3 },
{ 180, regTextIndex180, 3 },
{ 181, regTextIndex181, 3 },
{ 182, regTextIndex182, 3 },
{ 183, regTextIndex183, 3 },
{ 184, regTextIndex184, 3 },
{ 185, regTextIndex185, 3 },
{ 186, regTextIndex186, 1 },
{ 187, regTextIndex187, 4 },
{ 188, regTextIndex188, 3 },
{ 189, regTextIndex189, 3 },
{ 190, regTextIndex190, 14 },
{ 191, regTextIndex191, 2 },
{ 192, regTextIndex192, 1 },
{ 193, regTextIndex193, 3 },
{ 194, regTextIndex194, 1 },
{ 195, regTextIndex195, 21 },
{ 196, regTextIndex196, 1 },
{ 197, regTextIndex197, 2 },
{ 198, regTextIndex198, 3 },
{ 199, regTextIndex199, 2 },
{ 200, regTextIndex200, 2 },
{ 201, regTextIndex201, 15 },
{ 202, regTextIndex202, 3 },
{ 203, regTextIndex203, 2 },
{ 204, regTextIndex204, 3 },
{ 205, regTextIndex205, 2 },
{ 206, regTextIndex206, 3 },
{ 207, regTextIndex207, 2 },
{ 208, regTextIndex208, 4 },
{ 209, regTextIndex209, 2 },
{ 210, regTextIndex210, 2 },
{ 211, regTextIndex211, 2 },
{ 212, regTextIndex212, 2 },
{ 213, regTextIndex213, 2 },
{ 214, regTextIndex214, 3 },
{ 215, regTextIndex215, 2 },
{ 216, regTextIndex216, 2 },
{ 217, regTextIndex217, 2 },
{ 218, regTextIndex218, 2 },
{ 219, regTextIndex219, 3 },
{ 220, regTextIndex220, 2 },
{ 221, regTextIndex221, 2 },
{ 222, regTextIndex222, 2 },
{ 223, regTextIndex223, 3 },
{ 224, regTextIndex224, 3 },
{ 225, regTextIndex225, 3 },
{ 226, regTextIndex226, 2 },
{ 227, regTextIndex227, 2 },
{ 228, regTextIndex228, 3 },
{ 229, regTextIndex229, 2 },
{ 230, regTextIndex230, 3 },
{ 231, regTextIndex231, 2 },
{ 232, regTextIndex232, 4 },
{ 233, regTextIndex233, 2 },
{ 234, regTextIndex234, 2 },
{ 235, regTextIndex235, 3 },
{ 236, regTextIndex236, 3 },
{ 237, regTextIndex237, 3 },
{ 238, regTextIndex238, 2 },
{ 239, regTextIndex239, 3 },
{ 240, regTextIndex240, 2 },
{ 241, regTextIndex241, 2 },
{ 242, regTextIndex242, 3 },
{ 243, regTextIndex243, 2 },
{ 244, regTextIndex244, 2 },
{ 245, regTextIndex245, 2 },
{ 246, regTextIndex246, 2 },
{ 247, regTextIndex247, 2 },
{ 248, regTextIndex248, 2 },
{ 249, regTextIndex249, 2 },
{ 250, regTextIndex250, 2 },
{ 251, regTextIndex251, 2 },
{ 252, regTextIndex252, 8 },
{ 253, regTextIndex253, 5 },
{ 254, regTextIndex254, 3 },
{ 255, regTextIndex255, 4 },
{ 256, regTextIndex256, 22 },
{ 257, regTextIndex257, 3 },
{ 258, regTextIndex258, 4 },
{ 259, regTextIndex259, 3 },
{ 260, regTextIndex260, 4 },
{ 261, regTextIndex261, 4 },
{ 262, regTextIndex262, 3 },
{ 263, regTextIndex263, 4 },
{ 264, regTextIndex264, 3 },
{ 265, regTextIndex265, 5 },
{ 266, regTextIndex266, 3 },
{ 267, regTextIndex267, 3 },
{ 268, regTextIndex268, 3 },
{ 269, regTextIndex269, 3 },
{ 270, regTextIndex270, 3 },
{ 271, regTextIndex271, 4 },
{ 272, regTextIndex272, 3 },
{ 273, regTextIndex273, 3 },
{ 274, regTextIndex274, 3 },
{ 275, regTextIndex275, 3 },
{ 276, regTextIndex276, 4 },
{ 277, regTextIndex277, 3 },
{ 278, regTextIndex278, 3 },
{ 279, regTextIndex279, 3 },
{ 280, regTextIndex280, 4 },
{ 281, regTextIndex281, 4 },
{ 282, regTextIndex282, 4 },
{ 283, regTextIndex283, 3 },
{ 284, regTextIndex284, 3 },
{ 285, regTextIndex285, 4 },
{ 286, regTextIndex286, 3 },
{ 287, regTextIndex287, 4 },
{ 288, regTextIndex288, 3 },
{ 289, regTextIndex289, 5 },
{ 290, regTextIndex290, 3 },
{ 291, regTextIndex291, 3 },
{ 292, regTextIndex292, 4 },
{ 293, regTextIndex293, 4 },
{ 294, regTextIndex294, 4 },
{ 295, regTextIndex295, 3 },
{ 296, regTextIndex296, 4 },
{ 297, regTextIndex297, 3 },
{ 298, regTextIndex298, 3 },
{ 299, regTextIndex299, 4 },
{ 300, regTextIndex300, 3 },
{ 301, regTextIndex301, 3 },
{ 302, regTextIndex302, 3 },
{ 303, regTextIndex303, 3 },
{ 304, regTextIndex304, 3 },
{ 305, regTextIndex305, 3 },
{ 306, regTextIndex306, 3 },
{ 307, regTextIndex307, 3 },
{ 308, regTextIndex308, 1 },
{ 309, regTextIndex309, 17 },
{ 310, regTextIndex310, 18 },
{ 311, regTextIndex311, 3 },
{ 312, regTextIndex312, 4 },
{ 313, regTextIndex313, 4 },
{ 314, regTextIndex314, 5 },
{ 315, regTextIndex315, 3 },
{ 316, regTextIndex316, 4 },
{ 317, regTextIndex317, 5 },
{ 318, regTextIndex318, 6 },
{ 319, regTextIndex319, 5 },
{ 320, regTextIndex320, 6 },
{ 321, regTextIndex321, 2 },
{ 322, regTextIndex322, 3 },
{ 323, regTextIndex323, 2 },
{ 324, regTextIndex324, 3 },
{ 325, regTextIndex325, 3 },
{ 326, regTextIndex326, 4 },
{ 327, regTextIndex327, 2 },
{ 328, regTextIndex328, 3 },
{ 329, regTextIndex329, 2 },
{ 330, regTextIndex330, 3 },
{ 331, regTextIndex331, 3 },
{ 332, regTextIndex332, 4 },
{ 333, regTextIndex333, 2 },
{ 334, regTextIndex334, 3 },
{ 335, regTextIndex335, 2 },
{ 336, regTextIndex336, 3 },
{ 337, regTextIndex337, 2 },
{ 338, regTextIndex338, 3 },
{ 339, regTextIndex339, 2 },
{ 340, regTextIndex340, 3 },
{ 341, regTextIndex341, 2 },
{ 342, regTextIndex342, 3 },
{ 343, regTextIndex343, 2 },
{ 344, regTextIndex344, 3 },
{ 345, regTextIndex345, 2 },
{ 346, regTextIndex346, 3 },
{ 347, regTextIndex347, 2 },
{ 348, regTextIndex348, 3 },
{ 349, regTextIndex349, 4 },
{ 350, regTextIndex350, 5 },
{ 351, regTextIndex351, 2 },
{ 352, regTextIndex352, 3 },
{ 353, regTextIndex353, 2 },
{ 354, regTextIndex354, 3 },
{ 355, regTextIndex355, 2 },
{ 356, regTextIndex356, 3 },
{ 357, regTextIndex357, 3 },
{ 358, regTextIndex358, 4 },
{ 359, regTextIndex359, 2 },
{ 360, regTextIndex360, 3 },
{ 361, regTextIndex361, 2 },
{ 362, regTextIndex362, 3 },
{ 363, regTextIndex363, 2 },
{ 364, regTextIndex364, 3 },
{ 365, regTextIndex365, 2 },
{ 366, regTextIndex366, 3 },
{ 367, regTextIndex367, 2 },
{ 368, regTextIndex368, 3 },
{ 369, regTextIndex369, 2 },
{ 370, regTextIndex370, 3 },
{ 371, regTextIndex371, 2 },
{ 372, regTextIndex372, 3 },
{ 373, regTextIndex373, 4 },
{ 374, regTextIndex374, 4 },
{ 375, regTextIndex375, 2 },
{ 376, regTextIndex376, 1 },
{ 377, regTextIndex377, 2 },
{ 378, regTextIndex378, 1 }
};


//Array with regular expression at accepting
char *SSLEXScanner::acceptRegText[SSLEX_STATE] = { 0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"\"#\"",
"\"(\"",
"\")\"",
"\"+\"",
"\",\"",
"\"-\"",
"((\"+\"|\"-\")?([[:digit:]])+)",
"\";\".*",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"\\\".*\\\"",
"\".b\"",
"\".d\"",
"\".l\"",
"\".s\"",
"\".w\"",
"\"a\"((\"+\"|\"-\")?([[:digit:]])+)+",
"\"d\"((\"+\"|\"-\")?([[:digit:]])+)+",
"\"or\"",
"\"pc\"",
"\"sp\"",
"\"sr\"",
"\".dc\"",
"(\"0x\"([[:xdigit:]])+)",
"\"add\"",
"\"and\"",
"\"asl\"",
"\"asr\"",
"\"bcc\"",
"\"bcs\"",
"\"beq\"",
"\"bge\"",
"\"bgt\"",
"\"bhi\"",
"\"ble\"",
"\"bls\"",
"\"blt\"",
"\"bmi\"",
"\"bne\"",
"\"bpl\"",
"\"bra\"",
"\"bsr\"",
"\"bvc\"",
"\"bvs\"",
"\"clr\"",
"\"cmp\"",
"\"eor\"",
"\"ext\"",
"\"jmp\"",
"\"jsr\"",
"\"lea\"",
"\"lsl\"",
"\"lsr\"",
"\"neg\"",
"\"nop\"",
"\"not\"",
"\"pea\"",
"\"rts\"",
"\"scc\"",
"\"scs\"",
"\"seq\"",
"\"sge\"",
"\"sgt\"",
"\"shi\"",
"\"sle\"",
"\"sls\"",
"\"slt\"",
"\"smi\"",
"\"sne\"",
"\"spl\"",
"\"ssf\"",
"\"sst\"",
"\"sub\"",
"\"svc\"",
"\"svs\"",
"\"tst\"",
"\"addx\"",
"\"divs\"",
"\"divu\"",
"\"extb\"",
"\"link\"",
"\"move\"",
"\"muls\"",
"\"mulu\"",
"\"negx\"",
"\"subx\"",
"\"unlk\"",
"\".data\"",
"\".text\"",
"\".local\"",
"\".stack\"",
"\".export\"",
"\".import\"",
"\".string\"",
"^([[:blank:]]*)(\\r?\\n)",
"^\"/*\"",
"^\"//\".*",
"^((\".\"?([[:alpha:]_][[:alnum:]_-]*))\":\")",
0L,
"([[:blank:]]+)",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"\".b\"",
"\".d\"",
"\".l\"",
"\".s\"",
"\".w\"",
"\"a\"((\"+\"|\"-\")?([[:digit:]])+)+",
"\"d\"((\"+\"|\"-\")?([[:digit:]])+)+",
"\"or\"",
"\"pc\"",
"\"sp\"",
"\"sr\"",
"\".dc\"",
"\"add\"",
"\"and\"",
"\"asl\"",
"\"asr\"",
"\"bcc\"",
"\"bcs\"",
"\"beq\"",
"\"bge\"",
"\"bgt\"",
"\"bhi\"",
"\"ble\"",
"\"bls\"",
"\"blt\"",
"\"bmi\"",
"\"bne\"",
"\"bpl\"",
"\"bra\"",
"\"bsr\"",
"\"bvc\"",
"\"bvs\"",
"\"clr\"",
"\"cmp\"",
"\"eor\"",
"\"ext\"",
"\"jmp\"",
"\"jsr\"",
"\"lea\"",
"\"lsl\"",
"\"lsr\"",
"\"neg\"",
"\"nop\"",
"\"not\"",
"\"pea\"",
"\"rts\"",
"\"scc\"",
"\"scs\"",
"\"seq\"",
"\"sge\"",
"\"sgt\"",
"\"shi\"",
"\"sle\"",
"\"sls\"",
"\"slt\"",
"\"smi\"",
"\"sne\"",
"\"spl\"",
"\"ssf\"",
"\"sst\"",
"\"sub\"",
"\"svc\"",
"\"svs\"",
"\"tst\"",
"\"addx\"",
"\"divs\"",
"\"divu\"",
"\"extb\"",
"\"link\"",
"\"move\"",
"\"muls\"",
"\"mulu\"",
"\"negx\"",
"\"subx\"",
"\"unlk\"",
"\".data\"",
"\".text\"",
"\".local\"",
"\".stack\"",
"\".export\"",
"\".import\"",
"\".string\"",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"\"a\"((\"+\"|\"-\")?([[:digit:]])+)+",
"\"d\"((\"+\"|\"-\")?([[:digit:]])+)+",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"((\"+\"|\"-\")?([[:digit:]])+)",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
"(\".\"?([[:alpha:]_][[:alnum:]_-]*))",
0L,
0L,
"[^*\\n]+",
"[^*\\n]*(\\r?\\n)",
"\"*\"",
"\"*/\""

};
#endif

//name of the start conditions
char *SSLEXScanner::scName[] = {
	"INITIAL", "NL_INITIAL",
	"SC_COMMENT", "NL_SC_COMMENT"
};

//Table for error handling
int SSLEXScanner::err[scSize][CCLWIDTH] = { 0 };



//state of start conditions
ulong SSLEXScanner::scIndex[] = {
	0, //INITIAL
	1, //NL_INITIAL
	373, //SC_COMMENT
	374 //NL_SC_COMMENT
};


SSLEXScanner::SSLEXScanner( char *data, ulong size )
{
	//initialize SSLEX

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::SSLEXScanner: No data!\n";

		//exit
		exit( 1 );
	}

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//init with SSLEX_YYTEXTSIZE bytes
	yyTextLen = SSLEX_YYTEXTSIZE;
	yyText = new( char[yyTextLen + 1] );
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackSize = 0;
	scStackPos = 0;
	scStack = 0L;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


SSLEXScanner::~SSLEXScanner()
{
	//free memory
	if( yyText )
		delete[] ( yyText );

	if( scStack )
		delete[] ( scStack );

	//free old text
	if( basePos )
		delete[] ( basePos );


#ifdef SSLEX_INIT

	//deinizialize user defined variables
	deinit();
#endif
}


void SSLEXScanner::reset( void )
{
	//reset the whole scanner

	//start position
	pos = basePos;

	//end of scanning
	end = pos + basePosLength;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//start-condition INITIAL
	state = baseState = INITIAL;

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


void SSLEXScanner::reset( char *data, ulong size )
{
	//reset the whole scanner and give him new input

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::reset: No data!\n";

		//exit
		exit( 1 );
	}

	//free old text
	if( basePos )
		delete[] ( basePos );

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


int SSLEXScanner::yyLex( SSLR_TYPE *attributeStr )
{
	//start scanning
	unsigned char	c;

	//Basis-Position für das Lexem
	startPos = pos;

	//setup some stuff
	yyDoBeforeRule();

	while( pos <= end )
	{
		//Zeichen
		c = *pos;

		//when we use a 7 bit scanner
		if( c > 127 )
		{
			//we need a 8 bit scanner
			cerr << "SSLEXScanner::yyLex: Line " << yyLineno << ": You need a 8 bit scanner to match the character " << c << "!\n";

			//skip character
			pos++;
			continue;
		}

#ifdef SSLEX_DEBUG
		//print debugging information
		mainDebug( c );
#endif

		//schieben?
		if( ssLexTable[state][c] >= 0 )
		{

#ifdef SSLEX_DEBUG
			//print debugging information
			shiftDebug( c );
#endif

			//akzeptieren?
			if( ssLexAccept[state] )
			{
				//ja, merken
				lastAcceptingState = state;
				lastAcceptingPos = pos;
			}

			//shift new state
			state = ssLexTable[state][c];

			//nächstes Zeichen
			pos++;
		}

		else
		{
			//akzeptieren
			do
			{

#ifdef SSLEX_DEBUG
				//print debugging information
				acceptDebug();
#endif

				switch( ssLexAccept[state] )
				{
					//([[:blank:]]+)
					case 2:
					case 102:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 3:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"#"
					case 4:
					{
						//setup yyText
						setupyyText();

/* Zahl oder Adresse */ return( SHARP );

						break;
					}

					//"("
					case 5:
					{
						//setup yyText
						setupyyText();

return( KLOPEN );

						break;
					}

					//")"
					case 6:
					{
						//setup yyText
						setupyyText();

return( KLCLOSE );

						break;
					}

					//"+"
					case 7:
					{
						//setup yyText
						setupyyText();

return( PLUS );

						break;
					}

					//","
					case 8:
					{
						//setup yyText
						setupyyText();

return( COMMA );

						break;
					}

					//"-"
					case 9:
					{
						//setup yyText
						setupyyText();

return( MINUS );

						break;
					}

					//(("+"|"-")?([[:digit:]])+)
					case 10:
					case 308:
					{
						//setup yyText
						setupyyText();

{
						/* z.B. .dc.b 10 */
						char	*tail;

						//String in Zahl wandeln
						attributeStr->_number = strtoul( yyText, &tail, 10 );

						//Zahl
						return( NUMBER );
					}

						break;
					}

					//";".*
					case 11:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//("."?([[:alpha:]_][[:alnum:]_-]*))
					case 12:
					case 103:
					case 187:
					case 191:
					case 193:
					case 195:
					case 197:
					case 198:
					case 200:
					case 202:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 256:
					case 257:
					case 258:
					case 259:
					case 260:
					case 261:
					case 262:
					case 263:
					case 264:
					case 265:
					case 266:
					case 267:
					case 268:
					case 269:
					case 270:
					case 271:
					case 272:
					case 273:
					case 274:
					case 275:
					case 276:
					case 277:
					case 278:
					case 279:
					case 280:
					case 281:
					case 282:
					case 283:
					case 284:
					case 285:
					case 286:
					case 287:
					case 288:
					case 289:
					case 290:
					case 291:
					case 292:
					case 293:
					case 294:
					case 295:
					case 296:
					case 297:
					case 298:
					case 299:
					case 300:
					case 301:
					case 302:
					case 303:
					case 304:
					case 305:
					case 306:
					case 307:
					case 309:
					case 310:
					case 311:
					case 312:
					case 313:
					case 314:
					case 315:
					case 316:
					case 317:
					case 318:
					case 319:
					case 320:
					case 321:
					case 322:
					case 323:
					case 324:
					case 325:
					case 326:
					case 327:
					case 328:
					case 329:
					case 330:
					case 331:
					case 332:
					case 333:
					case 334:
					case 335:
					case 336:
					case 337:
					case 338:
					case 339:
					case 340:
					case 341:
					case 342:
					case 343:
					case 344:
					case 345:
					case 346:
					case 347:
					case 348:
					case 349:
					case 350:
					case 351:
					case 352:
					case 353:
					case 354:
					case 355:
					case 356:
					case 357:
					case 358:
					case 359:
					case 360:
					case 361:
					case 362:
					case 363:
					case 364:
					case 365:
					case 366:
					case 367:
					case 368:
					case 369:
					case 370:
					case 371:
					case 372:
					{
						//setup yyText
						setupyyText();

{
						/* Adressname */
						attributeStr->_name = yyStrCpy( yyText );

						//Bezeichner */
						return( NAME );
					}

						break;
					}

					//\".*\"
					case 13:
					{
						//setup yyText
						setupyyText();

{
						//String erkannt
						attributeStr->_name = yyStrCpy( yyText );

						//String
						return( STRING );
					}

						break;
					}

					//".b"
					case 14:
					case 104:
					{
						//setup yyText
						setupyyText();

return( BYTE );

						break;
					}

					//".d"
					case 15:
					case 105:
					{
						//setup yyText
						setupyyText();

return( DOUBLE );

						break;
					}

					//".l"
					case 16:
					case 106:
					{
						//setup yyText
						setupyyText();

return( LONG );

						break;
					}

					//".s"
					case 17:
					case 107:
					{
						//setup yyText
						setupyyText();

return( SINGLE );

						break;
					}

					//".w"
					case 18:
					case 108:
					{
						//setup yyText
						setupyyText();

return( WORD );

						break;
					}

					//"a"(("+"|"-")?([[:digit:]])+)+
					case 19:
					case 109:
					case 188:
					{
						//setup yyText
						setupyyText();

{
						/* Adressregister, z.B. a34 */
						attributeStr->_integer = atoi( &yyText[1] );

						/* Adressregister */
						return( ADRESS_REG );
					}

						break;
					}

					//"d"(("+"|"-")?([[:digit:]])+)+
					case 20:
					case 110:
					case 189:
					{
						//setup yyText
						setupyyText();

{
						/* Datenregister, z.B. d34 */
						attributeStr->_integer = atoi( &yyText[1] );

						//Datenregister */
						return( DATA_REG );
					}

						break;
					}

					//"or"
					case 21:
					case 111:
					{
						//setup yyText
						setupyyText();

return( OR );

						break;
					}

					//"pc"
					case 22:
					case 112:
					{
						//setup yyText
						setupyyText();

/* Programm Counter */ return( PC );

						break;
					}

					//"sp"
					case 23:
					case 113:
					{
						//setup yyText
						setupyyText();

{
						/* Stack Pointer, ist IMMER a7 */
						attributeStr->_integer = 7;

						/* Adressregister */
						return( ADRESS_REG );
					}

						break;
					}

					//"sr"
					case 24:
					case 114:
					{
						//setup yyText
						setupyyText();

/* Status Register */ return( SR );

						break;
					}

					//".dc"
					case 25:
					case 115:
					{
						//setup yyText
						setupyyText();

/* DATA-Segment */ return( DC );

						break;
					}

					//("0x"([[:xdigit:]])+)
					case 26:
					{
						//setup yyText
						setupyyText();

{
						//eine hexadezimale Zahl erkannt
						char	*tail;

						//String in Zahl wandeln
						attributeStr->_number = strtoul( yyText, &tail, 16 );

						//Zahl
						return( NUMBER );
					}

						break;
					}

					//"add"
					case 27:
					case 116:
					{
						//setup yyText
						setupyyText();

return( ADD );

						break;
					}

					//"and"
					case 28:
					case 117:
					{
						//setup yyText
						setupyyText();

return( AND );

						break;
					}

					//"asl"
					case 29:
					case 118:
					{
						//setup yyText
						setupyyText();

return( ASL );

						break;
					}

					//"asr"
					case 30:
					case 119:
					{
						//setup yyText
						setupyyText();

return( ASR );

						break;
					}

					//"bcc"
					case 31:
					case 120:
					{
						//setup yyText
						setupyyText();

return( BCC );

						break;
					}

					//"bcs"
					case 32:
					case 121:
					{
						//setup yyText
						setupyyText();

return( BCS );

						break;
					}

					//"beq"
					case 33:
					case 122:
					{
						//setup yyText
						setupyyText();

return( BEQ );

						break;
					}

					//"bge"
					case 34:
					case 123:
					{
						//setup yyText
						setupyyText();

return( BGE );

						break;
					}

					//"bgt"
					case 35:
					case 124:
					{
						//setup yyText
						setupyyText();

return( BGT );

						break;
					}

					//"bhi"
					case 36:
					case 125:
					{
						//setup yyText
						setupyyText();

return( BHI );

						break;
					}

					//"ble"
					case 37:
					case 126:
					{
						//setup yyText
						setupyyText();

return( BLE );

						break;
					}

					//"bls"
					case 38:
					case 127:
					{
						//setup yyText
						setupyyText();

return( BLS );

						break;
					}

					//"blt"
					case 39:
					case 128:
					{
						//setup yyText
						setupyyText();

return( BLT );

						break;
					}

					//"bmi"
					case 40:
					case 129:
					{
						//setup yyText
						setupyyText();

return( BMI );

						break;
					}

					//"bne"
					case 41:
					case 130:
					{
						//setup yyText
						setupyyText();

return( BNE );

						break;
					}

					//"bpl"
					case 42:
					case 131:
					{
						//setup yyText
						setupyyText();

return( BPL );

						break;
					}

					//"bra"
					case 43:
					case 132:
					{
						//setup yyText
						setupyyText();

return( BRA );

						break;
					}

					//"bsr"
					case 44:
					case 133:
					{
						//setup yyText
						setupyyText();

return( BSR );

						break;
					}

					//"bvc"
					case 45:
					case 134:
					{
						//setup yyText
						setupyyText();

return( BVC );

						break;
					}

					//"bvs"
					case 46:
					case 135:
					{
						//setup yyText
						setupyyText();

return( BVS );

						break;
					}

					//"clr"
					case 47:
					case 136:
					{
						//setup yyText
						setupyyText();

return( CLR );

						break;
					}

					//"cmp"
					case 48:
					case 137:
					{
						//setup yyText
						setupyyText();

return( CMP );

						break;
					}

					//"eor"
					case 49:
					case 138:
					{
						//setup yyText
						setupyyText();

return( XOR );

						break;
					}

					//"ext"
					case 50:
					case 139:
					{
						//setup yyText
						setupyyText();

return( EXT );

						break;
					}

					//"jmp"
					case 51:
					case 140:
					{
						//setup yyText
						setupyyText();

return( JMP );

						break;
					}

					//"jsr"
					case 52:
					case 141:
					{
						//setup yyText
						setupyyText();

return( JSR );

						break;
					}

					//"lea"
					case 53:
					case 142:
					{
						//setup yyText
						setupyyText();

return( LEA );

						break;
					}

					//"lsl"
					case 54:
					case 143:
					{
						//setup yyText
						setupyyText();

return( LSL );

						break;
					}

					//"lsr"
					case 55:
					case 144:
					{
						//setup yyText
						setupyyText();

return( LSR );

						break;
					}

					//"neg"
					case 56:
					case 145:
					{
						//setup yyText
						setupyyText();

return( NEG );

						break;
					}

					//"nop"
					case 57:
					case 146:
					{
						//setup yyText
						setupyyText();

return( NOP );

						break;
					}

					//"not"
					case 58:
					case 147:
					{
						//setup yyText
						setupyyText();

return( NOT );

						break;
					}

					//"pea"
					case 59:
					case 148:
					{
						//setup yyText
						setupyyText();

return( PEA );

						break;
					}

					//"rts"
					case 60:
					case 149:
					{
						//setup yyText
						setupyyText();

return( RTS );

						break;
					}

					//"scc"
					case 61:
					case 150:
					{
						//setup yyText
						setupyyText();

return( SCC );

						break;
					}

					//"scs"
					case 62:
					case 151:
					{
						//setup yyText
						setupyyText();

return( SCS );

						break;
					}

					//"seq"
					case 63:
					case 152:
					{
						//setup yyText
						setupyyText();

return( SEQ );

						break;
					}

					//"sge"
					case 64:
					case 153:
					{
						//setup yyText
						setupyyText();

return( SGE );

						break;
					}

					//"sgt"
					case 65:
					case 154:
					{
						//setup yyText
						setupyyText();

return( SGT );

						break;
					}

					//"shi"
					case 66:
					case 155:
					{
						//setup yyText
						setupyyText();

return( SHI );

						break;
					}

					//"sle"
					case 67:
					case 156:
					{
						//setup yyText
						setupyyText();

return( SLE );

						break;
					}

					//"sls"
					case 68:
					case 157:
					{
						//setup yyText
						setupyyText();

return( SLS );

						break;
					}

					//"slt"
					case 69:
					case 158:
					{
						//setup yyText
						setupyyText();

return( SLT );

						break;
					}

					//"smi"
					case 70:
					case 159:
					{
						//setup yyText
						setupyyText();

return( SMI );

						break;
					}

					//"sne"
					case 71:
					case 160:
					{
						//setup yyText
						setupyyText();

return( SNE );

						break;
					}

					//"spl"
					case 72:
					case 161:
					{
						//setup yyText
						setupyyText();

return( SPL );

						break;
					}

					//"ssf"
					case 73:
					case 162:
					{
						//setup yyText
						setupyyText();

return( SSF );

						break;
					}

					//"sst"
					case 74:
					case 163:
					{
						//setup yyText
						setupyyText();

return( SST );

						break;
					}

					//"sub"
					case 75:
					case 164:
					{
						//setup yyText
						setupyyText();

return( SUB );

						break;
					}

					//"svc"
					case 76:
					case 165:
					{
						//setup yyText
						setupyyText();

return( SVC );

						break;
					}

					//"svs"
					case 77:
					case 166:
					{
						//setup yyText
						setupyyText();

return( SVS );

						break;
					}

					//"tst"
					case 78:
					case 167:
					{
						//setup yyText
						setupyyText();

return( TST );

						break;
					}

					//"addx"
					case 79:
					case 168:
					{
						//setup yyText
						setupyyText();

return( ADDX );

						break;
					}

					//"divs"
					case 80:
					case 169:
					{
						//setup yyText
						setupyyText();

return( DIVS );

						break;
					}

					//"divu"
					case 81:
					case 170:
					{
						//setup yyText
						setupyyText();

return( DIVU );

						break;
					}

					//"extb"
					case 82:
					case 171:
					{
						//setup yyText
						setupyyText();

return( EXTB );

						break;
					}

					//"link"
					case 83:
					case 172:
					{
						//setup yyText
						setupyyText();

return( LINK );

						break;
					}

					//"move"
					case 84:
					case 173:
					{
						//setup yyText
						setupyyText();

return( MOVE );

						break;
					}

					//"muls"
					case 85:
					case 174:
					{
						//setup yyText
						setupyyText();

return( MULS );

						break;
					}

					//"mulu"
					case 86:
					case 175:
					{
						//setup yyText
						setupyyText();

return( MULU );

						break;
					}

					//"negx"
					case 87:
					case 176:
					{
						//setup yyText
						setupyyText();

return( NEGX );

						break;
					}

					//"subx"
					case 88:
					case 177:
					{
						//setup yyText
						setupyyText();

return( SUBX );

						break;
					}

					//"unlk"
					case 89:
					case 178:
					{
						//setup yyText
						setupyyText();

return( UNLK );

						break;
					}

					//".data"
					case 90:
					case 179:
					{
						//setup yyText
						setupyyText();

/* DATA-Segment */ return( DATA_SEG );

						break;
					}

					//".text"
					case 91:
					case 180:
					{
						//setup yyText
						setupyyText();

/* TEXT-Segment */ return( TEXT_SEG );

						break;
					}

					//".local"
					case 92:
					case 181:
					{
						//setup yyText
						setupyyText();

/* eine Vereinbarung als lokales Element deklarieren */ return( LOCAL );

						break;
					}

					//".stack"
					case 93:
					case 182:
					{
						//setup yyText
						setupyyText();

/* die Größe des Laufzeit-Stacks festlegen */ return( STACK );

						break;
					}

					//".export"
					case 94:
					case 183:
					{
						//setup yyText
						setupyyText();

/* eine Vereinbarung global machen */ return( EXPORT );

						break;
					}

					//".import"
					case 95:
					case 184:
					{
						//setup yyText
						setupyyText();

/* eine Vereinbarung importieren */ return( IMPORT );

						break;
					}

					//".string"
					case 96:
					case 185:
					{
						//setup yyText
						setupyyText();

/* String */ return( STRING_CODE );

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 97:
					{
						//setup yyText
						setupyyText();

/* allows blank lines in section 1 */

						break;
					}

					//^"/*"
					case 98:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//^"//".*
					case 99:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//^(("."?([[:alpha:]_][[:alnum:]_-]*))":")
					case 100:
					{
						//setup yyText
						setupyyText();

{
						//das : am Ende löschen
						yyText[strlen(yyText) - 1] = 0;

						//es wurde ein Label erkannt
						attributeStr->_name = yyStrCpy( yyText );

						//Bezeichner */
						return( LABEL_DEF );
					}

						break;
					}

					//[^*\n]+
					case 375:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//[^*\n]*(\r?\n)
					case 376:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*"
					case 377:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*/"
					case 378:
					{
						//setup yyText
						setupyyText();

{
				//sind wir noch in der Analyse eines C-Kommentars?
				if( cComment == true )
					//ja, die oberste SC entfernen
					yyPopState();
			}

						break;
					}


					default:
					{
						//unable to accept, backtracking or error
						if( lastAcceptingState >= 0 )
						{
							//set back to last accept position
							state = lastAcceptingState;
							pos = lastAcceptingPos;

#ifdef SSLEX_DEBUG
							//backtracking
							cout << "Backtracking, set new state " << state << "\n";
#endif
							//now accept with last accept position
							continue;
						}

						else
						{
							//error
							error( *startPos );

							//remove character
							pos++;
						}

						break;
					}
				}

				//setup some stuff
				yyDoBeforeRule();

				//exit while-loop
				break;

			}while( 1 );

			//Ende der Eingabe erreicht?
			if( pos == end )
				//Ja
				break;
		}
	}

	//call eof-rules
	return( endOfLine() );
}


void SSLEXScanner::yyDoBeforeRule( void )
{
	//set some stuff before a new rule is scanned

	//reset
	lastAcceptingState = -1;

	//base position for lexem
	startPos = pos;

	//are we at the beginning of a line?
	if( ( pos == basePos ) || ( pos[-1] == '\n' ) )
		//setup state
		state = setupState( baseState );

	else
		//base-State
		state = baseState;
}


void SSLEXScanner::error( uchar c )
{
	//simple error handling routine
	ulong		i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//did already an error occur in that sc?
	if( !err[i][c] )
	{
		//No, print an error message
		cerr << "line " << yyLineno << ": SC " << scName[i] << ": Illegal character " << transChar[c] << "!\n";

		//mark to avoid ever lasting loops
		err[i][c]++;
	}
}


void SSLEXScanner::setupYYLineno( char *beg, char *end )
{
	//setup yyLineno
	ulong	len = end - beg, i;
	int		nl = 0;

	//count newlines
	for( i = 0; i < len; i++ )
	{
		//newline?
		if( beg[i] == '\n' )
			nl++;
	}

	//add to yyLineno
	yyLineno += nl;
}


void SSLEXScanner::setupyyText( void )
{
	//insert text in yytext
	ulong	len;
	char	*tmp;

	//reg. expression one-character?
	if( pos == startPos )
		//yes, move to next character
		pos++;

	//get length of lexem
	yyLeng = pos - startPos;

	//concatenate token? (yyMore)
	if( concatenate == true )
	{
		//yes, append
		len = strlen( yyText );

		//enough space?
		if( yyTextLen <= ( yyLeng + len ) )
		{
			//extend memory

			//fix yyTextLen
			yyTextLen = yyLeng + len;

			//get enough memory für lexem
			tmp = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );

			//copy string
			strcpy( tmp, yyText );

			//release memory
			if( yyText )
				delete[] ( yyText );

			//copy adress
			yyText = tmp;
		}

		//append
		strncat( yyText, startPos, yyLeng );

		//zero
		yyText[yyLeng + len] = 0;

		//set up yyLeng
		yyLeng += len;

		//next time we want to set up yyText as usual
		concatenate = false;
	}

	else
	{
		//enough space?
		if( yyTextLen <= yyLeng )
		{
			//extend memory
			if( yyText )
				delete[] ( yyText );

			//fix yyTextLen
			yyTextLen = yyLeng;

			//get enough memory für lexem
			yyText = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );
		}

		//insert
		strncpy( yyText, startPos, yyLeng );

		//end with zere
		yyText[yyLeng] = 0;
	}

	//setup yyLineno
	setupYYLineno( startPos, pos );
}


ulong SSLEXScanner::setupState( ulong baseState )
{
	//setup state for begin-of-line-rules
	ulong	state = baseState, i;

	//test if the current state is valid
	switch( baseState )
	{
		case INITIAL:
		case SC_COMMENT:
		{
			//it is right the next state;
			state++;
			break;
		}

		default:
		{
			//ups, unknown start condition
			cerr << "SSLEXScanner::setupState: Line " << yyLineno << ": Unknown start condition!\n";
			exit( 1 );
		}
	}

#ifdef SSLEX_DEBUG
	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//print debugging information
	cout << "switch to " << scName[i] << "\n";
#endif

	//return state
	return( state );
}


void SSLEXScanner::setStartCondition( ulong state )
{
	//set a new start condition
	switch( state )
	{
		case INITIAL:
		{
			//set new start condition
			baseState = INITIAL;
			break;
		}

		case SC_COMMENT:
		{
			//set new start condition
			baseState = SC_COMMENT;
			break;
		}


		default:
		{
			//unknown start condition
			cerr << "SSLEXScanner::setStartCondition: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore call
			break;
		}
	}
}


ulong SSLEXScanner::getYYLeng( void )
{
	//return length of yyText
	return( yyLeng );
}


ulong SSLEXScanner::getYYLineno( void )
{
	//return line number
	return( yyLineno );
}


char *SSLEXScanner::getYYText( void )
{
	//return yyText
	return( yyText );
}


char *SSLEXScanner::yyStrCpy( char *txt )
{
	//return txt in it's own memory
	ulong	len;
	char	*tmp;

	//length of txt
	len = strlen( txt );

	//get memory for txt
	tmp = new( char[len + 1] );

	//copy
	strcpy( tmp, txt );

	//zero
	tmp[len] = 0;

	//return
	return( tmp );
}


void SSLEXScanner::yyLess( int n )
{
	//returns all but the first n characters of yyText back to the input

	//check
	if( ( n < 0 ) || ( n > yyLeng ) )
	{
		//bad n
		cerr << "SSLEXScanner::yyLess: Line " << yyLineno << ": Bad argument!\n";

		//ignore
		return;
	}

	//zero
	yyText[n] = 0;

	//return to input spring
	pos -= ( yyLeng - n );
}


void SSLEXScanner::yyPushState( ulong newState )
{
	/*
		Pushes the current start condition onto the top of the start condition stack
		and switches to newState as though you have used BEGIN( newState ).
	*/

	//enough memory
	if( scStackPos == scStackSize )
		//enlarge start condition stack
		enlargeSCStack();

	//put on stack
	scStack[scStackPos++] = baseState;

	//switch to new state
	BEGIN( newState );
}


void SSLEXScanner::yyPopState( void )
{
	//pops the top of the start condition stack and switches to it

	//underflow?
	if( scStackPos <= 0 )
		//error
		cerr << "SSLEXScanner::yyPopState: Line " << yyLineno << ": Start condition stack underflow!\n";

	else
	{
		//get new SC state
		ulong	newState = scStack[--scStackPos];

		//switch to it
		BEGIN( newState );

		//set new state
		state = newState;
	}
}


ulong SSLEXScanner::yyTopState( void )
{
	//returns the top of the start condition stack without altering its contents
	return( scStack[scStackPos - 1] );
}


void SSLEXScanner::enlargeSCStack( void )
{
	//enlarge start condition stack
	ulong	*tmp;

	//get enough memory
	tmp = new( ulong[scStackSize + SCStackSize] );

	//copy old content
	memcpy( tmp, scStack, sizeof( ulong ) * scStackSize );

	//free old memory?
	if( scStack )
		//yes
		delete[] ( scStack );

	//set new adress
	scStack = tmp;

	//add size
	scStackSize += SCStackSize;
}


void SSLEXScanner::yyUnput( unsigned char c )
{
	//puts the character c back to the input stream
	ulong	len = basePosLength++;
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + 2] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now insert c
	txt[diff] = c;

	//append rest of the input
	memcpy( &txt[diff + 1], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + 1] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + 1];

	//set new beginning
	basePos = txt;
}


void SSLEXScanner::yyUnput( char *str )
{
	//puts the string str back to the input stream
	ulong	len = basePosLength, strLen = strlen( str );
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + strLen + 1] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now append str
	strcpy( &txt[diff], str );

	//append rest of the input
	memcpy( &txt[strLen + diff], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + strLen] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + strLen + 1];

	//set new beginning
	basePos = txt;

	//correct basePosLength
	basePosLength += strLen;
}


char SSLEXScanner::yyInput( void )
{
	//return the next character to be scanned
	return( *pos++ );
}


#ifdef SSLEX_DEBUG
void SSLEXScanner::mainDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char			tmp[200], *transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//current line
	cout << endl << "current line: " << getYYLineno() << endl;

	//print the next 40 chars of the input
	txtFilter( pos, tmp, 40 );
	cout << "current pos: " << tmp << endl;

	//current SC
	cout << "current start condition: " << scName[i] << endl;

	//current state
	cout << "current state: " << state << endl;

	//current character
	cout << "current character: " << transChar[c] << endl;

	//print assocciated regular expression
	cout << "associated regular expressions:" << endl;

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << endl;

	//print ssLexTable
	cout << "ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << endl << endl;
}


void SSLEXScanner::shiftDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//shift?
	cout << "shift ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << "\n";

	//accepting state?
	if( ssLexAccept[state] )
		//yes
		cout << "ssLexAccept[" << state << "] = " << ssLexAccept[state] << " -> " << acceptRegText[ssLexAccept[state]] << "\n";

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::acceptDebug( void )
{
	//print debugging information

	//accept?
	if( ssLexAccept[state] )
		//yes
		cout << "accepting with " << acceptRegText[ssLexAccept[state]] << "\n";

	else
		//backtrack
		cout << "backtracking to state " << lastAcceptingState << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::txtFilter( char *from, char *to, ulong cnt )
{
	//copy cnt bytes from from to to, but transform escape sequences into
	//readable text form
	ulong	i;
	char	c, tmp[10];

	//init
	*to = 0;

	//as long as there is another char
	for( i = 0; i < cnt; i++ )
	{
		//get char
		c = *from++;

		//is it printable?
		if( !isprint( c ) )
		{
			//transform into readable
			switch( c )
			{
				//newline?
				case '\n':
				{
					//newline
					strcat( to, "\\n" );
					break;
				}

				//Backspace
				case '\b':
				{
					//Backspace
					strcat( to, "\\b" );
					break;
				}

				//Linefeed
				case '\f':
				{
					//Linefeed
					strcat( to, "\\f" );
					break;
				}

				//carriage return
				case '\r':
				{
					//carriage return
					strcat( to, "\\r" );
					break;
				}

				//Tabulator
				case '\t':
				{
					//Tabulator
					strcat( to, "\\t" );
					break;
				}

#if __STDC__
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\a" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\v" );
					break;
				}
#else
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\007" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\013" );
					break;
				}
#endif

				default:
				{
					//neither of the above
					sprintf( tmp, "%x", c );

					//append
					strcat( to, tmp );
				}
			}
		}

		else
		{
			//yes, printable
			sprintf( tmp, "%c", c );

			//append
			strcat( to, tmp );
		}
	}
}
#endif

int SSLEXScanner::endOfLine( void )
{
	//call eof-rules

	//action depends on start condition
	switch( baseState )
	{
		case INITIAL:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_COMMENT:
		{
			//default action
			yyTerminate();

			break;
		}


		default:
		{
			//Unknown start condition
			cerr << "SSLEXScanner::endOfLine: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore
			break;
		}
	}

	//this should never be executed!
	return( 0 );
}



	//eigene Erweiterungen und Hilfsroutinen

void SSLEXScanner::init( void )
{
	//initialize user defined variables
}


void SSLEXScanner::deinit( void )
{
	//deinitialize user defined variables
}



