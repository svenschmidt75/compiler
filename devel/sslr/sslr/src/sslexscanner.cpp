/***************************************************************************
                          sslexscanner.cpp  -  description
                             -------------------
    copyright            : (C) 2002 by Sven Schmidt
    email                : s.schmidt@lboro.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "sslexscanner.h"
#include <iostream>


/****************************
* This is the debug-version *
****************************/




//Define macro ECHO
#define ECHO	cout << yyText

//set a new start condition in user-defined action
#define BEGIN	setStartCondition

//current start condition
#define YY_START	baseState

//yyTerminate
#define yyTerminate()	return( ACCEPT )


//concatenate lexem
#define yyMore()	concatenate = true


//Size of start condition stack
#define SCStackSize	100


//enlargement for yyText if neccesary
#define SSLEX_YYTEXTSIZE	(8*1024)



	//initialize user defined variables
	#define SSLEX_INIT


//Transition-Table
long SSLEXScanner::ssLexTable[SSLEX_STATE][CCLWIDTH] =
{
/*
  \0,  \1,  \2,  \3,  \4,  \5,  \6,  \a,  \b,  \t,  \n,  \v,  \f,  \r,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    ,   !,   ",   #,   $,   %,   &,   ',   (,   ),   *,   +,   ,,   -,   .,   /,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   :,   ;,   <,   =,   >,   ?,
   @,   A,   B,   C,   D,   E,   F,   G,   H,   I,   J,   K,   L,   M,   N,   O,   P,   Q,   R,   S,   T,   U,   V,   W,   X,   Y,   Z,   [,   \,   ],   ^,   _,
   `,   a,   b,   c,   d,   e,   f,   g,   h,   i,   j,   k,   l,   m,   n,   o,   p,   q,   r,   s,   t,   u,   v,   w,   x,   y,   z,   {,   |,   },   ~, DEL
*/

//Startcondition: INITIAL
/* 0 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   3,  -1,  -1,   8,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 1 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   9,   4,  -1,  -1,  10,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   9,  -1,  -1,  -1,  -1,  11,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  12,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 2 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 3 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 4 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 5 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,  -1,  -1,  -1,  -1,   5,
  -1,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,  -1,  -1,  -1,  -1,  -1
},
/* 6 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 7 */
{
   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,  -1,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7
},
/* 8 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 9 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   9,   4,  -1,  -1,  10,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   9,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 10 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   4,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 11 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,  -1,  -1,  -1,  -1,   5,
  -1,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,  -1,  -1,  -1,  -1,  -1
},
/* 12 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   6,  -1,  -1,  -1,  -1,   7,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_DEFINITION
/* 13 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  15,  16,  -1,  -1,  25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  17,  -1,  18,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 14 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,  16,  -1,  -1,  25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  20,  -1,  -1,  -1,  -1,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  17,  -1,  18,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 15 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  15,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 16 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 17 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 18 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 19 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 20 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  20,  21,  -1,  -1,  28,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  20,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 21 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 22 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  22,  -1,  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -1,  -1,  -1,  -1,  22,
  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -1,  -1,  -1,  -1,  -1
},
/* 23 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 24 */
{
  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  -1,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,
  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,
  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,
  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24
},
/* 25 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 26 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -1,  -1,  -1,  -1,  22,
  -1,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  -1,  -1,  -1,  -1,  -1
},
/* 27 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  23,  -1,  -1,  -1,  -1,  24,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 28 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  21,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_GRAMMAR
/* 29 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  32,  -1,  -1,  54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  31,  -1,  -1,  -1,  -1,  55,  -1,  66,  33,  34,  -1,  -1,  -1,  56,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  35,  57,  -1,  -1,  -1,  -1,
  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  58,  38,  -1,  36,
  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  39,  40,  41,  -1,  -1
},
/* 30 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  32,  -1,  -1,  54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  65,  -1,  -1,  -1,  -1,  79,  -1,  66,  33,  34,  -1,  -1,  -1,  56,  -1,  63,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  35,  57,  -1,  -1,  -1,  -1,
  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  37,  58,  38,  -1,  50,
  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  39,  40,  41,  -1,  -1
},
/* 31 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  31,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 32 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 33 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 34 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 35 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  60,  -1,  -1,  43,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 36 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  36,  -1,  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -1,  -1,  -1,  -1,  36,
  -1,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  -1,  -1,  -1,  -1,  -1
},
/* 37 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 38 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 39 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 40 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 41 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 42 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 43 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 44 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 45 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 46 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 47 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 48 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 49 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 50 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  50,  -1,  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  -1,  -1,  -1,  -1,  50,
  -1,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  50,  -1,  -1,  -1,  -1,  -1
},
/* 51 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 52 */
{
  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  -1,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52
},
/* 53 */
{
  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  -1,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,
  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53,  53
},
/* 54 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 55 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  73,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 56 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  42,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 57 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 58 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  -1,  -1,  -1,  -1
},
/* 59 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  -1,  -1,  -1,  -1,  -1,  59,  -1,  -1,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  -1,  -1,  -1,  -1,  59,
  -1,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  -1,  -1,  -1,  -1,  -1
},
/* 60 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 61 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  48,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 62 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  49,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 63 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  51,  -1,  -1,  -1,  -1,  52,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 64 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  53,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 65 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  65,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  63,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 66 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  -1,  -1,  -1,  -1,  59,
  -1,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  -1,  -1,  -1,  -1,  -1
},
/* 67 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  61,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 68 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  62,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 69 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  64,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 70 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 71 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  68,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 72 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  69,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 73 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  71,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 74 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  72,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 75 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  74,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 76 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  75,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 77 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  76,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 78 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  71,  -1,  -1,  -1,  -1,  -1,  77,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 79 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  78,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_COMMENT
/* 80 */
{
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  83,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  84,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82
},
/* 81 */
{
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  83,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  84,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82
},
/* 82 */
{
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  83,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  -1,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,
  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82
},
/* 83 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 84 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 85 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_UNION
/* 86 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  88,  89,  -1,  -1, 101,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 104,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  90,  -1,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91, 116,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 119,  91, 122,  91,  91,  91,  91,  91,  92,  -1,  93,  -1,  -1
},
/* 87 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 102, 100,  -1,  -1, 109,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 102,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 104,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  90,  -1,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91, 116,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 119,  91, 122,  91,  91,  91,  91,  91,  92,  -1,  93,  -1,  -1
},
/* 88 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 104,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 89 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 90 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 91 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 92 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 93 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 94 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 95 */
{
  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  -1,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95
},
/* 96 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 97 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 98 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 99 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 100 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 101 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 102 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 102, 100,  -1,  -1, 109,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 102,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 104,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 103 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  97,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 104 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  94,  -1,  -1,  -1,  -1,  95,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 105 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  98,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 106 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 108,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 107 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  99,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 108 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 109 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 100,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 110 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 103,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 111 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91, 105,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 112 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91, 107,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 113 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 110,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 114 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 111,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 115 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 112,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 116 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 113,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 117 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 114,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 118 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91, 115,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 119 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 117,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 120 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91, 118,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 121 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 120,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},
/* 122 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 106,  -1,  96,  -1,  -1,  -1,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  91,
  -1,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91, 121,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_UNION2
/* 123 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 126,  -1,  -1,  -1,  -1, 129,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1, 127,
  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1,  -1
},
/* 124 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 126,  -1,  -1,  -1,  -1, 129,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1, 127,
  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1,  -1
},
/* 125 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 125,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 129,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 126 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 127 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1, 127,
  -1, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,  -1,  -1,  -1,  -1,  -1
},
/* 128 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 129 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 128,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_PREC
/* 130 */
{
 132, 132, 132, 132, 132, 132, 132, 132, 132, 133,  -1, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
 133, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
 132, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 132, 132, 132, 132, 134,
 132, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 132, 132, 132, 132, 132
},
/* 131 */
{
 132, 132, 132, 132, 132, 132, 132, 132, 132, 133,  -1, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
 133, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
 132, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 132, 132, 132, 132, 134,
 132, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 132, 132, 132, 132, 132
},
/* 132 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 133 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 133,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 133,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 134 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 134,  -1,  -1, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,  -1,  -1,  -1,  -1, 134,
  -1, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_ERROR
/* 135 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 137, 138,  -1,  -1, 157,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 137, 139, 159,  -1,  -1,  -1,  -1,  -1, 140, 141,  -1,  -1, 142,  -1,  -1, 161, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 178, 172, 145, 145, 145, 145, 145, 145, 145, 145, 145, 181, 166, 145, 145, 167, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146,  -1, 147,  -1,  -1
},
/* 136 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 137, 138,  -1,  -1, 157,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 137, 139, 159,  -1,  -1,  -1,  -1,  -1, 140, 141,  -1,  -1, 142,  -1,  -1, 161, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 178, 172, 145, 145, 145, 145, 145, 145, 145, 145, 145, 181, 166, 145, 145, 167, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146,  -1, 147,  -1,  -1
},
/* 137 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 137,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
 137,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 161,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 138 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 139 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 140 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 141 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 142 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 143 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 144 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 145 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 146 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 147 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 148 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 149 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 150 */
{
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,  -1, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150
},
/* 151 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 152 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 153 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 154 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 155 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 156 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 157 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 138,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 158 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 151, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 159 */
{
 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,  -1, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
 159, 159, 148, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159
},
/* 160 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 152, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 161 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1, 150,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 162 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 153, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 163 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 154, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 164 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 155, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 165 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 156, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 166 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 158, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 167 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 160, 145, 145, 173, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 168 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 162, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 169 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 163, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 170 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 164, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 171 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 165, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 172 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 168, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 173 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 169, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 174 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 170, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 175 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 171, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 176 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 174, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 177 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 175, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 178 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 176, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 179 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 177, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 180 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 179, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},
/* 181 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145,  -1,  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1,  -1,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 180, 145, 145, 145, 145,  -1,  -1,  -1,  -1, 145,
  -1, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_CODEBLOCK
/* 182 */
{
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 184, 184, 186, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184
},
/* 183 */
{
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 184, 184, 186, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184
},
/* 184 */
{
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,  -1, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184
},
/* 185 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 186 */
{
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184
},

//Startcondition: SC_INCLUDE
/* 187 */
{
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 189, 189, 192, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189
},
/* 188 */
{
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 190, 189, 189, 192, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 193, 189, 189, 189,
 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189
},
/* 189 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 190 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 191 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 192 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 190,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 193 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 191,  -1,  -1
},

//Startcondition: SC_SEMACT
/* 194 */
{
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 198, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 199, 196, 196, 196,
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196
},
/* 195 */
{
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 198, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 199, 196, 196, 196,
 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196
},
/* 196 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 197 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 198 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 196,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 199 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 197,  -1,  -1
},

//Startcondition: SC_UNION_NEST
/* 200 */
{
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 202, 204, 202,
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202
},
/* 201 */
{
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,  -1, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 203, 202, 204, 202,
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202
},
/* 202 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 203 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 204 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
}

};

//Accept-Array
ulong SSLEXScanner::ssLexAccept[SSLEX_STATE] =
{
/* 0 */
0,
/* 1 */
0,
/* 2 */

//Line 125: ([[:blank:]]+)
2,
/* 3 */

//Line 127: (\\r?\\n)
3,
/* 4 */

//Line 123: ^([[:blank:]]*)(\\r?\\n)
4,
/* 5 */

//Line 138: ^\"%\"(([[:alpha:]_][[:alnum:]_-]*))
5,
/* 6 */

//Line 131: ^\"/*\"
6,
/* 7 */

//Line 129: ^\"//\".*
7,
/* 8 */
0,
/* 9 */

//Line 125: ([[:blank:]]+)
9,
/* 10 */
0,
/* 11 */
0,
/* 12 */
0,
/* 13 */
0,
/* 14 */
0,
/* 15 */

//Line 270: ([[:blank:]]+)
15,
/* 16 */

//Line 261: (\\r?\\n)
16,
/* 17 */

//Line 342: \"<\"
17,
/* 18 */

//Line 347: \">\"
18,
/* 19 */

//Line 352: (([[:alpha:]_][[:alnum:]_-]*))
19,
/* 20 */

//Line 265: ^([[:blank:]]+)
20,
/* 21 */

//Line 263: ^([[:blank:]]*)(\\r?\\n)
21,
/* 22 */

//Line 272: ^\"%\"(([[:alpha:]_][[:alnum:]_-]*))
22,
/* 23 */

//Line 255: ^\"/*\"
23,
/* 24 */

//Line 253: ^\"//\".*
24,
/* 25 */
0,
/* 26 */
0,
/* 27 */
0,
/* 28 */
0,
/* 29 */
0,
/* 30 */
0,
/* 31 */

//Line 526: ([[:blank:]]+)
31,
/* 32 */

//Line 528: (\\r?\\n)
32,
/* 33 */

//Line 577: \"(\"
33,
/* 34 */

//Line 578: \")\"
34,
/* 35 */

//Line 544: \":\"
35,
/* 36 */

//Line 565: (([[:alpha:]_][[:alnum:]_-]*))
36,
/* 37 */

//Line 581: \"[\"
37,
/* 38 */

//Line 582: \"]\"
38,
/* 39 */

//Line 579: \"{\"
39,
/* 40 */

//Line 573: \"|\"
40,
/* 41 */

//Line 580: \"}\"
41,
/* 42 */

//Line 547: \"->\"
42,
/* 43 */

//Line 546: \":=\"
43,
/* 44 */

//Line 571: \";\"$
44,
/* 45 */

//Line 575: \"\\\\{\"
45,
/* 46 */

//Line 549: \"'\"(([[:alpha:]_][[:alnum:]_-]*))\"'\"
46,
/* 47 */

//Line 545: \"::=\"
47,
/* 48 */

//Line 584: \"%prec\"
48,
/* 49 */

//Line 590: \"%error\"
49,
/* 50 */

//Line 538: ^(([[:alpha:]_][[:alnum:]_-]*))
50,
/* 51 */

//Line 532: ^([[:blank:]]*)\"/*\"
51,
/* 52 */

//Line 530: ^([[:blank:]]*)\"//\".*
52,
/* 53 */

//Line 596: ^\"%extension\".*
53,
/* 54 */
0,
/* 55 */
0,
/* 56 */
0,
/* 57 */
0,
/* 58 */
0,
/* 59 */
0,
/* 60 */
0,
/* 61 */
0,
/* 62 */
0,
/* 63 */
0,
/* 64 */
0,
/* 65 */

//Line 526: ([[:blank:]]+)
65,
/* 66 */
0,
/* 67 */
0,
/* 68 */
0,
/* 69 */
0,
/* 70 */
0,
/* 71 */
0,
/* 72 */
0,
/* 73 */
0,
/* 74 */
0,
/* 75 */
0,
/* 76 */
0,
/* 77 */
0,
/* 78 */
0,
/* 79 */
0,
/* 80 */
0,
/* 81 */
0,
/* 82 */

//Line 244: [^*\\n]+
82,
/* 83 */

//Line 247: [^*\\n]*(\\r?\\n)
83,
/* 84 */

//Line 241: \"*\"
84,
/* 85 */

//Line 234: \"*/\"
85,
/* 86 */
0,
/* 87 */
0,
/* 88 */

//Line 390: ([[:blank:]]+)
88,
/* 89 */

//Line 388: (\\r?\\n)
89,
/* 90 */

//Line 450: \";\"
90,
/* 91 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
91,
/* 92 */

//Line 401: \"{\"
92,
/* 93 */

//Line 406: \"}\"
93,
/* 94 */

//Line 394: ([[:blank:]]*)\"/*\"
94,
/* 95 */

//Line 392: ([[:blank:]]*)\"//\".*
95,
/* 96 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
96,
/* 97 */

//Line 429: \"const\"
97,
/* 98 */

//Line 430: \"struct\"
98,
/* 99 */

//Line 431: \"unsigned\"
99,
/* 100 */

//Line 386: ^([[:blank:]]*)(\\r?\\n)
100,
/* 101 */
0,
/* 102 */

//Line 390: ([[:blank:]]+)
102,
/* 103 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
103,
/* 104 */
0,
/* 105 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
105,
/* 106 */
0,
/* 107 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
107,
/* 108 */
0,
/* 109 */
0,
/* 110 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
110,
/* 111 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
111,
/* 112 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
112,
/* 113 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
113,
/* 114 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
114,
/* 115 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
115,
/* 116 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
116,
/* 117 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
117,
/* 118 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
118,
/* 119 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
119,
/* 120 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
120,
/* 121 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
121,
/* 122 */

//Line 434: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)
122,
/* 123 */
0,
/* 124 */
0,
/* 125 */

//Line 492: ([[:blank:]]+)+
125,
/* 126 */

//Line 517: \"*\"
126,
/* 127 */

//Line 501: (([[:alpha:]_][[:alnum:]_-]*))
127,
/* 128 */

//Line 494: ([[:blank:]]*)\"/*\"
128,
/* 129 */
0,
/* 130 */
0,
/* 131 */
0,
/* 132 */

//Line 649: .
132,
/* 133 */

//Line 638: ([[:blank:]]+)
133,
/* 134 */

//Line 640: (([[:alpha:]_][[:alnum:]_-]*))
134,
/* 135 */
0,
/* 136 */
0,
/* 137 */

//Line 675: ([[:blank:]]+)
137,
/* 138 */

//Line 677: (\\r?\\n)
138,
/* 139 */

//Line 693: \"!\"
139,
/* 140 */

//Line 702: \"(\"
140,
/* 141 */

//Line 703: \")\"
141,
/* 142 */

//Line 705: \",\"
142,
/* 143 */

//Line 679: [[:digit:]]+
143,
/* 144 */

//Line 685: \":\"
144,
/* 145 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
145,
/* 146 */

//Line 695: \"{\"
146,
/* 147 */

//Line 696: \"}\"
147,
/* 148 */

//Line 707: \\\"[^\\n\\\"]*\\\"
148,
/* 149 */

//Line 662: ([[:blank:]]*)\"/*\"
149,
/* 150 */

//Line 660: ([[:blank:]]*)\"//\".*
150,
/* 151 */

//Line 669: \"POP\"
151,
/* 152 */

//Line 673: \"SEM\"
152,
/* 153 */

//Line 671: \"EXIT\"
153,
/* 154 */

//Line 670: \"SHIFT\"
154,
/* 155 */

//Line 672: \"DELETE\"
155,
/* 156 */

//Line 668: \"OVERREAD\"
156,
/* 157 */
0,
/* 158 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
158,
/* 159 */
0,
/* 160 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
160,
/* 161 */
0,
/* 162 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
162,
/* 163 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
163,
/* 164 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
164,
/* 165 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
165,
/* 166 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
166,
/* 167 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
167,
/* 168 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
168,
/* 169 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
169,
/* 170 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
170,
/* 171 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
171,
/* 172 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
172,
/* 173 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
173,
/* 174 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
174,
/* 175 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
175,
/* 176 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
176,
/* 177 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
177,
/* 178 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
178,
/* 179 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
179,
/* 180 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
180,
/* 181 */

//Line 687: (([[:alpha:]_][[:alnum:]_-]*))
181,
/* 182 */
0,
/* 183 */
0,
/* 184 */

//Line 361: .+
184,
/* 185 */

//Line 370: (\\r?\\n)
185,
/* 186 */

//Line 361: .+
186,
/* 187 */
0,
/* 188 */
0,
/* 189 */

//Line 210: .
189,
/* 190 */

//Line 212: (\\r?\\n)
190,
/* 191 */

//Line 214: ^\"\\\\}\"
191,
/* 192 */

//Line 210: .
192,
/* 193 */

//Line 210: .
193,
/* 194 */
0,
/* 195 */
0,
/* 196 */

//Line 632: .|(\\r?\\n)
196,
/* 197 */

//Line 615: \"\\\\}\"
197,
/* 198 */

//Line 632: .|(\\r?\\n)
198,
/* 199 */

//Line 632: .|(\\r?\\n)
199,
/* 200 */
0,
/* 201 */
0,
/* 202 */

//Line 482: .
202,
/* 203 */

//Line 459: \"<\"
203,
/* 204 */

//Line 461: \">\"
204
};


//Lookahead-Array
ulong SSLEXScanner::ssLexLA[SSLEX_STATE] =
{
/* 0 */
0,
/* 1 */
0,
/* 2 */
0,
/* 3 */
0,
/* 4 */
0,
/* 5 */
0,
/* 6 */
0,
/* 7 */
0,
/* 8 */
0,
/* 9 */
0,
/* 10 */
0,
/* 11 */
0,
/* 12 */
0,
/* 13 */
0,
/* 14 */
0,
/* 15 */
0,
/* 16 */
0,
/* 17 */
0,
/* 18 */
0,
/* 19 */
0,
/* 20 */
0,
/* 21 */
0,
/* 22 */
0,
/* 23 */
0,
/* 24 */
0,
/* 25 */
0,
/* 26 */
0,
/* 27 */
0,
/* 28 */
0,
/* 29 */
0,
/* 30 */
0,
/* 31 */
0,
/* 32 */
0,
/* 33 */
0,
/* 34 */
0,
/* 35 */
0,
/* 36 */
0,
/* 37 */
0,
/* 38 */
0,
/* 39 */
0,
/* 40 */
0,
/* 41 */
0,
/* 42 */
0,
/* 43 */
0,
/* 44 */
0,
/* 45 */
0,
/* 46 */
0,
/* 47 */
0,
/* 48 */
0,
/* 49 */
0,
/* 50 */
0,
/* 51 */
0,
/* 52 */
0,
/* 53 */
0,
/* 54 */
0,
/* 55 */
0,
/* 56 */
0,
/* 57 */

//Line 571: \";\"$
1,
/* 58 */
0,
/* 59 */
0,
/* 60 */
0,
/* 61 */
0,
/* 62 */
0,
/* 63 */
0,
/* 64 */
0,
/* 65 */
0,
/* 66 */
0,
/* 67 */
0,
/* 68 */
0,
/* 69 */
0,
/* 70 */
0,
/* 71 */
0,
/* 72 */
0,
/* 73 */
0,
/* 74 */
0,
/* 75 */
0,
/* 76 */
0,
/* 77 */
0,
/* 78 */
0,
/* 79 */
0,
/* 80 */
0,
/* 81 */
0,
/* 82 */
0,
/* 83 */
0,
/* 84 */
0,
/* 85 */
0,
/* 86 */
0,
/* 87 */
0,
/* 88 */
0,
/* 89 */
0,
/* 90 */
0,
/* 91 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 92 */
0,
/* 93 */
0,
/* 94 */
0,
/* 95 */
0,
/* 96 */
0,
/* 97 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 98 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 99 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 100 */
0,
/* 101 */
0,
/* 102 */
0,
/* 103 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 104 */
0,
/* 105 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 106 */
0,
/* 107 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 108 */
0,
/* 109 */
0,
/* 110 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 111 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 112 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 113 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 114 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 115 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 116 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 117 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 118 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 119 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 120 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 121 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 122 */

//Line 417: ((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"
1,
/* 123 */
0,
/* 124 */
0,
/* 125 */
0,
/* 126 */
0,
/* 127 */
0,
/* 128 */
0,
/* 129 */
0,
/* 130 */
0,
/* 131 */
0,
/* 132 */
0,
/* 133 */
0,
/* 134 */
0,
/* 135 */
0,
/* 136 */
0,
/* 137 */
0,
/* 138 */
0,
/* 139 */
0,
/* 140 */
0,
/* 141 */
0,
/* 142 */
0,
/* 143 */
0,
/* 144 */
0,
/* 145 */
0,
/* 146 */
0,
/* 147 */
0,
/* 148 */
0,
/* 149 */
0,
/* 150 */
0,
/* 151 */
0,
/* 152 */
0,
/* 153 */
0,
/* 154 */
0,
/* 155 */
0,
/* 156 */
0,
/* 157 */
0,
/* 158 */
0,
/* 159 */
0,
/* 160 */
0,
/* 161 */
0,
/* 162 */
0,
/* 163 */
0,
/* 164 */
0,
/* 165 */
0,
/* 166 */
0,
/* 167 */
0,
/* 168 */
0,
/* 169 */
0,
/* 170 */
0,
/* 171 */
0,
/* 172 */
0,
/* 173 */
0,
/* 174 */
0,
/* 175 */
0,
/* 176 */
0,
/* 177 */
0,
/* 178 */
0,
/* 179 */
0,
/* 180 */
0,
/* 181 */
0,
/* 182 */
0,
/* 183 */
0,
/* 184 */
0,
/* 185 */
0,
/* 186 */
0,
/* 187 */
0,
/* 188 */
0,
/* 189 */
0,
/* 190 */
0,
/* 191 */
0,
/* 192 */
0,
/* 193 */
0,
/* 194 */
0,
/* 195 */
0,
/* 196 */
0,
/* 197 */
0,
/* 198 */
0,
/* 199 */
0,
/* 200 */
0,
/* 201 */
0,
/* 202 */
0,
/* 203 */
0,
/* 204 */
0
};


#ifdef SSLEX_DEBUG

//Structure with regular expressions in text form
char *SSLEXScanner::regText[regTextSize] = {
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 123
"([[:blank:]]+)",	// ([[:blank:]]+), line 125
"(\\r?\\n)",	// (\r?\n), line 127
"^\"//\".*",	// ^"//".*, line 129
"^\"/*\"",	// ^"/*", line 131
"^\"%\"(([[:alpha:]_][[:alnum:]_-]*))",	// ^"%"(([[:alpha:]_][[:alnum:]_-]*)), line 138
"^\"//\".*",	// ^"//".*, line 253
"^\"/*\"",	// ^"/*", line 255
"(\\r?\\n)",	// (\r?\n), line 261
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 263
"^([[:blank:]]+)",	// ^([[:blank:]]+), line 265
"([[:blank:]]+)",	// ([[:blank:]]+), line 270
"^\"%\"(([[:alpha:]_][[:alnum:]_-]*))",	// ^"%"(([[:alpha:]_][[:alnum:]_-]*)), line 272
"\"<\"",	// "<", line 342
"\">\"",	// ">", line 347
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 352
"([[:blank:]]+)",	// ([[:blank:]]+), line 526
"(\\r?\\n)",	// (\r?\n), line 528
"^([[:blank:]]*)\"//\".*",	// ^([[:blank:]]*)"//".*, line 530
"^([[:blank:]]*)\"/*\"",	// ^([[:blank:]]*)"/*", line 532
"^(([[:alpha:]_][[:alnum:]_-]*))",	// ^(([[:alpha:]_][[:alnum:]_-]*)), line 538
"\":\"",	// ":", line 544
"\"::=\"",	// "::=", line 545
"\":=\"",	// ":=", line 546
"\"->\"",	// "->", line 547
"\"'\"(([[:alpha:]_][[:alnum:]_-]*))\"'\"",	// "'"(([[:alpha:]_][[:alnum:]_-]*))"'", line 549
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 565
"\";\"$",	// ";"$, line 571
"\"|\"",	// "|", line 573
"\"\\\\{\"",	// "\\{", line 575
"\"(\"",	// "(", line 577
"\")\"",	// ")", line 578
"\"{\"",	// "{", line 579
"\"}\"",	// "}", line 580
"\"[\"",	// "[", line 581
"\"]\"",	// "]", line 582
"\"%prec\"",	// "%prec", line 584
"\"%error\"",	// "%error", line 590
"^\"%extension\".*",	// ^"%extension".*, line 596
"\"*/\"",	// "*/", line 234
"\"*\"",	// "*", line 241
"[^*\\n]+",	// [^*\n]+, line 244
"[^*\\n]*(\\r?\\n)",	// [^*\n]*(\r?\n), line 247
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 386
"(\\r?\\n)",	// (\r?\n), line 388
"([[:blank:]]+)",	// ([[:blank:]]+), line 390
"([[:blank:]]*)\"//\".*",	// ([[:blank:]]*)"//".*, line 392
"([[:blank:]]*)\"/*\"",	// ([[:blank:]]*)"/*", line 394
"\"{\"",	// "{", line 401
"\"}\"",	// "}", line 406
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"",	// ((([[:alpha:]_][[:alnum:]_-]*))("::"(([[:alpha:]_][[:alnum:]_-]*)))*)/"<", line 417
"\"const\"",	// "const", line 429
"\"struct\"",	// "struct", line 430
"\"unsigned\"",	// "unsigned", line 431
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",	// ((([[:alpha:]_][[:alnum:]_-]*))("::"(([[:alpha:]_][[:alnum:]_-]*)))*), line 434
"\";\"",	// ";", line 450
"([[:blank:]]+)+",	// ([[:blank:]]+)+, line 492
"([[:blank:]]*)\"/*\"",	// ([[:blank:]]*)"/*", line 494
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 501
"\"*\"",	// "*", line 517
"([[:blank:]]+)",	// ([[:blank:]]+), line 638
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 640
".",	// ., line 649
"([[:blank:]]*)\"//\".*",	// ([[:blank:]]*)"//".*, line 660
"([[:blank:]]*)\"/*\"",	// ([[:blank:]]*)"/*", line 662
"\"OVERREAD\"",	// "OVERREAD", line 668
"\"POP\"",	// "POP", line 669
"\"SHIFT\"",	// "SHIFT", line 670
"\"EXIT\"",	// "EXIT", line 671
"\"DELETE\"",	// "DELETE", line 672
"\"SEM\"",	// "SEM", line 673
"([[:blank:]]+)",	// ([[:blank:]]+), line 675
"(\\r?\\n)",	// (\r?\n), line 677
"[[:digit:]]+",	// [[:digit:]]+, line 679
"\":\"",	// ":", line 685
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 687
"\"!\"",	// "!", line 693
"\"{\"",	// "{", line 695
"\"}\"",	// "}", line 696
"\"(\"",	// "(", line 702
"\")\"",	// ")", line 703
"\",\"",	// ",", line 705
"\\\"[^\\n\\\"]*\\\"",	// \"[^\n\"]*\", line 707
".+",	// .+, line 361
"(\\r?\\n)",	// (\r?\n), line 370
".",	// ., line 210
"(\\r?\\n)",	// (\r?\n), line 212
"^\"\\\\}\"",	// ^"\\}", line 214
"<<EOF>>",	// <<EOF>>, line 225
"\"\\\\}\"",	// "\\}", line 615
".|(\\r?\\n)",	// .|(\r?\n), line 632
"\"<\"",	// "<", line 459
"\">\"",	// ">", line 461
"."	// ., line 482
};


//Array with indices in regText
ulong SSLEXScanner::regTextIndex0[] = { 1, 2 };
ulong SSLEXScanner::regTextIndex1[] = { 0, 1, 2, 3, 4, 5 };
ulong SSLEXScanner::regTextIndex2[] = { 1 };
ulong SSLEXScanner::regTextIndex3[] = { 2 };
ulong SSLEXScanner::regTextIndex4[] = { 0, 2 };
ulong SSLEXScanner::regTextIndex5[] = { 5 };
ulong SSLEXScanner::regTextIndex6[] = { 4 };
ulong SSLEXScanner::regTextIndex7[] = { 3 };
ulong SSLEXScanner::regTextIndex8[] = { 2 };
ulong SSLEXScanner::regTextIndex9[] = { 0, 1 };
ulong SSLEXScanner::regTextIndex10[] = { 0, 2 };
ulong SSLEXScanner::regTextIndex11[] = { 5 };
ulong SSLEXScanner::regTextIndex12[] = { 3, 4 };
ulong SSLEXScanner::regTextIndex13[] = { 8, 11, 13, 14, 15 };
ulong SSLEXScanner::regTextIndex14[] = { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
ulong SSLEXScanner::regTextIndex15[] = { 11 };
ulong SSLEXScanner::regTextIndex16[] = { 8 };
ulong SSLEXScanner::regTextIndex17[] = { 13 };
ulong SSLEXScanner::regTextIndex18[] = { 14 };
ulong SSLEXScanner::regTextIndex19[] = { 15 };
ulong SSLEXScanner::regTextIndex20[] = { 9, 10, 11 };
ulong SSLEXScanner::regTextIndex21[] = { 9 };
ulong SSLEXScanner::regTextIndex22[] = { 12 };
ulong SSLEXScanner::regTextIndex23[] = { 7 };
ulong SSLEXScanner::regTextIndex24[] = { 6 };
ulong SSLEXScanner::regTextIndex25[] = { 8 };
ulong SSLEXScanner::regTextIndex26[] = { 12 };
ulong SSLEXScanner::regTextIndex27[] = { 6, 7 };
ulong SSLEXScanner::regTextIndex28[] = { 9 };
ulong SSLEXScanner::regTextIndex29[] = { 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 };
ulong SSLEXScanner::regTextIndex30[] = { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 };
ulong SSLEXScanner::regTextIndex31[] = { 16 };
ulong SSLEXScanner::regTextIndex32[] = { 17 };
ulong SSLEXScanner::regTextIndex33[] = { 30 };
ulong SSLEXScanner::regTextIndex34[] = { 31 };
ulong SSLEXScanner::regTextIndex35[] = { 21, 22, 23 };
ulong SSLEXScanner::regTextIndex36[] = { 26 };
ulong SSLEXScanner::regTextIndex37[] = { 34 };
ulong SSLEXScanner::regTextIndex38[] = { 35 };
ulong SSLEXScanner::regTextIndex39[] = { 32 };
ulong SSLEXScanner::regTextIndex40[] = { 28 };
ulong SSLEXScanner::regTextIndex41[] = { 33 };
ulong SSLEXScanner::regTextIndex42[] = { 24 };
ulong SSLEXScanner::regTextIndex43[] = { 23 };
ulong SSLEXScanner::regTextIndex44[] = { 27 };
ulong SSLEXScanner::regTextIndex45[] = { 29 };
ulong SSLEXScanner::regTextIndex46[] = { 25 };
ulong SSLEXScanner::regTextIndex47[] = { 22 };
ulong SSLEXScanner::regTextIndex48[] = { 36 };
ulong SSLEXScanner::regTextIndex49[] = { 37 };
ulong SSLEXScanner::regTextIndex50[] = { 20, 26 };
ulong SSLEXScanner::regTextIndex51[] = { 19 };
ulong SSLEXScanner::regTextIndex52[] = { 18 };
ulong SSLEXScanner::regTextIndex53[] = { 38 };
ulong SSLEXScanner::regTextIndex54[] = { 17 };
ulong SSLEXScanner::regTextIndex55[] = { 36, 37 };
ulong SSLEXScanner::regTextIndex56[] = { 24 };
ulong SSLEXScanner::regTextIndex57[] = { 27 };
ulong SSLEXScanner::regTextIndex58[] = { 29 };
ulong SSLEXScanner::regTextIndex59[] = { 25 };
ulong SSLEXScanner::regTextIndex60[] = { 22 };
ulong SSLEXScanner::regTextIndex61[] = { 36 };
ulong SSLEXScanner::regTextIndex62[] = { 37 };
ulong SSLEXScanner::regTextIndex63[] = { 18, 19 };
ulong SSLEXScanner::regTextIndex64[] = { 38 };
ulong SSLEXScanner::regTextIndex65[] = { 16, 18, 19 };
ulong SSLEXScanner::regTextIndex66[] = { 25 };
ulong SSLEXScanner::regTextIndex67[] = { 36 };
ulong SSLEXScanner::regTextIndex68[] = { 37 };
ulong SSLEXScanner::regTextIndex69[] = { 38 };
ulong SSLEXScanner::regTextIndex70[] = { 36 };
ulong SSLEXScanner::regTextIndex71[] = { 37 };
ulong SSLEXScanner::regTextIndex72[] = { 38 };
ulong SSLEXScanner::regTextIndex73[] = { 37 };
ulong SSLEXScanner::regTextIndex74[] = { 38 };
ulong SSLEXScanner::regTextIndex75[] = { 38 };
ulong SSLEXScanner::regTextIndex76[] = { 38 };
ulong SSLEXScanner::regTextIndex77[] = { 38 };
ulong SSLEXScanner::regTextIndex78[] = { 37, 38 };
ulong SSLEXScanner::regTextIndex79[] = { 36, 37, 38 };
ulong SSLEXScanner::regTextIndex80[] = { 39, 40, 41, 42 };
ulong SSLEXScanner::regTextIndex81[] = { 39, 40, 41, 42 };
ulong SSLEXScanner::regTextIndex82[] = { 41, 42 };
ulong SSLEXScanner::regTextIndex83[] = { 42 };
ulong SSLEXScanner::regTextIndex84[] = { 39, 40 };
ulong SSLEXScanner::regTextIndex85[] = { 39 };
ulong SSLEXScanner::regTextIndex86[] = { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 };
ulong SSLEXScanner::regTextIndex87[] = { 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 };
ulong SSLEXScanner::regTextIndex88[] = { 45, 46, 47 };
ulong SSLEXScanner::regTextIndex89[] = { 44 };
ulong SSLEXScanner::regTextIndex90[] = { 55 };
ulong SSLEXScanner::regTextIndex91[] = { 50, 54 };
ulong SSLEXScanner::regTextIndex92[] = { 48 };
ulong SSLEXScanner::regTextIndex93[] = { 49 };
ulong SSLEXScanner::regTextIndex94[] = { 47 };
ulong SSLEXScanner::regTextIndex95[] = { 46 };
ulong SSLEXScanner::regTextIndex96[] = { 50 };
ulong SSLEXScanner::regTextIndex97[] = { 50, 51, 54 };
ulong SSLEXScanner::regTextIndex98[] = { 50, 52, 54 };
ulong SSLEXScanner::regTextIndex99[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex100[] = { 43, 44 };
ulong SSLEXScanner::regTextIndex101[] = { 44 };
ulong SSLEXScanner::regTextIndex102[] = { 43, 45, 46, 47 };
ulong SSLEXScanner::regTextIndex103[] = { 50, 51, 54 };
ulong SSLEXScanner::regTextIndex104[] = { 46, 47 };
ulong SSLEXScanner::regTextIndex105[] = { 50, 52, 54 };
ulong SSLEXScanner::regTextIndex106[] = { 50, 54 };
ulong SSLEXScanner::regTextIndex107[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex108[] = { 50, 54 };
ulong SSLEXScanner::regTextIndex109[] = { 43, 44 };
ulong SSLEXScanner::regTextIndex110[] = { 50, 51, 54 };
ulong SSLEXScanner::regTextIndex111[] = { 50, 52, 54 };
ulong SSLEXScanner::regTextIndex112[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex113[] = { 50, 51, 54 };
ulong SSLEXScanner::regTextIndex114[] = { 50, 52, 54 };
ulong SSLEXScanner::regTextIndex115[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex116[] = { 50, 51, 54 };
ulong SSLEXScanner::regTextIndex117[] = { 50, 52, 54 };
ulong SSLEXScanner::regTextIndex118[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex119[] = { 50, 52, 54 };
ulong SSLEXScanner::regTextIndex120[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex121[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex122[] = { 50, 53, 54 };
ulong SSLEXScanner::regTextIndex123[] = { 56, 57, 58, 59 };
ulong SSLEXScanner::regTextIndex124[] = { 56, 57, 58, 59 };
ulong SSLEXScanner::regTextIndex125[] = { 56, 57 };
ulong SSLEXScanner::regTextIndex126[] = { 59 };
ulong SSLEXScanner::regTextIndex127[] = { 58 };
ulong SSLEXScanner::regTextIndex128[] = { 57 };
ulong SSLEXScanner::regTextIndex129[] = { 57 };
ulong SSLEXScanner::regTextIndex130[] = { 60, 61, 62 };
ulong SSLEXScanner::regTextIndex131[] = { 60, 61, 62 };
ulong SSLEXScanner::regTextIndex132[] = { 62 };
ulong SSLEXScanner::regTextIndex133[] = { 60, 62 };
ulong SSLEXScanner::regTextIndex134[] = { 61, 62 };
ulong SSLEXScanner::regTextIndex135[] = { 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82 };
ulong SSLEXScanner::regTextIndex136[] = { 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82 };
ulong SSLEXScanner::regTextIndex137[] = { 63, 64, 71 };
ulong SSLEXScanner::regTextIndex138[] = { 72 };
ulong SSLEXScanner::regTextIndex139[] = { 76 };
ulong SSLEXScanner::regTextIndex140[] = { 79 };
ulong SSLEXScanner::regTextIndex141[] = { 80 };
ulong SSLEXScanner::regTextIndex142[] = { 81 };
ulong SSLEXScanner::regTextIndex143[] = { 73 };
ulong SSLEXScanner::regTextIndex144[] = { 74 };
ulong SSLEXScanner::regTextIndex145[] = { 75 };
ulong SSLEXScanner::regTextIndex146[] = { 77 };
ulong SSLEXScanner::regTextIndex147[] = { 78 };
ulong SSLEXScanner::regTextIndex148[] = { 82 };
ulong SSLEXScanner::regTextIndex149[] = { 64 };
ulong SSLEXScanner::regTextIndex150[] = { 63 };
ulong SSLEXScanner::regTextIndex151[] = { 66, 75 };
ulong SSLEXScanner::regTextIndex152[] = { 70, 75 };
ulong SSLEXScanner::regTextIndex153[] = { 68, 75 };
ulong SSLEXScanner::regTextIndex154[] = { 67, 75 };
ulong SSLEXScanner::regTextIndex155[] = { 69, 75 };
ulong SSLEXScanner::regTextIndex156[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex157[] = { 72 };
ulong SSLEXScanner::regTextIndex158[] = { 66, 75 };
ulong SSLEXScanner::regTextIndex159[] = { 82 };
ulong SSLEXScanner::regTextIndex160[] = { 70, 75 };
ulong SSLEXScanner::regTextIndex161[] = { 63, 64 };
ulong SSLEXScanner::regTextIndex162[] = { 68, 75 };
ulong SSLEXScanner::regTextIndex163[] = { 67, 75 };
ulong SSLEXScanner::regTextIndex164[] = { 69, 75 };
ulong SSLEXScanner::regTextIndex165[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex166[] = { 66, 75 };
ulong SSLEXScanner::regTextIndex167[] = { 67, 70, 75 };
ulong SSLEXScanner::regTextIndex168[] = { 68, 75 };
ulong SSLEXScanner::regTextIndex169[] = { 67, 75 };
ulong SSLEXScanner::regTextIndex170[] = { 69, 75 };
ulong SSLEXScanner::regTextIndex171[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex172[] = { 68, 75 };
ulong SSLEXScanner::regTextIndex173[] = { 67, 75 };
ulong SSLEXScanner::regTextIndex174[] = { 69, 75 };
ulong SSLEXScanner::regTextIndex175[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex176[] = { 69, 75 };
ulong SSLEXScanner::regTextIndex177[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex178[] = { 69, 75 };
ulong SSLEXScanner::regTextIndex179[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex180[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex181[] = { 65, 75 };
ulong SSLEXScanner::regTextIndex182[] = { 83, 84 };
ulong SSLEXScanner::regTextIndex183[] = { 83, 84 };
ulong SSLEXScanner::regTextIndex184[] = { 83 };
ulong SSLEXScanner::regTextIndex185[] = { 84 };
ulong SSLEXScanner::regTextIndex186[] = { 83, 84 };
ulong SSLEXScanner::regTextIndex187[] = { 85, 86 };
ulong SSLEXScanner::regTextIndex188[] = { 85, 86, 87 };
ulong SSLEXScanner::regTextIndex189[] = { 85 };
ulong SSLEXScanner::regTextIndex190[] = { 86 };
ulong SSLEXScanner::regTextIndex191[] = { 87 };
ulong SSLEXScanner::regTextIndex192[] = { 85, 86 };
ulong SSLEXScanner::regTextIndex193[] = { 85, 87 };
ulong SSLEXScanner::regTextIndex194[] = { 89, 90, 60 };
ulong SSLEXScanner::regTextIndex195[] = { 89, 90, 60 };
ulong SSLEXScanner::regTextIndex196[] = { 90 };
ulong SSLEXScanner::regTextIndex197[] = { 89 };
ulong SSLEXScanner::regTextIndex198[] = { 90, 60 };
ulong SSLEXScanner::regTextIndex199[] = { 89, 90 };
ulong SSLEXScanner::regTextIndex200[] = { 91, 92, 93 };
ulong SSLEXScanner::regTextIndex201[] = { 91, 92, 93 };
ulong SSLEXScanner::regTextIndex202[] = { 93 };
ulong SSLEXScanner::regTextIndex203[] = { 91, 93 };
ulong SSLEXScanner::regTextIndex204[] = { 92, 93 };


//Structure with debugging information
SSLEXScanner::SSLEXDebugStr SSLEXScanner::debugStr[SSLEX_STATE] = {
{ 0, regTextIndex0, 2 },
{ 1, regTextIndex1, 6 },
{ 2, regTextIndex2, 1 },
{ 3, regTextIndex3, 1 },
{ 4, regTextIndex4, 2 },
{ 5, regTextIndex5, 1 },
{ 6, regTextIndex6, 1 },
{ 7, regTextIndex7, 1 },
{ 8, regTextIndex8, 1 },
{ 9, regTextIndex9, 2 },
{ 10, regTextIndex10, 2 },
{ 11, regTextIndex11, 1 },
{ 12, regTextIndex12, 2 },
{ 13, regTextIndex13, 5 },
{ 14, regTextIndex14, 10 },
{ 15, regTextIndex15, 1 },
{ 16, regTextIndex16, 1 },
{ 17, regTextIndex17, 1 },
{ 18, regTextIndex18, 1 },
{ 19, regTextIndex19, 1 },
{ 20, regTextIndex20, 3 },
{ 21, regTextIndex21, 1 },
{ 22, regTextIndex22, 1 },
{ 23, regTextIndex23, 1 },
{ 24, regTextIndex24, 1 },
{ 25, regTextIndex25, 1 },
{ 26, regTextIndex26, 1 },
{ 27, regTextIndex27, 2 },
{ 28, regTextIndex28, 1 },
{ 29, regTextIndex29, 19 },
{ 30, regTextIndex30, 23 },
{ 31, regTextIndex31, 1 },
{ 32, regTextIndex32, 1 },
{ 33, regTextIndex33, 1 },
{ 34, regTextIndex34, 1 },
{ 35, regTextIndex35, 3 },
{ 36, regTextIndex36, 1 },
{ 37, regTextIndex37, 1 },
{ 38, regTextIndex38, 1 },
{ 39, regTextIndex39, 1 },
{ 40, regTextIndex40, 1 },
{ 41, regTextIndex41, 1 },
{ 42, regTextIndex42, 1 },
{ 43, regTextIndex43, 1 },
{ 44, regTextIndex44, 1 },
{ 45, regTextIndex45, 1 },
{ 46, regTextIndex46, 1 },
{ 47, regTextIndex47, 1 },
{ 48, regTextIndex48, 1 },
{ 49, regTextIndex49, 1 },
{ 50, regTextIndex50, 2 },
{ 51, regTextIndex51, 1 },
{ 52, regTextIndex52, 1 },
{ 53, regTextIndex53, 1 },
{ 54, regTextIndex54, 1 },
{ 55, regTextIndex55, 2 },
{ 56, regTextIndex56, 1 },
{ 57, regTextIndex57, 1 },
{ 58, regTextIndex58, 1 },
{ 59, regTextIndex59, 1 },
{ 60, regTextIndex60, 1 },
{ 61, regTextIndex61, 1 },
{ 62, regTextIndex62, 1 },
{ 63, regTextIndex63, 2 },
{ 64, regTextIndex64, 1 },
{ 65, regTextIndex65, 3 },
{ 66, regTextIndex66, 1 },
{ 67, regTextIndex67, 1 },
{ 68, regTextIndex68, 1 },
{ 69, regTextIndex69, 1 },
{ 70, regTextIndex70, 1 },
{ 71, regTextIndex71, 1 },
{ 72, regTextIndex72, 1 },
{ 73, regTextIndex73, 1 },
{ 74, regTextIndex74, 1 },
{ 75, regTextIndex75, 1 },
{ 76, regTextIndex76, 1 },
{ 77, regTextIndex77, 1 },
{ 78, regTextIndex78, 2 },
{ 79, regTextIndex79, 3 },
{ 80, regTextIndex80, 4 },
{ 81, regTextIndex81, 4 },
{ 82, regTextIndex82, 2 },
{ 83, regTextIndex83, 1 },
{ 84, regTextIndex84, 2 },
{ 85, regTextIndex85, 1 },
{ 86, regTextIndex86, 12 },
{ 87, regTextIndex87, 13 },
{ 88, regTextIndex88, 3 },
{ 89, regTextIndex89, 1 },
{ 90, regTextIndex90, 1 },
{ 91, regTextIndex91, 2 },
{ 92, regTextIndex92, 1 },
{ 93, regTextIndex93, 1 },
{ 94, regTextIndex94, 1 },
{ 95, regTextIndex95, 1 },
{ 96, regTextIndex96, 1 },
{ 97, regTextIndex97, 3 },
{ 98, regTextIndex98, 3 },
{ 99, regTextIndex99, 3 },
{ 100, regTextIndex100, 2 },
{ 101, regTextIndex101, 1 },
{ 102, regTextIndex102, 4 },
{ 103, regTextIndex103, 3 },
{ 104, regTextIndex104, 2 },
{ 105, regTextIndex105, 3 },
{ 106, regTextIndex106, 2 },
{ 107, regTextIndex107, 3 },
{ 108, regTextIndex108, 2 },
{ 109, regTextIndex109, 2 },
{ 110, regTextIndex110, 3 },
{ 111, regTextIndex111, 3 },
{ 112, regTextIndex112, 3 },
{ 113, regTextIndex113, 3 },
{ 114, regTextIndex114, 3 },
{ 115, regTextIndex115, 3 },
{ 116, regTextIndex116, 3 },
{ 117, regTextIndex117, 3 },
{ 118, regTextIndex118, 3 },
{ 119, regTextIndex119, 3 },
{ 120, regTextIndex120, 3 },
{ 121, regTextIndex121, 3 },
{ 122, regTextIndex122, 3 },
{ 123, regTextIndex123, 4 },
{ 124, regTextIndex124, 4 },
{ 125, regTextIndex125, 2 },
{ 126, regTextIndex126, 1 },
{ 127, regTextIndex127, 1 },
{ 128, regTextIndex128, 1 },
{ 129, regTextIndex129, 1 },
{ 130, regTextIndex130, 3 },
{ 131, regTextIndex131, 3 },
{ 132, regTextIndex132, 1 },
{ 133, regTextIndex133, 2 },
{ 134, regTextIndex134, 2 },
{ 135, regTextIndex135, 20 },
{ 136, regTextIndex136, 20 },
{ 137, regTextIndex137, 3 },
{ 138, regTextIndex138, 1 },
{ 139, regTextIndex139, 1 },
{ 140, regTextIndex140, 1 },
{ 141, regTextIndex141, 1 },
{ 142, regTextIndex142, 1 },
{ 143, regTextIndex143, 1 },
{ 144, regTextIndex144, 1 },
{ 145, regTextIndex145, 1 },
{ 146, regTextIndex146, 1 },
{ 147, regTextIndex147, 1 },
{ 148, regTextIndex148, 1 },
{ 149, regTextIndex149, 1 },
{ 150, regTextIndex150, 1 },
{ 151, regTextIndex151, 2 },
{ 152, regTextIndex152, 2 },
{ 153, regTextIndex153, 2 },
{ 154, regTextIndex154, 2 },
{ 155, regTextIndex155, 2 },
{ 156, regTextIndex156, 2 },
{ 157, regTextIndex157, 1 },
{ 158, regTextIndex158, 2 },
{ 159, regTextIndex159, 1 },
{ 160, regTextIndex160, 2 },
{ 161, regTextIndex161, 2 },
{ 162, regTextIndex162, 2 },
{ 163, regTextIndex163, 2 },
{ 164, regTextIndex164, 2 },
{ 165, regTextIndex165, 2 },
{ 166, regTextIndex166, 2 },
{ 167, regTextIndex167, 3 },
{ 168, regTextIndex168, 2 },
{ 169, regTextIndex169, 2 },
{ 170, regTextIndex170, 2 },
{ 171, regTextIndex171, 2 },
{ 172, regTextIndex172, 2 },
{ 173, regTextIndex173, 2 },
{ 174, regTextIndex174, 2 },
{ 175, regTextIndex175, 2 },
{ 176, regTextIndex176, 2 },
{ 177, regTextIndex177, 2 },
{ 178, regTextIndex178, 2 },
{ 179, regTextIndex179, 2 },
{ 180, regTextIndex180, 2 },
{ 181, regTextIndex181, 2 },
{ 182, regTextIndex182, 2 },
{ 183, regTextIndex183, 2 },
{ 184, regTextIndex184, 1 },
{ 185, regTextIndex185, 1 },
{ 186, regTextIndex186, 2 },
{ 187, regTextIndex187, 2 },
{ 188, regTextIndex188, 3 },
{ 189, regTextIndex189, 1 },
{ 190, regTextIndex190, 1 },
{ 191, regTextIndex191, 1 },
{ 192, regTextIndex192, 2 },
{ 193, regTextIndex193, 2 },
{ 194, regTextIndex194, 3 },
{ 195, regTextIndex195, 3 },
{ 196, regTextIndex196, 1 },
{ 197, regTextIndex197, 1 },
{ 198, regTextIndex198, 2 },
{ 199, regTextIndex199, 2 },
{ 200, regTextIndex200, 3 },
{ 201, regTextIndex201, 3 },
{ 202, regTextIndex202, 1 },
{ 203, regTextIndex203, 2 },
{ 204, regTextIndex204, 2 }
};


//Array with regular expression at accepting
char *SSLEXScanner::acceptRegText[SSLEX_STATE] = { 0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"^([[:blank:]]*)(\\r?\\n)",
"^\"%\"(([[:alpha:]_][[:alnum:]_-]*))",
"^\"/*\"",
"^\"//\".*",
0L,
"([[:blank:]]+)",
0L,
0L,
0L,
0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"\"<\"",
"\">\"",
"(([[:alpha:]_][[:alnum:]_-]*))",
"^([[:blank:]]+)",
"^([[:blank:]]*)(\\r?\\n)",
"^\"%\"(([[:alpha:]_][[:alnum:]_-]*))",
"^\"/*\"",
"^\"//\".*",
0L,
0L,
0L,
0L,
0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"\"(\"",
"\")\"",
"\":\"",
"(([[:alpha:]_][[:alnum:]_-]*))",
"\"[\"",
"\"]\"",
"\"{\"",
"\"|\"",
"\"}\"",
"\"->\"",
"\":=\"",
"\";\"$",
"\"\\\\{\"",
"\"'\"(([[:alpha:]_][[:alnum:]_-]*))\"'\"",
"\"::=\"",
"\"%prec\"",
"\"%error\"",
"^(([[:alpha:]_][[:alnum:]_-]*))",
"^([[:blank:]]*)\"/*\"",
"^([[:blank:]]*)\"//\".*",
"^\"%extension\".*",
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
"([[:blank:]]+)",
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
0L,
"[^*\\n]+",
"[^*\\n]*(\\r?\\n)",
"\"*\"",
"\"*/\"",
0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"\";\"",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"\"{\"",
"\"}\"",
"([[:blank:]]*)\"/*\"",
"([[:blank:]]*)\"//\".*",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)/\"<\"",
"\"const\"",
"\"struct\"",
"\"unsigned\"",
"^([[:blank:]]*)(\\r?\\n)",
0L,
"([[:blank:]]+)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
0L,
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
0L,
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
0L,
0L,
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
"((([[:alpha:]_][[:alnum:]_-]*))(\"::\"(([[:alpha:]_][[:alnum:]_-]*)))*)",
0L,
0L,
"([[:blank:]]+)+",
"\"*\"",
"(([[:alpha:]_][[:alnum:]_-]*))",
"([[:blank:]]*)\"/*\"",
0L,
0L,
0L,
".",
"([[:blank:]]+)",
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"\"!\"",
"\"(\"",
"\")\"",
"\",\"",
"[[:digit:]]+",
"\":\"",
"(([[:alpha:]_][[:alnum:]_-]*))",
"\"{\"",
"\"}\"",
"\\\"[^\\n\\\"]*\\\"",
"([[:blank:]]*)\"/*\"",
"([[:blank:]]*)\"//\".*",
"\"POP\"",
"\"SEM\"",
"\"EXIT\"",
"\"SHIFT\"",
"\"DELETE\"",
"\"OVERREAD\"",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
0L,
".+",
"(\\r?\\n)",
".+",
0L,
0L,
".",
"(\\r?\\n)",
"^\"\\\\}\"",
".",
".",
0L,
0L,
".|(\\r?\\n)",
"\"\\\\}\"",
".|(\\r?\\n)",
".|(\\r?\\n)",
0L,
0L,
".",
"\"<\"",
"\">\""

};
#endif

//name of the start conditions
char *SSLEXScanner::scName[] = {
	"INITIAL", "NL_INITIAL",
	"SC_DEFINITION", "NL_SC_DEFINITION",
	"SC_GRAMMAR", "NL_SC_GRAMMAR",
	"SC_COMMENT", "NL_SC_COMMENT",
	"SC_UNION", "NL_SC_UNION",
	"SC_UNION2", "NL_SC_UNION2",
	"SC_PREC", "NL_SC_PREC",
	"SC_ERROR", "NL_SC_ERROR",
	"SC_CODEBLOCK", "NL_SC_CODEBLOCK",
	"SC_INCLUDE", "NL_SC_INCLUDE",
	"SC_SEMACT", "NL_SC_SEMACT",
	"SC_UNION_NEST", "NL_SC_UNION_NEST"
};

//Table for error handling
int SSLEXScanner::err[scSize][CCLWIDTH] = { 0 };



//state of start conditions
ulong SSLEXScanner::scIndex[] = {
	0, //INITIAL
	1, //NL_INITIAL
	13, //SC_DEFINITION
	14, //NL_SC_DEFINITION
	29, //SC_GRAMMAR
	30, //NL_SC_GRAMMAR
	80, //SC_COMMENT
	81, //NL_SC_COMMENT
	86, //SC_UNION
	87, //NL_SC_UNION
	123, //SC_UNION2
	124, //NL_SC_UNION2
	130, //SC_PREC
	131, //NL_SC_PREC
	135, //SC_ERROR
	136, //NL_SC_ERROR
	182, //SC_CODEBLOCK
	183, //NL_SC_CODEBLOCK
	187, //SC_INCLUDE
	188, //NL_SC_INCLUDE
	194, //SC_SEMACT
	195, //NL_SC_SEMACT
	200, //SC_UNION_NEST
	201 //NL_SC_UNION_NEST
};


SSLEXScanner::SSLEXScanner( char *data, ulong size )
{
	//initialize SSLEX

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::SSLEXScanner: No data!\n";

		//exit
		exit( 1 );
	}

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//init with SSLEX_YYTEXTSIZE bytes
	yyTextLen = SSLEX_YYTEXTSIZE;
	yyText = new( char[yyTextLen + 1] );
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackSize = 0;
	scStackPos = 0;
	scStack = 0L;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


SSLEXScanner::~SSLEXScanner()
{
	//free memory
	if( yyText )
		delete[] ( yyText );

	if( scStack )
		delete[] ( scStack );

	//free old text
	if( basePos )
		delete[] ( basePos );


#ifdef SSLEX_INIT

	//deinizialize user defined variables
	deinit();
#endif
}


void SSLEXScanner::reset( void )
{
	//reset the whole scanner

	//start position
	pos = basePos;

	//end of scanning
	end = pos + basePosLength;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//start-condition INITIAL
	state = baseState = INITIAL;

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


void SSLEXScanner::reset( char *data, ulong size )
{
	//reset the whole scanner and give him new input

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::reset: No data!\n";

		//exit
		exit( 1 );
	}

	//free old text
	if( basePos )
		delete[] ( basePos );

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


int SSLEXScanner::yyLex( SSLR_TYPE *attributeStr )
{
	//start scanning
	unsigned char	c;

	//Basis-Position für das Lexem
	startPos = pos;

	//setup some stuff
	yyDoBeforeRule();

	while( pos <= end )
	{
		//Zeichen
		c = *pos;

		//when we use a 7 bit scanner
		if( c > 127 )
		{
			//we need a 8 bit scanner
//			cerr << "SSLEXScanner::yyLex: Line " << yyLineno << ": You need a 8 bit scanner to match the character " << c << "!\n";

			//skip character
			pos++;
			continue;
		}

#ifdef SSLEX_DEBUG
		//print debugging information
		mainDebug( c );
#endif

		//schieben?
		if( ssLexTable[state][c] >= 0 )
		{

#ifdef SSLEX_DEBUG
			//print debugging information
			shiftDebug( c );
#endif

			//akzeptieren?
			if( ssLexAccept[state] )
			{
				//ja, merken
				lastAcceptingState = state;
				lastAcceptingPos = pos;
			}

			//Lookahead-Zustand?
			if( ssLexLA[state] )
				//ja, merken
				lastLAPos = pos;

			//shift new state
			state = ssLexTable[state][c];

			//nächstes Zeichen
			pos++;
		}

		else
		{
			//akzeptieren
			do
			{

#ifdef SSLEX_DEBUG
				//print debugging information
				acceptDebug();
#endif

				switch( ssLexAccept[state] )
				{
					//([[:blank:]]+)
					case 2:
					case 9:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 3:
					{
						//setup yyText
						setupyyText();

/* neue Zeile */

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 4:
					{
						//setup yyText
						setupyyText();

/* allows blank lines in section 1 */

						break;
					}

					//^"%"(([[:alpha:]_][[:alnum:]_-]*))
					case 5:
					{
						//setup yyText
						setupyyText();

{
						//es wurde eine Steuer-Direktive erkannt

						//%include?
						if( !strcmp( yyText, "%include" ) )
						{
							//eigene Erweiterungen
							if( incl )
								//ist schon mal benutzt
								cerr << "sslr: line " << yyLineno << ": %include already occured!" << endl;

							else
								//den Include-Teil einfach einlesen
								BEGIN( SC_INCLUDE );
						}

						//%definition?
						else if( !strcmp( yyText, "%definition" ) )
						{
							//es folgt der Definitions-Teil
							BEGIN( SC_DEFINITION );

							//zurückgeben
							return( DEFINITION );
						}

						//%union?
						else if( !strcmp( yyText, "%union" ) )
							//%union muss in %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %union must be placed in %definition!" << endl;

						//%ntermType
						else if( !strcmp( yyText, "%ntermType" ) )
							//muss in %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %ntermType must be placed in %definition!" << endl;

						//%termType
						else if( !strcmp( yyText, "%termType" ) )
							//muss in %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %termType must be placed in %definition!" << endl;

						//%left
						else if( !strcmp( yyText, "%left" ) )
							//muss in %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %left must be placed in %definition!" << endl;

						//%right
						else if( !strcmp( yyText, "%right" ) )
							//muss in %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %right must be placed in %definition!" << endl;

						//%nonassoc
						else if( !strcmp( yyText, "%nonassoc" ) )
							//muss in %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %nonassoc must be placed in %definition!" << endl;

						//%grammar
						else if( !strcmp( yyText, "%grammar" ) )
							//muss nach %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %grammar must be placed after %definition!" << endl;

						//Fehler
						else
							//Meldung ausgeben
							cerr << "sslr: line " << yyLineno << ": Unknown directive " << yyText << "!" << endl;
					}

						break;
					}

					//^"/*"
					case 6:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//^"//".*
					case 7:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//([[:blank:]]+)
					case 15:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 16:
					{
						//setup yyText
						setupyyText();

/* neue Zeile */

						break;
					}

					//"<"
					case 17:
					{
						//setup yyText
						setupyyText();

{
						//ein semantischer Typ steht in <typ>
						return( semTypeOpen );
					}

						break;
					}

					//">"
					case 18:
					{
						//setup yyText
						setupyyText();

{
						//ein semantischer Typ steht in <typ>
						return( semTypeClose );
					}

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 19:
					{
						//setup yyText
						setupyyText();

{
						//Variable oder sem. Typ
						attributeStr->name = yyStrCpy( yyText );
						return( IDENT );
					}

						break;
					}

					//^([[:blank:]]+)
					case 20:
					{
						//setup yyText
						setupyyText();

{
						//user-defined Deklarationen zum Übernehmen in die erzeugte Klasse
						BEGIN( SC_CODEBLOCK );
					}

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 21:
					{
						//setup yyText
						setupyyText();

/* allows blank lines in %definition section */

						break;
					}

					//^"%"(([[:alpha:]_][[:alnum:]_-]*))
					case 22:
					{
						//setup yyText
						setupyyText();

{
						//es wurde eine Steuer-Direktive erkannt

						//%include?
						if( !strcmp( yyText, "%include" ) )
							//eigene Erweiterungen müssen vor %definition stehen!
							cerr << "sslr: line " << yyLineno << ": %include must be placed before %definition!" << endl;

						//%union?
						else if( !strcmp( yyText, "%union" ) )
						{
							//%union scannen

							/*
								Hier wird die %union-Angabe einmal komlett gelesen ohne sie zu scannen, da
								sie so ins erzeugte Header-File eingetragen wird (Damit auch die
								Kommentare eingetragen werden). Anschließend wird die Angabe aber richtig
								gescannt, damit die semantischen Typen auch geprüft werden können.
							*/
							scanUnion();

							//nun die semantischen Typen in %union scannen
							BEGIN( SC_UNION );

							//zurückliefern
							attributeStr->name = unionTxt;
							return( UNION );
						}

						//%ntermType
						else if( !strcmp( yyText, "%ntermType" ) )
							//es folgen Nichtterminale, denen ein semantischer Typ zugewiesen wird
							return( NTERM_TYPE );

						//%termType
						else if( !strcmp( yyText, "%termType" ) )
							//es folgen Terminale, denen ein semantischer Typ zugewiesen wird
							return( TERM_TYPE );

						//%left
						else if( !strcmp( yyText, "%left" ) )
							//ein Terminal soll links-assoziativ sein
							return( LEFT_ASSOC );

						//%right
						else if( !strcmp( yyText, "%right" ) )
							//ein Terminal soll rechts-assoziativ sein
							return( RIGHT_ASSOC );

						//%nonassoc
						else if( !strcmp( yyText, "%nonassoc" ) )
							//ein Terminal soll nicht-assoziativ sein
							return( NON_ASSOC );

						//%grammar
						else if( !strcmp( yyText, "%grammar" ) )
						{
							//jetzt beginnt die eigentliche Grammatik
							BEGIN( SC_GRAMMAR );

							//zurückgeben
							return( GRAMMAR );
						}

						//Fehler
						else
							//Meldung ausgeben
							cerr << "sslr: line " << yyLineno << ": Unknown directive " << yyText << "!" << endl;
					}

						break;
					}

					//^"/*"
					case 23:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//^"//".*
					case 24:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//([[:blank:]]+)
					case 31:
					case 65:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 32:
					{
						//setup yyText
						setupyyText();

/* neue Zeile */

						break;
					}

					//"("
					case 33:
					{
						//setup yyText
						setupyyText();

/* EBNF-Symbol */ return( KLOPEN );

						break;
					}

					//")"
					case 34:
					{
						//setup yyText
						setupyyText();

/* EBNF-Symbol */ return( KLCLOSE );

						break;
					}

					//":"
					case 35:
					{
						//setup yyText
						setupyyText();

/* Separator */ return( SEP );

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 36:
					{
						//setup yyText
						setupyyText();

{
						/* Nicht-Terminal */
						attributeStr->name = yyStrCpy( yyText );
						return( NON_TERMINAL );
					}

						break;
					}

					//"["
					case 37:
					{
						//setup yyText
						setupyyText();

/* EBNF-Symbol */ return( EOPEN );

						break;
					}

					//"]"
					case 38:
					{
						//setup yyText
						setupyyText();

/* EBNF-Symbol */ return( ECLOSE );

						break;
					}

					//"{"
					case 39:
					{
						//setup yyText
						setupyyText();

/* EBNF-Symbol */ return( BOPEN );

						break;
					}

					//"|"
					case 40:
					{
						//setup yyText
						setupyyText();

/* Eine neue Alternative */ return( NEW_ALTERNATIVE );

						break;
					}

					//"}"
					case 41:
					{
						//setup yyText
						setupyyText();

/* EBNF-Symbol */ return( BCLOSE );

						break;
					}

					//"->"
					case 42:
					{
						//setup yyText
						setupyyText();

/* Separator */ return( SEP );

						break;
					}

					//":="
					case 43:
					{
						//setup yyText
						setupyyText();

/* Separator */ return( SEP );

						break;
					}

					//";"$
					case 44:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

/* Ende einer Produktion */ return( END_OF_PRODUCTION );

						break;
					}

					//"\\{"
					case 45:
					{
						//setup yyText
						setupyyText();

/* eine semantische Aktion */ BEGIN( SC_SEMACT );

						break;
					}

					//"'"(([[:alpha:]_][[:alnum:]_-]*))"'"
					case 46:
					{
						//setup yyText
						setupyyText();

{
						/* Terminal */
						char *tmp = yyStrCpy( yyText );

						//Anzahl zu kopierender Zeichen
						int	anz = strlen( tmp ) - 2;

						//entferne die ' im Zeichenstrom
						char *tmp2 = strncpy( tmp, &tmp[1], anz );
						tmp2[anz] = 0;

						//zurückliefern
						attributeStr->name = tmp2;
						return( TERMINAL );
					}

						break;
					}

					//"::="
					case 47:
					{
						//setup yyText
						setupyyText();

/* Separator */ return( SEP );

						break;
					}

					//"%prec"
					case 48:
					{
						//setup yyText
						setupyyText();

{
					/* Der Alternative wird die Priorität des folgenden Terminals zugewiesen */
					BEGIN( SC_PREC );
					return( PREC );
				}

						break;
					}

					//"%error"
					case 49:
					{
						//setup yyText
						setupyyText();

{
					//Es folgen Fehlerangaben zu einer Alternative
					BEGIN( SC_ERROR );
					return( ERROR );
				}

						break;
					}

					//^(([[:alpha:]_][[:alnum:]_-]*))
					case 50:
					{
						//setup yyText
						setupyyText();

{
					//eine neue Produktion
					attributeStr->name = yyStrCpy( yyText );
					return( IDENT );
				}

						break;
					}

					//^([[:blank:]]*)"/*"
					case 51:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//^([[:blank:]]*)"//".*
					case 52:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//^"%extension".*
					case 53:
					{
						//setup yyText
						setupyyText();

{
							/*
								Im %extension-Teil kann man eigene Erweiterungen platzieren, die
								später unverändert ins erzeugte cpp-File des Scanners eingetragen
								werden, also z.b. Hilfsroutinen, etc.
							*/
							if( extension )
								//%extension wurde mehrfach angegeben
								cerr << "sslr: line " << yyLineno << ": %extension already occured!" << endl;

							else
								//einlesen
								scanExtension();
						}

						break;
					}

					//[^*\n]+
					case 82:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//[^*\n]*(\r?\n)
					case 83:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*"
					case 84:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*/"
					case 85:
					{
						//setup yyText
						setupyyText();

{
						//sind wir noch in der Analyse eines C-Kommentars?
						if( cComment == true )
							//ja, die oberste SC entfernen
							yyPopState();
					}

						break;
					}

					//([[:blank:]]+)
					case 88:
					case 102:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 89:
					{
						//setup yyText
						setupyyText();

/* neue Zeile */

						break;
					}

					//";"
					case 90:
					{
						//setup yyText
						setupyyText();

{
						//Ende der Deklaration
						return( SEMIKOLON );
					}

						break;
					}

					//((([[:alpha:]_][[:alnum:]_-]*))("::"(([[:alpha:]_][[:alnum:]_-]*)))*)
					case 91:
					case 103:
					case 105:
					case 107:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					{
						//setup yyText
						setupyyText();

{
						/*
							Typ, also bei
							z.b. char		*name;
							ist es char.
						*/
						attributeStr->name = yyStrCpy( yyText );

						//nun kann ein * folgen, und der Name des Bezeichners
						BEGIN( SC_UNION2 );

						//Typ erkannt
						return( TYPE );
					}

						break;
					}

					//"{"
					case 92:
					{
						//setup yyText
						setupyyText();

{
						//steht nach %union
						return( BOPEN );
					}

						break;
					}

					//"}"
					case 93:
					{
						//setup yyText
						setupyyText();

{
						//steht nach %union

						//wieder nach SC_DEFINITION
						BEGIN( SC_DEFINITION );

						//zurückliefern
						return( BCLOSE );
					}

						break;
					}

					//([[:blank:]]*)"/*"
					case 94:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//([[:blank:]]*)"//".*
					case 95:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//((([[:alpha:]_][[:alnum:]_-]*))("::"(([[:alpha:]_][[:alnum:]_-]*)))*)/"<"
					case 96:
					{
						//set position back
						pos = lastLAPos;

						//setup yyText
						setupyyText();

{
						//Typ ist der Art vector<char> test, also ein Template
						yyMore();

						//Templates können verschachtelt sein
						scNest = 0;

						//SC setzen
						BEGIN( SC_UNION_NEST );
					}

						break;
					}

					//"const"
					case 97:
					{
						//setup yyText
						setupyyText();

/* const-Deklarator, ignorieren */

						break;
					}

					//"struct"
					case 98:
					{
						//setup yyText
						setupyyText();

/* struct-Deklarator, ignorieren */

						break;
					}

					//"unsigned"
					case 99:
					{
						//setup yyText
						setupyyText();

/* unsigned-Deklarator, ignorieren */

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 100:
					{
						//setup yyText
						setupyyText();

/* allows blank lines in union section */

						break;
					}

					//([[:blank:]]+)+
					case 125:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//"*"
					case 126:
					{
						//setup yyText
						setupyyText();

{
						//Zeiger
						return( AST );
					}

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 127:
					{
						//setup yyText
						setupyyText();

{
						/*
							Name, also bei
							z.b. char		*name;
							ist es name.
						*/
						attributeStr->name = yyStrCpy( yyText );

						//wieder nach SC_UNION
						BEGIN( SC_UNION );

						//den Namen einer Bezeichners in %union erkannt
						return( IDENT );
					}

						break;
					}

					//([[:blank:]]*)"/*"
					case 128:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//.
					case 132:
					{
						//setup yyText
						setupyyText();

{
					//Fehler
					cerr << "sslr: line " << yyLineno << ": Invalid character " << yyText << " after %prec!" << endl;

					//weiter analysieren
					BEGIN( SC_GRAMMAR );
				}

						break;
					}

					//([[:blank:]]+)
					case 133:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 134:
					{
						//setup yyText
						setupyyText();

{
					/* Terminal */
					BEGIN( SC_GRAMMAR );

					//zurückliefern
					attributeStr->name = yyStrCpy( yyText );
					return( TERMINAL );
				}

						break;
					}

					//([[:blank:]]+)
					case 137:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 138:
					{
						//setup yyText
						setupyyText();

/* neue Zeile */

						break;
					}

					//"!"
					case 139:
					{
						//setup yyText
						setupyyText();

/* Alle Terminale, ausser den angegebenen */ return( NOT );

						break;
					}

					//"("
					case 140:
					{
						//setup yyText
						setupyyText();

/* bei der Negation, !, sind Klammern notwendig */ return( KLOPEN );

						break;
					}

					//")"
					case 141:
					{
						//setup yyText
						setupyyText();

/* bei der Negation, !, sind Klammern notwendig */ return( KLCLOSE );

						break;
					}

					//","
					case 142:
					{
						//setup yyText
						setupyyText();

/* Komma zum Trennen der Terminale in einer Fehleranweisung */ return( COMMA );

						break;
					}

					//[[:digit:]]+
					case 143:
					{
						//setup yyText
						setupyyText();

{
						/* Position des Punktes in einem LR-Item */
						attributeStr->integer = atoi( yyText );
						return( NUMBER );
					}

						break;
					}

					//":"
					case 144:
					{
						//setup yyText
						setupyyText();

/* Trenner */ return( DB );

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 145:
					case 158:
					case 160:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					{
						//setup yyText
						setupyyText();

{
					/* Terminal */
					attributeStr->name = yyStrCpy( yyText );
					return( TERMINAL );
				}

						break;
					}

					//"{"
					case 146:
					{
						//setup yyText
						setupyyText();

/* %error wird in geschweiften Klammer angegeben */ return( BOPEN );

						break;
					}

					//"}"
					case 147:
					{
						//setup yyText
						setupyyText();

{
					/* %error wird in geschweiften Klammer angegeben */
					BEGIN( SC_GRAMMAR );
					return( BCLOSE );
				}

						break;
					}

					//\"[^\n\"]*\"
					case 148:
					{
						//setup yyText
						setupyyText();

{
					/* die Fehlermeldung zu einer Fehlerangabe */
					char *tmp = yyStrCpy( yyText );

					//Anzahl zu kopierender Zeichen
					int	anz = strlen( tmp ) - 2;

					//entferne die Anführungszeichen im String
					char *tmp2 = strncpy( tmp, &tmp[1], anz );
					tmp2[anz] = 0;

					//zurückliefern
					attributeStr->name = tmp2;
					return( STRING );
				}

						break;
					}

					//([[:blank:]]*)"/*"
					case 149:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//([[:blank:]]*)"//".*
					case 150:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//"POP"
					case 151:
					{
						//setup yyText
						setupyyText();

/* Zustände vom Parse-Stack entfernen */ return( POP );

						break;
					}

					//"SEM"
					case 152:
					{
						//setup yyText
						setupyyText();

/* trotz des Fehlers weiter semantische Aktionen auswerten */ return( SEM );

						break;
					}

					//"EXIT"
					case 153:
					{
						//setup yyText
						setupyyText();

/* den Parse-Prozess stoppen */ return( EXIT );

						break;
					}

					//"SHIFT"
					case 154:
					{
						//setup yyText
						setupyyText();

/* ein Terminal schieben */ return( SHIFT );

						break;
					}

					//"DELETE"
					case 155:
					{
						//setup yyText
						setupyyText();

/* ein Terminal aus der Eingabe entfernen */ return( DELETE );

						break;
					}

					//"OVERREAD"
					case 156:
					{
						//setup yyText
						setupyyText();

/* Eingabe überlesen */ return( OVERREAD );

						break;
					}

					//.+
					case 184:
					case 186:
					{
						//setup yyText
						setupyyText();

{
				/*
					Im %definition-Teil eingerückte Zeilen werden unverändert ins erzeugte
					Header-File des Scanners übernommen. Mit ihnen kann man z.b. im %extension-Teil
					benutzte Variablen oder Funktionen deklarieren.
				*/
				insertUserDefHeader( yyText );
			}

						break;
					}

					//(\r?\n)
					case 185:
					{
						//setup yyText
						setupyyText();

{
				//wird später ins Header-File eingetragen
				insertUserDefHeader( yyText );

				//nach dem Lesen einer Zeile (die ja mit {NL} endet), wieder in den normalen Modus
				BEGIN( SC_DEFINITION );
			}

						break;
					}

					//.
					case 189:
					case 192:
					case 193:
					{
						//setup yyText
						setupyyText();

/* irgendein Zeichen, nicht \n */ yyMore();

						break;
					}

					//(\r?\n)
					case 190:
					{
						//setup yyText
						setupyyText();

yyMore();

						break;
					}

					//^"\\}"
					case 191:
					{
						//setup yyText
						setupyyText();

{
				/* das Ende von %include ist erreicht */
				char	*tmp = yyStrCpy( yyText );

				//merken
				incl = tmp;

				//zurück zu INITIAL
				BEGIN( INITIAL );
			}

						break;
					}

					//.|(\r?\n)
					case 196:
					case 198:
					case 199:
					{
						//setup yyText
						setupyyText();

/* jedes andere Zeichen merken */ yyMore();

						break;
					}

					//"\\}"
					case 197:
					{
						//setup yyText
						setupyyText();

{
					/* Ende der semantischen Aktion */
					BEGIN( SC_GRAMMAR );

					//Länge von yyText
					unsigned long l = getYYLeng();

					//Abschluss aus yyText entfernen
					yyText[l - 2] = 0;

					//übergeben
					attributeStr->name = yyStrCpy( yyText );

					//zurückgeben
					return( SEMACT );
				}

						break;
					}

					//.
					case 202:
					{
						//setup yyText
						setupyyText();

/* Zeichen anhängen */ yyMore();

						break;
					}

					//"<"
					case 203:
					{
						//setup yyText
						setupyyText();

/* Verschachtelungs-Level erhöhen */ scNest++; yyMore();

						break;
					}

					//">"
					case 204:
					{
						//setup yyText
						setupyyText();

{
			//Verschachtelungs-Level erniederigen
			scNest--;

			//> anhängen
			yyMore();

			//Ende?
			if( !scNest )
			{
				//ja, den Namen zurückliefern
				attributeStr->name = yyStrCpy( yyText );

				//SC setzen
				BEGIN( SC_UNION2 );

				//Typ erkannt
				return( TYPE );
			}
		}

						break;
					}


					default:
					{
						//unable to accept, backtracking or error
						if( lastAcceptingState >= 0 )
						{
							//set back to last accept position
							state = lastAcceptingState;
							pos = lastAcceptingPos;

#ifdef SSLEX_DEBUG
							//backtracking
							cout << "Backtracking, set new state " << state << "\n";
#endif
							//now accept with last accept position
							continue;
						}

						else
						{
							//error
							error( *startPos );

							//remove character
							pos++;
						}

						break;
					}
				}

				//setup some stuff
				yyDoBeforeRule();

				//exit while-loop
				break;

			}while( 1 );

			//Ende der Eingabe erreicht?
			if( pos == end )
				//Ja
				break;
		}
	}

	//call eof-rules
	return( endOfLine() );
}


void SSLEXScanner::yyDoBeforeRule( void )
{
	//set some stuff before a new rule is scanned

	//reset
	lastAcceptingState = -1;

	//base position for lexem
	startPos = pos;

	//are we at the beginning of a line?
	if( ( pos == basePos ) || ( pos[-1] == '\n' ) )
		//setup state
		state = setupState( baseState );

	else
		//base-State
		state = baseState;
}


void SSLEXScanner::error( uchar c )
{
	//simple error handling routine
	ulong		i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//did already an error occur in that sc?
	if( !err[i][c] )
	{
		//No, print an error message
		cerr << "line " << yyLineno << ": SC " << scName[i] << ": Illegal character " << transChar[c] << "!\n";

		//mark to avoid ever lasting loops
		err[i][c]++;
	}
}


void SSLEXScanner::setupYYLineno( char *beg, char *end )
{
	//setup yyLineno
	ulong	len = end - beg, i;
	int		nl = 0;

	//count newlines
	for( i = 0; i < len; i++ )
	{
		//newline?
		if( beg[i] == '\n' )
			nl++;
	}

	//add to yyLineno
	yyLineno += nl;
}


void SSLEXScanner::setupyyText( void )
{
	//insert text in yytext
	ulong	len;
	char	*tmp;

	//reg. expression one-character?
	if( pos == startPos )
		//yes, move to next character
		pos++;

	//get length of lexem
	yyLeng = pos - startPos;

	//concatenate token? (yyMore)
	if( concatenate == true )
	{
		//yes, append
		len = strlen( yyText );

		//enough space?
		if( yyTextLen <= ( yyLeng + len ) )
		{
			//extend memory

			//fix yyTextLen
			yyTextLen = yyLeng + len;

			//get enough memory für lexem
			tmp = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );

			//copy string
			strcpy( tmp, yyText );

			//release memory
			if( yyText )
				delete[] ( yyText );

			//copy adress
			yyText = tmp;
		}

		//append
		strncat( yyText, startPos, yyLeng );

		//zero
		yyText[yyLeng + len] = 0;

		//set up yyLeng
		yyLeng += len;

		//next time we want to set up yyText as usual
		concatenate = false;
	}

	else
	{
		//enough space?
		if( yyTextLen <= yyLeng )
		{
			//extend memory
			if( yyText )
				delete[] ( yyText );

			//fix yyTextLen
			yyTextLen = yyLeng;

			//get enough memory für lexem
			yyText = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );
		}

		//insert
		strncpy( yyText, startPos, yyLeng );

		//end with zere
		yyText[yyLeng] = 0;
	}

	//setup yyLineno
	setupYYLineno( startPos, pos );
}


ulong SSLEXScanner::setupState( ulong baseState )
{
	//setup state for begin-of-line-rules
	ulong	state = baseState, i;

	//test if the current state is valid
	switch( baseState )
	{
		case INITIAL:
		case SC_DEFINITION:
		case SC_GRAMMAR:
		case SC_COMMENT:
		case SC_UNION:
		case SC_UNION2:
		case SC_PREC:
		case SC_ERROR:
		case SC_CODEBLOCK:
		case SC_INCLUDE:
		case SC_SEMACT:
		case SC_UNION_NEST:
		{
			//it is right the next state;
			state++;
			break;
		}

		default:
		{
			//ups, unknown start condition
			cerr << "SSLEXScanner::setupState: Line " << yyLineno << ": Unknown start condition!\n";
			exit( 1 );
		}
	}

#ifdef SSLEX_DEBUG
	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//print debugging information
	cout << "switch to " << scName[i] << "\n";
#endif

	//return state
	return( state );
}


void SSLEXScanner::setStartCondition( ulong state )
{
	//set a new start condition
	switch( state )
	{
		case INITIAL:
		{
			//set new start condition
			baseState = INITIAL;
			break;
		}

		case SC_DEFINITION:
		{
			//set new start condition
			baseState = SC_DEFINITION;
			break;
		}

		case SC_GRAMMAR:
		{
			//set new start condition
			baseState = SC_GRAMMAR;
			break;
		}

		case SC_COMMENT:
		{
			//set new start condition
			baseState = SC_COMMENT;
			break;
		}

		case SC_UNION:
		{
			//set new start condition
			baseState = SC_UNION;
			break;
		}

		case SC_UNION2:
		{
			//set new start condition
			baseState = SC_UNION2;
			break;
		}

		case SC_PREC:
		{
			//set new start condition
			baseState = SC_PREC;
			break;
		}

		case SC_ERROR:
		{
			//set new start condition
			baseState = SC_ERROR;
			break;
		}

		case SC_CODEBLOCK:
		{
			//set new start condition
			baseState = SC_CODEBLOCK;
			break;
		}

		case SC_INCLUDE:
		{
			//set new start condition
			baseState = SC_INCLUDE;
			break;
		}

		case SC_SEMACT:
		{
			//set new start condition
			baseState = SC_SEMACT;
			break;
		}

		case SC_UNION_NEST:
		{
			//set new start condition
			baseState = SC_UNION_NEST;
			break;
		}


		default:
		{
			//unknown start condition
			cerr << "SSLEXScanner::setStartCondition: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore call
			break;
		}
	}
}


ulong SSLEXScanner::getYYLeng( void )
{
	//return length of yyText
	return( yyLeng );
}


ulong SSLEXScanner::getYYLineno( void )
{
	//return line number
	return( yyLineno );
}


char *SSLEXScanner::getYYText( void )
{
	//return yyText
	return( yyText );
}


char *SSLEXScanner::yyStrCpy( char *txt )
{
	//return txt in it's own memory
	ulong	len;
	char	*tmp;

	//length of txt
	len = strlen( txt );

	//get memory for txt
	tmp = new( char[len + 1] );

	//copy
	strcpy( tmp, txt );

	//zero
	tmp[len] = 0;

	//return
	return( tmp );
}


void SSLEXScanner::yyLess( int n )
{
	//returns all but the first n characters of yyText back to the input

	//check
	if( ( n < 0 ) || ( n > yyLeng ) )
	{
		//bad n
		cerr << "SSLEXScanner::yyLess: Line " << yyLineno << ": Bad argument!\n";

		//ignore
		return;
	}

	//zero
	yyText[n] = 0;

	//return to input spring
	pos -= ( yyLeng - n );
}


void SSLEXScanner::yyPushState( ulong newState )
{
	/*
		Pushes the current start condition onto the top of the start condition stack
		and switches to newState as though you have used BEGIN( newState ).
	*/

	//enough memory
	if( scStackPos == scStackSize )
		//enlarge start condition stack
		enlargeSCStack();

	//put on stack
	scStack[scStackPos++] = baseState;

	//switch to new state
	BEGIN( newState );
}


void SSLEXScanner::yyPopState( void )
{
	//pops the top of the start condition stack and switches to it

	//underflow?
	if( scStackPos <= 0 )
		//error
		cerr << "SSLEXScanner::yyPopState: Line " << yyLineno << ": Start condition stack underflow!\n";

	else
	{
		//get new SC state
		ulong	newState = scStack[--scStackPos];

		//switch to it
		BEGIN( newState );

		//set new state
		state = newState;
	}
}


ulong SSLEXScanner::yyTopState( void )
{
	//returns the top of the start condition stack without altering its contents
	return( scStack[scStackPos - 1] );
}


void SSLEXScanner::enlargeSCStack( void )
{
	//enlarge start condition stack
	ulong	*tmp;

	//get enough memory
	tmp = new( ulong[scStackSize + SCStackSize] );

	//copy old content
	memcpy( tmp, scStack, sizeof( ulong ) * scStackSize );

	//free old memory?
	if( scStack )
		//yes
		delete[] ( scStack );

	//set new adress
	scStack = tmp;

	//add size
	scStackSize += SCStackSize;
}


void SSLEXScanner::yyUnput( unsigned char c )
{
	//puts the character c back to the input stream
	ulong	len = basePosLength++;
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + 2] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now insert c
	txt[diff] = c;

	//append rest of the input
	memcpy( &txt[diff + 1], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + 1] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + 1];

	//set new beginning
	basePos = txt;
}


void SSLEXScanner::yyUnput( char *str )
{
	//puts the string str back to the input stream
	ulong	len = basePosLength, strLen = strlen( str );
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + strLen + 1] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now append str
	strcpy( &txt[diff], str );

	//append rest of the input
	memcpy( &txt[strLen + diff], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + strLen] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + strLen + 1];

	//set new beginning
	basePos = txt;

	//correct basePosLength
	basePosLength += strLen;
}


char SSLEXScanner::yyInput( void )
{
	//return the next character to be scanned
	return( *pos++ );
}


#ifdef SSLEX_DEBUG
void SSLEXScanner::mainDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char			tmp[200], *transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//current line
	cout << endl << "current line: " << getYYLineno() << endl;

	//print the next 40 chars of the input
	txtFilter( pos, tmp, 40 );
	cout << "current pos: " << tmp << endl;

	//current SC
	cout << "current start condition: " << scName[i] << endl;

	//current state
	cout << "current state: " << state << endl;

	//current character
	cout << "current character: " << transChar[c] << endl;

	//print assocciated regular expression
	cout << "associated regular expressions:" << endl;

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << endl;

	//print ssLexTable
	cout << "ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << endl << endl;
}


void SSLEXScanner::shiftDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//shift?
	cout << "shift ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << "\n";

	//accepting state?
	if( ssLexAccept[state] )
		//yes
		cout << "ssLexAccept[" << state << "] = " << ssLexAccept[state] << " -> " << acceptRegText[ssLexAccept[state]] << "\n";

	//lookahead state?
	if( ssLexLA[state] )
		//yes
		cout << "lookahead state\n";

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::acceptDebug( void )
{
	//print debugging information

	//accept?
	if( ssLexAccept[state] )
		//yes
		cout << "accepting with " << acceptRegText[ssLexAccept[state]] << "\n";

	else
		//backtrack
		cout << "backtracking to state " << lastAcceptingState << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::txtFilter( char *from, char *to, ulong cnt )
{
	//copy cnt bytes from from to to, but transform escape sequences into
	//readable text form
	ulong	i;
	char	c, tmp[10];

	//init
	*to = 0;

	//as long as there is another char
	for( i = 0; i < cnt; i++ )
	{
		//get char
		c = *from++;

		//is it printable?
		if( !isprint( c ) )
		{
			//transform into readable
			switch( c )
			{
				//newline?
				case '\n':
				{
					//newline
					strcat( to, "\\n" );
					break;
				}

				//Backspace
				case '\b':
				{
					//Backspace
					strcat( to, "\\b" );
					break;
				}

				//Linefeed
				case '\f':
				{
					//Linefeed
					strcat( to, "\\f" );
					break;
				}

				//carriage return
				case '\r':
				{
					//carriage return
					strcat( to, "\\r" );
					break;
				}

				//Tabulator
				case '\t':
				{
					//Tabulator
					strcat( to, "\\t" );
					break;
				}

#if __STDC__
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\a" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\v" );
					break;
				}
#else
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\007" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\013" );
					break;
				}
#endif

				default:
				{
					//neither of the above
					sprintf( tmp, "%x", c );

					//append
					strcat( to, tmp );
				}
			}
		}

		else
		{
			//yes, printable
			sprintf( tmp, "%c", c );

			//append
			strcat( to, tmp );
		}
	}
}
#endif

int SSLEXScanner::endOfLine( void )
{
	//call eof-rules

	//action depends on start condition
	switch( baseState )
	{
		case INITIAL:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_DEFINITION:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_GRAMMAR:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_COMMENT:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_UNION:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_UNION2:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_PREC:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_ERROR:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_CODEBLOCK:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_INCLUDE:
		{
{
				//%include ist nicht korrekt abgeschlossen
				cerr << "sslr: line " << yyLineno << ": Unexpected end of file in %include!" << endl;
			}


		}

		case SC_SEMACT:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_UNION_NEST:
		{
			//default action
			yyTerminate();

			break;
		}


		default:
		{
			//Unknown start condition
			cerr << "SSLEXScanner::endOfLine: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore
			break;
		}
	}

	//this should never be executed!
	return( 0 );
}



	//eigene Erweiterungen und Hilfsroutinen

void SSLEXScanner::init( void )
{
	//initialize user defined variables
	unionTxt = 0L;
	incl = 0L;
	extension = 0L;
	userDefHeader = 0L;
	userDefHeaderAnz = 0;
}


void SSLEXScanner::deinit( void )
{
	//deinitialize user defined variables
	int	i;

	if( unionTxt )
		delete[] ( unionTxt );

	if( incl )
		delete[] ( incl );

	if( extension )
		delete[] ( extension );


	//user-def. Header-Angaben freigeben?
	if( userDefHeader )
	{
		//alle Zeilen
		for( i = 0; i < userDefHeaderAnz; i++ )
			delete[] ( userDefHeader[i] );

		delete[] ( userDefHeader );
	}
}


void SSLEXScanner::scanUnion( void )
{
	//%union scannen
	ulong	size;
	char	*base, *myPos = pos;

	//die öffnende Klammer überlesen
	while( *myPos != '{' )
		//löschen
		myPos++;

	//löschen
	myPos++;

	//Position merken
	base = myPos;

	//nun bis zur schließenden Klammer
	while( !( ( *myPos == '}' ) && ( myPos[1] == '\n' ) ) )
	{
		//Überlauf?
		if( myPos >= end )
		{
			//Fehler
			cerr << "sslr: line " << yyLineno << ": Missing } in %union!" << endl;
			exit( 1 );
		}

		myPos++;
	}

	//extrahieren
	size = myPos - base + 1;

	//Speicher anfordern
	unionTxt = new( char[size] );

	//copieren
	strncpy( unionTxt, base, size );

	//abschließen
	unionTxt[size - 1] = 0;
}


char *SSLEXScanner::getInclude( void )
{
	//%include-Angaben liefern
	return( incl );
}


void SSLEXScanner::scanExtension( void )
{
	//%extension-Angabe scannen
	ulong	size;
	char	*base;

	//aktuelle Position im Text merken
	base = pos;

	//der Abschluss muss am Anfang einer Zeile stehen
	while( !( ( pos[-1] == '\n' ) && ( pos[0] == '\\' ) && ( pos[1] == '}' ) ) )
	{
		//Überlauf?
		if( pos >= end )
		{
			//Fehler
			cerr << "sslex: line " << yyLineno << ": Missing } in %extension!" << endl;
			exit( 1 );
		}

		pos++;
	}

	//löschen
	pos += 2;

	//extrahieren
	size = pos - base + 1;

	//Speicher anfordern
	extension = new( char[size] );

	//copieren
	strncpy( extension, base, size - 1 );

	//abschließen
	extension[size - 1] = 0;
}


char *SSLEXScanner::getExtension( void )
{
	//%extension-Angaben liefern
	return( extension );
}


void SSLEXScanner::insertUserDefHeader( char *str )
{
	/*
		Alle eingerückten Zeilen in %definition werden in das Header-File des erzeugten
		Parsers eingefügt. Dies nutzt man, um in den Aktion-Teilen benutzte Variablen
		zu deklarieren.
	*/
	char	**tmp, *copy;

	//genug Speicher anfordern
	tmp = new( char *[userDefHeaderAnz + 1] );

	//alte Zeiger kopieren
	memcpy( tmp, userDefHeader, sizeof( char * ) * userDefHeaderAnz );

	//alten Speicher freigeben?
	if( userDefHeader )
		delete[] ( userDefHeader );

	//Zeiger umkopieren
	userDefHeader = tmp;

	//string kopieren
	copy = yyStrCpy( str );

	//eintragen
	userDefHeader[userDefHeaderAnz++] = copy;
}


char **SSLEXScanner::getUserDefHeader( int &anz )
{
	/*
		Alle eingerückten Zeilen in %definition werden in das Header-File des erzeugten
		Parsers eingefügt. Dies nutzt man, um in den Aktion-Teilen benutzte Variablen
		zu deklarieren.
	*/

	//Anzahl der Zeilen
	anz = userDefHeaderAnz;

	//zurückliefern
	return( userDefHeader );
}


