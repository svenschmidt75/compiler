/***************************************************************************
                          sslexscanner.cpp  -  description
                             -------------------
    copyright            : (C) 2002 by Sven Schmidt
    email                : s.schmidt@lboro.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "sslexscanner.h"
#include <iostream>


/****************************
* This is the debug-version *
****************************/




//Define macro ECHO
#define ECHO	cout << yyText

//set a new start condition in user-defined action
#define BEGIN	setStartCondition

//current start condition
#define YY_START	baseState

//yyTerminate
#define yyTerminate()	return( ACCEPT )


//concatenate lexem
#define yyMore()	concatenate = true


//Size of start condition stack
#define SCStackSize	100


//enlargement for yyText if neccesary
#define SSLEX_YYTEXTSIZE	(8*1024)



	//initialize user defined variables
	#define SSLEX_INIT


//Transition-Table
long SSLEXScanner::ssLexTable[SSLEX_STATE][CCLWIDTH] =
{
/*
  \0,  \1,  \2,  \3,  \4,  \5,  \6,  \a,  \b,  \t,  \n,  \v,  \f,  \r,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,
    ,   !,   ",   #,   $,   %,   &,   ',   (,   ),   *,   +,   ,,   -,   .,   /,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   :,   ;,   <,   =,   >,   ?,
   @,   A,   B,   C,   D,   E,   F,   G,   H,   I,   J,   K,   L,   M,   N,   O,   P,   Q,   R,   S,   T,   U,   V,   W,   X,   Y,   Z,   [,   \,   ],   ^,   _,
   `,   a,   b,   c,   d,   e,   f,   g,   h,   i,   j,   k,   l,   m,   n,   o,   p,   q,   r,   s,   t,   u,   v,   w,   x,   y,   z,   {,   |,   },   ~, DEL
*/

//Startcondition: INITIAL
/* 0 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,   3,  -1,  -1,  48,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,   4,  -1,  -1,  -1,   5,   6,  -1,   7,   8,   9,  10,  11,  12,  -1,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  -1,  15,  16,  17,  18,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  20,  19,
  -1,  19,  75,  76,  51,  77,  83,  19,  19,  53,  19,  19,  78,  19,  19,  19,  19,  19,  19,  84,  79,  19,  19,  85,  19,  19,  19,  21,  22,  23,  24,  -1
},
/* 1 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  49,  45,  -1,  -1,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  49,   4,  -1,  -1,  -1,   5,   6,  -1,   7,   8,   9,  10,  11,  12,  -1,  50,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  -1,  15,  16,  17,  18,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  20,  19,
  -1,  19,  75,  76,  51,  77,  83,  19,  19,  53,  19,  19,  78,  19,  19,  19,  19,  19,  19,  84,  79,  19,  19,  85,  19,  19,  19,  21,  22,  23,  24,  -1
},
/* 2 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
   2,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 3 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 4 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  25,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 5 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 6 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 7 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 8 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 9 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 10 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 11 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 12 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 13 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 14 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  66,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 15 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 16 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  28,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 17 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  29,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 18 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  30,  31,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 19 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 20 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 21 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 22 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  -1,  -1,  -1
},
/* 23 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 24 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 25 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 26 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 27 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 28 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 29 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 30 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 31 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 32 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 33 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 34 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 35 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  66,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 36 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 37 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 38 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 39 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 40 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 41 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 42 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 43 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 44 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 45 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 46 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 47 */
{
  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  -1,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,
  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47
},
/* 48 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 49 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  49,  45,  -1,  -1,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  49,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 50 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  -1,  -1,  -1,  -1,  47,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 51 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  32,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 52 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 53 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  33,  19,  19,  19,  19,  19,  19,  19,  54,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 54 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  36,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 55 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 56 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  37,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 57 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  38,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 58 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  39,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 59 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  40,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 60 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  41,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 61 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  42,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 62 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  43,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 63 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  44,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 64 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  56,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 65 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  65,  65,  65,  65,  65,  65,  65,  65,  65,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 66 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  68,  -1,  68,  -1,  -1,  65,  65,  65,  65,  65,  65,  65,  65,  65,  65,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 67 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  57,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 68 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  65,  65,  65,  65,  65,  65,  65,  65,  65,  65,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 69 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  58,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 70 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  59,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 71 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  60,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 72 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  61,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 73 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  62,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 74 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  63,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 75 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  64,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 76 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  67,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 77 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  69,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 78 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  70,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 79 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  71,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 80 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  72,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 81 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  73,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 82 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  74,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 83 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  80,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 84 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  81,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},
/* 85 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  19,
  -1,  19,  19,  19,  19,  19,  19,  19,  82,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  -1,  -1,  -1,  -1,  -1
},

//Startcondition: SC_COMMENT
/* 86 */
{
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  89,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  90,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88
},
/* 87 */
{
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  89,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  90,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88
},
/* 88 */
{
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  89,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  -1,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,
  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88
},
/* 89 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 90 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  91,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
},
/* 91 */
{
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1
}

};

//Accept-Array
ulong SSLEXScanner::ssLexAccept[SSLEX_STATE] =
{
/* 0 */
0,
/* 1 */
0,
/* 2 */

//Line 146: ([[:blank:]]+)
2,
/* 3 */

//Line 148: (\\r?\\n)
3,
/* 4 */

//Line 114: \"!\"
4,
/* 5 */

//Line 127: \"%\"
5,
/* 6 */

//Line 115: \"&\"
6,
/* 7 */

//Line 129: \"(\"
7,
/* 8 */

//Line 130: \")\"
8,
/* 9 */

//Line 125: \"*\"
9,
/* 10 */

//Line 123: \"+\"
10,
/* 11 */

//Line 92: \",\"
11,
/* 12 */

//Line 124: \"-\"
12,
/* 13 */

//Line 126: \"/\"
13,
/* 14 */

//Line 132: ([[:digit:]])+
14,
/* 15 */

//Line 93: \";\"
15,
/* 16 */

//Line 106: \"<\"
16,
/* 17 */

//Line 101: \"=\"
17,
/* 18 */

//Line 107: \">\"
18,
/* 19 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
19,
/* 20 */

//Line 117: \"^\"
20,
/* 21 */

//Line 103: \"{\"
21,
/* 22 */

//Line 116: \"|\"
22,
/* 23 */

//Line 104: \"}\"
23,
/* 24 */

//Line 118: \"~\"
24,
/* 25 */

//Line 111: \"!=\"
25,
/* 26 */

//Line 112: \"&&\"
26,
/* 27 */

//Line 120: \"<<\"
27,
/* 28 */

//Line 108: \"<=\"
28,
/* 29 */

//Line 110: \"==\"
29,
/* 30 */

//Line 109: \">=\"
30,
/* 31 */

//Line 121: \">>\"
31,
/* 32 */

//Line 87: \"do\"
32,
/* 33 */

//Line 84: \"if\"
33,
/* 34 */

//Line 113: \"||\"
34,
/* 35 */

//Line 140: (([[:digit:]])+(\\.([[:digit:]])+)?(E[+\\-]?([[:digit:]])+)?)
35,
/* 36 */

//Line 78: \"int\"
36,
/* 37 */

//Line 79: \"bool\"
37,
/* 38 */

//Line 80: \"char\"
38,
/* 39 */

//Line 85: \"else\"
39,
/* 40 */

//Line 81: \"long\"
40,
/* 41 */

//Line 89: \"true\"
41,
/* 42 */

//Line 90: \"false\"
42,
/* 43 */

//Line 82: \"short\"
43,
/* 44 */

//Line 86: \"while\"
44,
/* 45 */

//Line 144: ^([[:blank:]]*)(\\r?\\n)
45,
/* 46 */

//Line 72: ^\"/*\"
46,
/* 47 */

//Line 70: ^\"//\".*
47,
/* 48 */
0,
/* 49 */

//Line 146: ([[:blank:]]+)
49,
/* 50 */

//Line 126: \"/\"
50,
/* 51 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
51,
/* 52 */
0,
/* 53 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
53,
/* 54 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
54,
/* 55 */
0,
/* 56 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
56,
/* 57 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
57,
/* 58 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
58,
/* 59 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
59,
/* 60 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
60,
/* 61 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
61,
/* 62 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
62,
/* 63 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
63,
/* 64 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
64,
/* 65 */

//Line 140: (([[:digit:]])+(\\.([[:digit:]])+)?(E[+\\-]?([[:digit:]])+)?)
65,
/* 66 */
0,
/* 67 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
67,
/* 68 */
0,
/* 69 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
69,
/* 70 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
70,
/* 71 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
71,
/* 72 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
72,
/* 73 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
73,
/* 74 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
74,
/* 75 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
75,
/* 76 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
76,
/* 77 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
77,
/* 78 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
78,
/* 79 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
79,
/* 80 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
80,
/* 81 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
81,
/* 82 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
82,
/* 83 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
83,
/* 84 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
84,
/* 85 */

//Line 95: (([[:alpha:]_][[:alnum:]_-]*))
85,
/* 86 */
0,
/* 87 */
0,
/* 88 */

//Line 161: [^*\\n]+
88,
/* 89 */

//Line 162: [^*\\n]*(\\r?\\n)
89,
/* 90 */

//Line 160: \"*\"
90,
/* 91 */

//Line 153: \"*/\"
91
};


#ifdef SSLEX_DEBUG

//Structure with regular expressions in text form
char *SSLEXScanner::regText[regTextSize] = {
"^\"//\".*",	// ^"//".*, line 70
"^\"/*\"",	// ^"/*", line 72
"\"int\"",	// "int", line 78
"\"bool\"",	// "bool", line 79
"\"char\"",	// "char", line 80
"\"long\"",	// "long", line 81
"\"short\"",	// "short", line 82
"\"if\"",	// "if", line 84
"\"else\"",	// "else", line 85
"\"while\"",	// "while", line 86
"\"do\"",	// "do", line 87
"\"true\"",	// "true", line 89
"\"false\"",	// "false", line 90
"\",\"",	// ",", line 92
"\";\"",	// ";", line 93
"(([[:alpha:]_][[:alnum:]_-]*))",	// (([[:alpha:]_][[:alnum:]_-]*)), line 95
"\"=\"",	// "=", line 101
"\"{\"",	// "{", line 103
"\"}\"",	// "}", line 104
"\"<\"",	// "<", line 106
"\">\"",	// ">", line 107
"\"<=\"",	// "<=", line 108
"\">=\"",	// ">=", line 109
"\"==\"",	// "==", line 110
"\"!=\"",	// "!=", line 111
"\"&&\"",	// "&&", line 112
"\"||\"",	// "||", line 113
"\"!\"",	// "!", line 114
"\"&\"",	// "&", line 115
"\"|\"",	// "|", line 116
"\"^\"",	// "^", line 117
"\"~\"",	// "~", line 118
"\"<<\"",	// "<<", line 120
"\">>\"",	// ">>", line 121
"\"+\"",	// "+", line 123
"\"-\"",	// "-", line 124
"\"*\"",	// "*", line 125
"\"/\"",	// "/", line 126
"\"%\"",	// "%", line 127
"\"(\"",	// "(", line 129
"\")\"",	// ")", line 130
"([[:digit:]])+",	// ([[:digit:]])+, line 132
"(([[:digit:]])+(\\.([[:digit:]])+)?(E[+\\-]?([[:digit:]])+)?)",	// (([[:digit:]])+(\.([[:digit:]])+)?(E[+\-]?([[:digit:]])+)?), line 140
"^([[:blank:]]*)(\\r?\\n)",	// ^([[:blank:]]*)(\r?\n), line 144
"([[:blank:]]+)",	// ([[:blank:]]+), line 146
"(\\r?\\n)",	// (\r?\n), line 148
"\"*/\"",	// "*/", line 153
"\"*\"",	// "*", line 160
"[^*\\n]+",	// [^*\n]+, line 161
"[^*\\n]*(\\r?\\n)"	// [^*\n]*(\r?\n), line 162
};


//Array with indices in regText
ulong SSLEXScanner::regTextIndex0[] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45 };
ulong SSLEXScanner::regTextIndex1[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 };
ulong SSLEXScanner::regTextIndex2[] = { 44 };
ulong SSLEXScanner::regTextIndex3[] = { 45 };
ulong SSLEXScanner::regTextIndex4[] = { 24, 27 };
ulong SSLEXScanner::regTextIndex5[] = { 38 };
ulong SSLEXScanner::regTextIndex6[] = { 25, 28 };
ulong SSLEXScanner::regTextIndex7[] = { 39 };
ulong SSLEXScanner::regTextIndex8[] = { 40 };
ulong SSLEXScanner::regTextIndex9[] = { 36 };
ulong SSLEXScanner::regTextIndex10[] = { 34 };
ulong SSLEXScanner::regTextIndex11[] = { 13 };
ulong SSLEXScanner::regTextIndex12[] = { 35 };
ulong SSLEXScanner::regTextIndex13[] = { 37 };
ulong SSLEXScanner::regTextIndex14[] = { 41, 42 };
ulong SSLEXScanner::regTextIndex15[] = { 14 };
ulong SSLEXScanner::regTextIndex16[] = { 19, 21, 32 };
ulong SSLEXScanner::regTextIndex17[] = { 16, 23 };
ulong SSLEXScanner::regTextIndex18[] = { 20, 22, 33 };
ulong SSLEXScanner::regTextIndex19[] = { 15 };
ulong SSLEXScanner::regTextIndex20[] = { 30 };
ulong SSLEXScanner::regTextIndex21[] = { 17 };
ulong SSLEXScanner::regTextIndex22[] = { 26, 29 };
ulong SSLEXScanner::regTextIndex23[] = { 18 };
ulong SSLEXScanner::regTextIndex24[] = { 31 };
ulong SSLEXScanner::regTextIndex25[] = { 24 };
ulong SSLEXScanner::regTextIndex26[] = { 25 };
ulong SSLEXScanner::regTextIndex27[] = { 32 };
ulong SSLEXScanner::regTextIndex28[] = { 21 };
ulong SSLEXScanner::regTextIndex29[] = { 23 };
ulong SSLEXScanner::regTextIndex30[] = { 22 };
ulong SSLEXScanner::regTextIndex31[] = { 33 };
ulong SSLEXScanner::regTextIndex32[] = { 10, 15 };
ulong SSLEXScanner::regTextIndex33[] = { 7, 15 };
ulong SSLEXScanner::regTextIndex34[] = { 26 };
ulong SSLEXScanner::regTextIndex35[] = { 42 };
ulong SSLEXScanner::regTextIndex36[] = { 2, 15 };
ulong SSLEXScanner::regTextIndex37[] = { 3, 15 };
ulong SSLEXScanner::regTextIndex38[] = { 4, 15 };
ulong SSLEXScanner::regTextIndex39[] = { 8, 15 };
ulong SSLEXScanner::regTextIndex40[] = { 5, 15 };
ulong SSLEXScanner::regTextIndex41[] = { 11, 15 };
ulong SSLEXScanner::regTextIndex42[] = { 12, 15 };
ulong SSLEXScanner::regTextIndex43[] = { 6, 15 };
ulong SSLEXScanner::regTextIndex44[] = { 9, 15 };
ulong SSLEXScanner::regTextIndex45[] = { 43, 45 };
ulong SSLEXScanner::regTextIndex46[] = { 1 };
ulong SSLEXScanner::regTextIndex47[] = { 0 };
ulong SSLEXScanner::regTextIndex48[] = { 45 };
ulong SSLEXScanner::regTextIndex49[] = { 43, 44 };
ulong SSLEXScanner::regTextIndex50[] = { 0, 1, 37 };
ulong SSLEXScanner::regTextIndex51[] = { 10, 15 };
ulong SSLEXScanner::regTextIndex52[] = { 42 };
ulong SSLEXScanner::regTextIndex53[] = { 2, 7, 15 };
ulong SSLEXScanner::regTextIndex54[] = { 2, 15 };
ulong SSLEXScanner::regTextIndex55[] = { 43, 45 };
ulong SSLEXScanner::regTextIndex56[] = { 3, 15 };
ulong SSLEXScanner::regTextIndex57[] = { 4, 15 };
ulong SSLEXScanner::regTextIndex58[] = { 8, 15 };
ulong SSLEXScanner::regTextIndex59[] = { 5, 15 };
ulong SSLEXScanner::regTextIndex60[] = { 11, 15 };
ulong SSLEXScanner::regTextIndex61[] = { 12, 15 };
ulong SSLEXScanner::regTextIndex62[] = { 6, 15 };
ulong SSLEXScanner::regTextIndex63[] = { 9, 15 };
ulong SSLEXScanner::regTextIndex64[] = { 3, 15 };
ulong SSLEXScanner::regTextIndex65[] = { 42 };
ulong SSLEXScanner::regTextIndex66[] = { 42 };
ulong SSLEXScanner::regTextIndex67[] = { 4, 15 };
ulong SSLEXScanner::regTextIndex68[] = { 42 };
ulong SSLEXScanner::regTextIndex69[] = { 8, 15 };
ulong SSLEXScanner::regTextIndex70[] = { 5, 15 };
ulong SSLEXScanner::regTextIndex71[] = { 11, 15 };
ulong SSLEXScanner::regTextIndex72[] = { 12, 15 };
ulong SSLEXScanner::regTextIndex73[] = { 6, 15 };
ulong SSLEXScanner::regTextIndex74[] = { 9, 15 };
ulong SSLEXScanner::regTextIndex75[] = { 3, 15 };
ulong SSLEXScanner::regTextIndex76[] = { 4, 15 };
ulong SSLEXScanner::regTextIndex77[] = { 8, 15 };
ulong SSLEXScanner::regTextIndex78[] = { 5, 15 };
ulong SSLEXScanner::regTextIndex79[] = { 11, 15 };
ulong SSLEXScanner::regTextIndex80[] = { 12, 15 };
ulong SSLEXScanner::regTextIndex81[] = { 6, 15 };
ulong SSLEXScanner::regTextIndex82[] = { 9, 15 };
ulong SSLEXScanner::regTextIndex83[] = { 12, 15 };
ulong SSLEXScanner::regTextIndex84[] = { 6, 15 };
ulong SSLEXScanner::regTextIndex85[] = { 9, 15 };
ulong SSLEXScanner::regTextIndex86[] = { 46, 47, 48, 49 };
ulong SSLEXScanner::regTextIndex87[] = { 46, 47, 48, 49 };
ulong SSLEXScanner::regTextIndex88[] = { 48, 49 };
ulong SSLEXScanner::regTextIndex89[] = { 49 };
ulong SSLEXScanner::regTextIndex90[] = { 46, 47 };
ulong SSLEXScanner::regTextIndex91[] = { 46 };


//Structure with debugging information
SSLEXScanner::SSLEXDebugStr SSLEXScanner::debugStr[SSLEX_STATE] = {
{ 0, regTextIndex0, 43 },
{ 1, regTextIndex1, 46 },
{ 2, regTextIndex2, 1 },
{ 3, regTextIndex3, 1 },
{ 4, regTextIndex4, 2 },
{ 5, regTextIndex5, 1 },
{ 6, regTextIndex6, 2 },
{ 7, regTextIndex7, 1 },
{ 8, regTextIndex8, 1 },
{ 9, regTextIndex9, 1 },
{ 10, regTextIndex10, 1 },
{ 11, regTextIndex11, 1 },
{ 12, regTextIndex12, 1 },
{ 13, regTextIndex13, 1 },
{ 14, regTextIndex14, 2 },
{ 15, regTextIndex15, 1 },
{ 16, regTextIndex16, 3 },
{ 17, regTextIndex17, 2 },
{ 18, regTextIndex18, 3 },
{ 19, regTextIndex19, 1 },
{ 20, regTextIndex20, 1 },
{ 21, regTextIndex21, 1 },
{ 22, regTextIndex22, 2 },
{ 23, regTextIndex23, 1 },
{ 24, regTextIndex24, 1 },
{ 25, regTextIndex25, 1 },
{ 26, regTextIndex26, 1 },
{ 27, regTextIndex27, 1 },
{ 28, regTextIndex28, 1 },
{ 29, regTextIndex29, 1 },
{ 30, regTextIndex30, 1 },
{ 31, regTextIndex31, 1 },
{ 32, regTextIndex32, 2 },
{ 33, regTextIndex33, 2 },
{ 34, regTextIndex34, 1 },
{ 35, regTextIndex35, 1 },
{ 36, regTextIndex36, 2 },
{ 37, regTextIndex37, 2 },
{ 38, regTextIndex38, 2 },
{ 39, regTextIndex39, 2 },
{ 40, regTextIndex40, 2 },
{ 41, regTextIndex41, 2 },
{ 42, regTextIndex42, 2 },
{ 43, regTextIndex43, 2 },
{ 44, regTextIndex44, 2 },
{ 45, regTextIndex45, 2 },
{ 46, regTextIndex46, 1 },
{ 47, regTextIndex47, 1 },
{ 48, regTextIndex48, 1 },
{ 49, regTextIndex49, 2 },
{ 50, regTextIndex50, 3 },
{ 51, regTextIndex51, 2 },
{ 52, regTextIndex52, 1 },
{ 53, regTextIndex53, 3 },
{ 54, regTextIndex54, 2 },
{ 55, regTextIndex55, 2 },
{ 56, regTextIndex56, 2 },
{ 57, regTextIndex57, 2 },
{ 58, regTextIndex58, 2 },
{ 59, regTextIndex59, 2 },
{ 60, regTextIndex60, 2 },
{ 61, regTextIndex61, 2 },
{ 62, regTextIndex62, 2 },
{ 63, regTextIndex63, 2 },
{ 64, regTextIndex64, 2 },
{ 65, regTextIndex65, 1 },
{ 66, regTextIndex66, 1 },
{ 67, regTextIndex67, 2 },
{ 68, regTextIndex68, 1 },
{ 69, regTextIndex69, 2 },
{ 70, regTextIndex70, 2 },
{ 71, regTextIndex71, 2 },
{ 72, regTextIndex72, 2 },
{ 73, regTextIndex73, 2 },
{ 74, regTextIndex74, 2 },
{ 75, regTextIndex75, 2 },
{ 76, regTextIndex76, 2 },
{ 77, regTextIndex77, 2 },
{ 78, regTextIndex78, 2 },
{ 79, regTextIndex79, 2 },
{ 80, regTextIndex80, 2 },
{ 81, regTextIndex81, 2 },
{ 82, regTextIndex82, 2 },
{ 83, regTextIndex83, 2 },
{ 84, regTextIndex84, 2 },
{ 85, regTextIndex85, 2 },
{ 86, regTextIndex86, 4 },
{ 87, regTextIndex87, 4 },
{ 88, regTextIndex88, 2 },
{ 89, regTextIndex89, 1 },
{ 90, regTextIndex90, 2 },
{ 91, regTextIndex91, 1 }
};


//Array with regular expression at accepting
char *SSLEXScanner::acceptRegText[SSLEX_STATE] = { 0L,
0L,
"([[:blank:]]+)",
"(\\r?\\n)",
"\"!\"",
"\"%\"",
"\"&\"",
"\"(\"",
"\")\"",
"\"*\"",
"\"+\"",
"\",\"",
"\"-\"",
"\"/\"",
"([[:digit:]])+",
"\";\"",
"\"<\"",
"\"=\"",
"\">\"",
"(([[:alpha:]_][[:alnum:]_-]*))",
"\"^\"",
"\"{\"",
"\"|\"",
"\"}\"",
"\"~\"",
"\"!=\"",
"\"&&\"",
"\"<<\"",
"\"<=\"",
"\"==\"",
"\">=\"",
"\">>\"",
"\"do\"",
"\"if\"",
"\"||\"",
"(([[:digit:]])+(\\.([[:digit:]])+)?(E[+\\-]?([[:digit:]])+)?)",
"\"int\"",
"\"bool\"",
"\"char\"",
"\"else\"",
"\"long\"",
"\"true\"",
"\"false\"",
"\"short\"",
"\"while\"",
"^([[:blank:]]*)(\\r?\\n)",
"^\"/*\"",
"^\"//\".*",
0L,
"([[:blank:]]+)",
"\"/\"",
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:digit:]])+(\\.([[:digit:]])+)?(E[+\\-]?([[:digit:]])+)?)",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
"(([[:alpha:]_][[:alnum:]_-]*))",
0L,
0L,
"[^*\\n]+",
"[^*\\n]*(\\r?\\n)",
"\"*\"",
"\"*/\""

};
#endif

//name of the start conditions
char *SSLEXScanner::scName[] = {
	"INITIAL", "NL_INITIAL",
	"SC_COMMENT", "NL_SC_COMMENT"
};

//Table for error handling
int SSLEXScanner::err[scSize][CCLWIDTH] = { 0 };



//state of start conditions
ulong SSLEXScanner::scIndex[] = {
	0, //INITIAL
	1, //NL_INITIAL
	86, //SC_COMMENT
	87 //NL_SC_COMMENT
};


SSLEXScanner::SSLEXScanner( char *data, ulong size )
{
	//initialize SSLEX

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::SSLEXScanner: No data!\n";

		//exit
		exit( 1 );
	}

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//init with SSLEX_YYTEXTSIZE bytes
	yyTextLen = SSLEX_YYTEXTSIZE;
	yyText = new( char[yyTextLen + 1] );
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackSize = 0;
	scStackPos = 0;
	scStack = 0L;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


SSLEXScanner::~SSLEXScanner()
{
	//free memory
	if( yyText )
		delete[] ( yyText );

	if( scStack )
		delete[] ( scStack );

	//free old text
	if( basePos )
		delete[] ( basePos );


#ifdef SSLEX_INIT

	//deinizialize user defined variables
	deinit();
#endif
}


void SSLEXScanner::reset( void )
{
	//reset the whole scanner

	//start position
	pos = basePos;

	//end of scanning
	end = pos + basePosLength;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//start-condition INITIAL
	state = baseState = INITIAL;

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


void SSLEXScanner::reset( char *data, ulong size )
{
	//reset the whole scanner and give him new input

	//no data?
	if( !data )
	{
		//error
		cerr << "sslex: SSLEXScanner::reset: No data!\n";

		//exit
		exit( 1 );
	}

	//free old text
	if( basePos )
		delete[] ( basePos );

	//save length of text
	basePosLength = size;

	//copy text to analyze due to unput
	pos = basePos = new( char[basePosLength + 1] );

	//copy to analyze string. This is nesessary as there are zero-bytes allowed in scanning
	//text. But this would couse strlen to return only the length till the next zero-byte!
	memcpy( pos, data, sizeof( char ) * basePosLength );
	pos[basePosLength] = 0;

	//end of scanning
	end = pos + basePosLength;

	//start-condition INITIAL
	state = baseState = INITIAL;

	//need memory for yyText?
	if( !yyText )
	{
		//init with SSLEX_YYTEXTSIZE bytes
		yyTextLen = SSLEX_YYTEXTSIZE;
		yyText = new( char[yyTextLen + 1] );
	}

	//no token
	yyLeng = 0;

	//SSLEX automatically counts line numbers
	yyLineno = 1;

	//last accepting state
	lastAcceptingState = -1;

	//do not concatenate token
	concatenate = false;

	//no start conditions on stack
	scStackPos = 0;


#ifdef SSLEX_INIT

	//inizialize user defined variables
	init();
#endif
}


int SSLEXScanner::yyLex( SSLR_TYPE *attributeStr )
{
	//start scanning
	unsigned char	c;

	//Basis-Position für das Lexem
	startPos = pos;

	//setup some stuff
	yyDoBeforeRule();

	while( pos <= end )
	{
		//Zeichen
		c = *pos;

		//when we use a 7 bit scanner
		if( c > 127 )
		{
			//we need a 8 bit scanner
//			cerr << "SSLEXScanner::yyLex: Line " << yyLineno << ": You need a 8 bit scanner to match the character " << c << "!\n";

			//skip character
			pos++;
			continue;
		}

#ifdef SSLEX_DEBUG
		//print debugging information
		mainDebug( c );
#endif

		//schieben?
		if( ssLexTable[state][c] >= 0 )
		{

#ifdef SSLEX_DEBUG
			//print debugging information
			shiftDebug( c );
#endif

			//akzeptieren?
			if( ssLexAccept[state] )
			{
				//Ja, merken
				lastAcceptingState = state;
				lastAcceptingPos = pos;
			}

			//shift new state
			state = ssLexTable[state][c];

			//nächstes Zeichen
			pos++;
		}

		else
		{
			//akzeptieren
			do
			{

#ifdef SSLEX_DEBUG
				//print debugging information
				acceptDebug();
#endif

				switch( ssLexAccept[state] )
				{
					//([[:blank:]]+)
					case 2:
					case 49:
					{
						//setup yyText
						setupyyText();

/* Leerzeichen */

						break;
					}

					//(\r?\n)
					case 3:
					{
						//setup yyText
						setupyyText();

/* neue Zeile */

						break;
					}

					//"!"
					case 4:
					{
						//setup yyText
						setupyyText();

/* logisches not */ return( LOG_NOT );

						break;
					}

					//"%"
					case 5:
					{
						//setup yyText
						setupyyText();

/* Modulo */ return( MOD );

						break;
					}

					//"&"
					case 6:
					{
						//setup yyText
						setupyyText();

/* binäres und */ return( BIN_AND );

						break;
					}

					//"("
					case 7:
					{
						//setup yyText
						setupyyText();

/* Assoziativität */ return( KLOPEN );

						break;
					}

					//")"
					case 8:
					{
						//setup yyText
						setupyyText();

/* Assoziativität */ return( KLCLOSE );

						break;
					}

					//"*"
					case 9:
					{
						//setup yyText
						setupyyText();

/* Multiplikation */ return( MUL );

						break;
					}

					//"+"
					case 10:
					{
						//setup yyText
						setupyyText();

/* Addition */ return( ADD );

						break;
					}

					//","
					case 11:
					{
						//setup yyText
						setupyyText();

/* Komma */ return( COMMA );

						break;
					}

					//"-"
					case 12:
					{
						//setup yyText
						setupyyText();

/* Subtraktion */ return( SUB );

						break;
					}

					//"/"
					case 13:
					case 50:
					{
						//setup yyText
						setupyyText();

/* Division */ return( DIV );

						break;
					}

					//([[:digit:]])+
					case 14:
					{
						//setup yyText
						setupyyText();

{
						//eine Zahl zurückliefern
						attributeStr->_integer = atoi( yyText );

						//Zahl
						return( NUMBER );
					}

						break;
					}

					//";"
					case 15:
					{
						//setup yyText
						setupyyText();

/* Abschluss einer expression */ return( SEMIKOLON );

						break;
					}

					//"<"
					case 16:
					{
						//setup yyText
						setupyyText();

/* kleiner */ return( LESS );

						break;
					}

					//"="
					case 17:
					{
						//setup yyText
						setupyyText();

/* Zuweisung */ return( EQU );

						break;
					}

					//">"
					case 18:
					{
						//setup yyText
						setupyyText();

/* größer */ return( GREATER );

						break;
					}

					//(([[:alpha:]_][[:alnum:]_-]*))
					case 19:
					case 51:
					case 53:
					case 54:
					case 56:
					case 57:
					case 58:
					case 59:
					case 60:
					case 61:
					case 62:
					case 63:
					case 64:
					case 67:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					{
						//setup yyText
						setupyyText();

{
						/* Bezeichner */
						attributeStr->_name = yyStrCpy( yyText );
						return( IDENT );
					}

						break;
					}

					//"^"
					case 20:
					{
						//setup yyText
						setupyyText();

/* binäres xor */ return( BIN_XOR );

						break;
					}

					//"{"
					case 21:
					{
						//setup yyText
						setupyyText();

/* ein neuer Block wird bekonnen */ return( BOPEN );

						break;
					}

					//"|"
					case 22:
					{
						//setup yyText
						setupyyText();

/* binäres oder */ return( BIN_OR );

						break;
					}

					//"}"
					case 23:
					{
						//setup yyText
						setupyyText();

/* ein Block wird beendet */ return( BCLOSE );

						break;
					}

					//"~"
					case 24:
					{
						//setup yyText
						setupyyText();

/* binäres not */ return( BIN_NOT );

						break;
					}

					//"!="
					case 25:
					{
						//setup yyText
						setupyyText();

/* ungleich */ return( NOTEQUAL );

						break;
					}

					//"&&"
					case 26:
					{
						//setup yyText
						setupyyText();

/* logisches und */ return( LOG_AND );

						break;
					}

					//"<<"
					case 27:
					{
						//setup yyText
						setupyyText();

/* links shift */ return( LEFT_SHIFT );

						break;
					}

					//"<="
					case 28:
					{
						//setup yyText
						setupyyText();

/* kleiner gleich */ return( LESS_EQU );

						break;
					}

					//"=="
					case 29:
					{
						//setup yyText
						setupyyText();

/* gleich */ return( EQUAL );

						break;
					}

					//">="
					case 30:
					{
						//setup yyText
						setupyyText();

/* größer gleich */ return( GREATER_EQU );

						break;
					}

					//">>"
					case 31:
					{
						//setup yyText
						setupyyText();

/* rechts shift */ return( RIGHT_SHIFT );

						break;
					}

					//"do"
					case 32:
					{
						//setup yyText
						setupyyText();

/* do-while-Schleife */ return( DO );

						break;
					}

					//"if"
					case 33:
					{
						//setup yyText
						setupyyText();

/* if-Statement */ return( IF_STMT );

						break;
					}

					//"||"
					case 34:
					{
						//setup yyText
						setupyyText();

/* logisches oder */ return( LOG_OR );

						break;
					}

					//(([[:digit:]])+(\.([[:digit:]])+)?(E[+\-]?([[:digit:]])+)?)
					case 35:
					case 65:
					{
						//setup yyText
						setupyyText();

{
						/* Fließpunktzahl */
					}

						break;
					}

					//"int"
					case 36:
					{
						//setup yyText
						setupyyText();

/* integer */ return( INT );

						break;
					}

					//"bool"
					case 37:
					{
						//setup yyText
						setupyyText();

/* bool-Typ */ return( BOOL );

						break;
					}

					//"char"
					case 38:
					{
						//setup yyText
						setupyyText();

/* char-Typ */ return( CHAR );

						break;
					}

					//"else"
					case 39:
					{
						//setup yyText
						setupyyText();

/* else-Teil */ return( ELSE_STMT );

						break;
					}

					//"long"
					case 40:
					{
						//setup yyText
						setupyyText();

/* long-Typ */ return( LONG );

						break;
					}

					//"true"
					case 41:
					{
						//setup yyText
						setupyyText();

/* Boolsches true */ return( TRUE );

						break;
					}

					//"false"
					case 42:
					{
						//setup yyText
						setupyyText();

/* Boolsches false */ return( FALSE );

						break;
					}

					//"short"
					case 43:
					{
						//setup yyText
						setupyyText();

/* short-Typ */ return( SHORT );

						break;
					}

					//"while"
					case 44:
					{
						//setup yyText
						setupyyText();

/* while-Schleife */ return( WHILE );

						break;
					}

					//^([[:blank:]]*)(\r?\n)
					case 45:
					{
						//setup yyText
						setupyyText();

/* allows blank lines in section 1 */

						break;
					}

					//^"/*"
					case 46:
					{
						//setup yyText
						setupyyText();

{
						//scanne einen C-Kommentar
						cComment = true;
						yyPushState( SC_COMMENT );
					}

						break;
					}

					//^"//".*
					case 47:
					{
						//setup yyText
						setupyyText();

/* C++-Kommentar */

						break;
					}

					//[^*\n]+
					case 88:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//[^*\n]*(\r?\n)
					case 89:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*"
					case 90:
					{
						//setup yyText
						setupyyText();

;

						break;
					}

					//"*/"
					case 91:
					{
						//setup yyText
						setupyyText();

{
				//sind wir noch in der Analyse eines C-Kommentars?
				if( cComment == true )
					//ja, die oberste SC entfernen
					yyPopState();
			}

						break;
					}


					default:
					{
						//unable to accept, backtracking or error
						if( lastAcceptingState >= 0 )
						{
							//set back to last accept position
							state = lastAcceptingState;
							pos = lastAcceptingPos;

#ifdef SSLEX_DEBUG
							//backtracking
							cout << "Backtracking, set new state " << state << "\n";
#endif
							//now accept with last accept position
							continue;
						}

						else
						{
							//error
							error( *startPos );

							//remove character
							pos++;
						}

						break;
					}
				}

				//setup some stuff
				yyDoBeforeRule();

				//exit while-loop
				break;

			}while( 1 );

			//Ende der Eingabe erreicht?
			if( pos == end )
				//Ja
				break;
		}
	}

	//call eof-rules
	return( endOfLine() );
}


void SSLEXScanner::yyDoBeforeRule( void )
{
	//set some stuff before a new rule is scanned

	//reset
	lastAcceptingState = -1;

	//base position for lexem
	startPos = pos;

	//are we at the beginning of a line?
	if( ( pos == basePos ) || ( pos[-1] == '\n' ) )
		//setup state
		state = setupState( baseState );

	else
		//base-State
		state = baseState;
}


void SSLEXScanner::error( uchar c )
{
	//simple error handling routine
	ulong		i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//did already an error occur in that sc?
	if( !err[i][c] )
	{
		//No, print an error message
		cerr << "line " << yyLineno << ": SC " << scName[i] << ": Illegal character " << transChar[c] << "!\n";

		//mark to avoid ever lasting loops
		err[i][c]++;
	}
}


void SSLEXScanner::setupYYLineno( char *beg, char *end )
{
	//setup yyLineno
	ulong	len = end - beg, i;
	int		nl = 0;

	//count newlines
	for( i = 0; i < len; i++ )
	{
		//newline?
		if( beg[i] == '\n' )
			nl++;
	}

	//add to yyLineno
	yyLineno += nl;
}


void SSLEXScanner::setupyyText( void )
{
	//insert text in yytext
	ulong	len;
	char	*tmp;

	//reg. expression one-character?
	if( pos == startPos )
		//yes, move to next character
		pos++;

	//get length of lexem
	yyLeng = pos - startPos;

	//concatenate token? (yyMore)
	if( concatenate == true )
	{
		//yes, append
		len = strlen( yyText );

		//enough space?
		if( yyTextLen <= ( yyLeng + len ) )
		{
			//extend memory

			//fix yyTextLen
			yyTextLen = yyLeng + len;

			//get enough memory für lexem
			tmp = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );

			//copy string
			strcpy( tmp, yyText );

			//release memory
			if( yyText )
				delete[] ( yyText );

			//copy adress
			yyText = tmp;
		}

		//append
		strncat( yyText, startPos, yyLeng );

		//zero
		yyText[yyLeng + len] = 0;

		//set up yyLeng
		yyLeng += len;

		//next time we want to set up yyText as usual
		concatenate = false;
	}

	else
	{
		//enough space?
		if( yyTextLen <= yyLeng )
		{
			//extend memory
			if( yyText )
				delete[] ( yyText );

			//fix yyTextLen
			yyTextLen = yyLeng;

			//get enough memory für lexem
			yyText = new( char[yyTextLen + SSLEX_YYTEXTSIZE] );
		}

		//insert
		strncpy( yyText, startPos, yyLeng );

		//end with zere
		yyText[yyLeng] = 0;
	}

	//setup yyLineno
	setupYYLineno( startPos, pos );
}


ulong SSLEXScanner::setupState( ulong baseState )
{
	//setup state for begin-of-line-rules
	ulong	state = baseState, i;

	//test if the current state is valid
	switch( baseState )
	{
		case INITIAL:
		case SC_COMMENT:
		{
			//it is right the next state;
			state++;
			break;
		}

		default:
		{
			//ups, unknown start condition
			cerr << "SSLEXScanner::setupState: Line " << yyLineno << ": Unknown start condition!\n";
			exit( 1 );
		}
	}

#ifdef SSLEX_DEBUG
	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//print debugging information
	cout << "switch to " << scName[i] << "\n";
#endif

	//return state
	return( state );
}


void SSLEXScanner::setStartCondition( ulong state )
{
	//set a new start condition
	switch( state )
	{
		case INITIAL:
		{
			//set new start condition
			baseState = INITIAL;
			break;
		}

		case SC_COMMENT:
		{
			//set new start condition
			baseState = SC_COMMENT;
			break;
		}


		default:
		{
			//unknown start condition
			cerr << "SSLEXScanner::setStartCondition: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore call
			break;
		}
	}
}


ulong SSLEXScanner::getYYLeng( void )
{
	//return length of yyText
	return( yyLeng );
}


ulong SSLEXScanner::getYYLineno( void )
{
	//return line number
	return( yyLineno );
}


char *SSLEXScanner::getYYText( void )
{
	//return yyText
	return( yyText );
}


char *SSLEXScanner::yyStrCpy( char *txt )
{
	//return txt in it's own memory
	ulong	len;
	char	*tmp;

	//length of txt
	len = strlen( txt );

	//get memory for txt
	tmp = new( char[len + 1] );

	//copy
	strcpy( tmp, txt );

	//zero
	tmp[len] = 0;

	//return
	return( tmp );
}


void SSLEXScanner::yyLess( int n )
{
	//returns all but the first n characters of yyText back to the input

	//check
	if( ( n < 0 ) || ( n > yyLeng ) )
	{
		//bad n
		cerr << "SSLEXScanner::yyLess: Line " << yyLineno << ": Bad argument!\n";

		//ignore
		return;
	}

	//zero
	yyText[n] = 0;

	//return to input spring
	pos -= ( yyLeng - n );
}


void SSLEXScanner::yyPushState( ulong newState )
{
	/*
		Pushes the current start condition onto the top of the start condition stack
		and switches to newState as though you have used BEGIN( newState ).
	*/

	//enough memory
	if( scStackPos == scStackSize )
		//enlarge start condition stack
		enlargeSCStack();

	//put on stack
	scStack[scStackPos++] = baseState;

	//switch to new state
	BEGIN( newState );
}


void SSLEXScanner::yyPopState( void )
{
	//pops the top of the start condition stack and switches to it

	//underflow?
	if( scStackPos <= 0 )
		//error
		cerr << "SSLEXScanner::yyPopState: Line " << yyLineno << ": Start condition stack underflow!\n";

	else
	{
		//get new SC state
		ulong	newState = scStack[--scStackPos];

		//switch to it
		BEGIN( newState );

		//set new state
		state = newState;
	}
}


ulong SSLEXScanner::yyTopState( void )
{
	//returns the top of the start condition stack without altering its contents
	return( scStack[scStackPos - 1] );
}


void SSLEXScanner::enlargeSCStack( void )
{
	//enlarge start condition stack
	ulong	*tmp;

	//get enough memory
	tmp = new( ulong[scStackSize + SCStackSize] );

	//copy old content
	memcpy( tmp, scStack, sizeof( ulong ) * scStackSize );

	//free old memory?
	if( scStack )
		//yes
		delete[] ( scStack );

	//set new adress
	scStack = tmp;

	//add size
	scStackSize += SCStackSize;
}


void SSLEXScanner::yyUnput( unsigned char c )
{
	//puts the character c back to the input stream
	ulong	len = basePosLength++;
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + 2] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now insert c
	txt[diff] = c;

	//append rest of the input
	memcpy( &txt[diff + 1], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + 1] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + 1];

	//set new beginning
	basePos = txt;
}


void SSLEXScanner::yyUnput( char *str )
{
	//puts the string str back to the input stream
	ulong	len = basePosLength, strLen = strlen( str );
	int		diff = pos - basePos;
	char	*txt;

	//get enough memory to push back character
	txt = new( char[len + strLen + 1] );

	//copy to current position
	memcpy( txt, basePos, sizeof( char ) * diff );

	//now append str
	strcpy( &txt[diff], str );

	//append rest of the input
	memcpy( &txt[strLen + diff], pos, sizeof( char ) * ( len - diff ) );

	//zero
	txt[len + strLen] = 0;

	//free old memory
	delete[] ( basePos );

	//set new position
	pos = startPos = &txt[diff];

	//set new end
	end = &txt[len + strLen + 1];

	//set new beginning
	basePos = txt;

	//correct basePosLength
	basePosLength += strLen;
}


char SSLEXScanner::yyInput( void )
{
	//return the next character to be scanned
	return( *pos++ );
}


#ifdef SSLEX_DEBUG
void SSLEXScanner::mainDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char			tmp[200], *transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//get current sc
	for( i = 0; i < scSize; i++ )
	{
		//equal?
		if( scIndex[i] == baseState )
			break;
	}

	//current line
	cout << endl << "current line: " << getYYLineno() << endl;

	//print the next 40 chars of the input
	txtFilter( pos, tmp, 40 );
	cout << "current pos: " << tmp << endl;

	//current SC
	cout << "current start condition: " << scName[i] << endl;

	//current state
	cout << "current state: " << state << endl;

	//current character
	cout << "current character: " << transChar[c] << endl;

	//print assocciated regular expression
	cout << "associated regular expressions:" << endl;

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << endl;

	//print ssLexTable
	cout << "ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << endl << endl;
}


void SSLEXScanner::shiftDebug( unsigned char c )
{
	//print debugging information
	SSLEXDebugStr	*d = &debugStr[state];
	ulong			i;
	char		*transChar[] = {
	  "\\0",   "\\1",   "\\2",   "\\3",   "\\4",   "\\5",   "\\6",  "\\a",  "\\b",  "\\t",  "\\n",  "\\v",
	 "\\f",  "\\r", "0x0e", "0x0f", "0x10", "0x11", "0x12", "0x13", "0x14", "0x15", "0x16", "0x17",
	"0x18", "0x19", "0x1a", "0x1b", "0x1c", "0x1d", "0x1e", "0x1f",    " ",    "!",   "\"",    "#",
	   "$",    "%",    "&",    "'",    "(",    ")",    "*",    "+",    ",",    "-",    ".",    "/",
	   "0",    "1",    "2",    "3",    "4",    "5",    "6",    "7",    "8",    "9",    ":",    ";",
	   "<",    "=",    ">",    "?",    "@",    "A",    "B",    "C",    "D",    "E",    "F",    "G",
	   "H",    "I",    "J",    "K",    "L",    "M",    "N",    "O",    "P",    "Q",    "R",    "S",
	   "T",    "U",    "V",    "W",    "X",    "Y",    "Z",    "[",    "\\", "]",    "^",    "_",
	   "`",    "a",    "b",    "c",    "d",    "e",    "f",    "g",    "h",    "i",    "j",    "k",
	   "l",    "m",    "n",    "o",    "p",    "q",    "r",    "s",    "t",    "u",    "v",    "w",
	   "x",    "y",    "z",    "{",    "|",    "}",    "~",    "DEL",
	   "128",  "129",  "130",  "131",  "132",  "133",  "134",  "135",  "136",  "137",
	   "138",  "139",  "140",  "141",  "142",  "143",  "144",  "145",  "146",  "147",
	   "148",  "149",  "150",  "151",  "152",  "153",  "154",  "155",  "156",  "157",
	   "158",  "159",  "160",  "161",  "162",  "163",  "164",  "165",  "166",  "167",
	   "168",  "169",  "170",  "171",  "172",  "173",  "174",  "175",  "176",  "177",
	   "178",  "179",  "180",  "181",  "182",  "183",  "184",  "185",  "186",  "187",
	   "188",  "189",  "190",  "191",  "192",  "193",  "194",  "195",  "196",  "197",
	   "198",  "199",  "200",  "201",  "202",  "203",  "204",  "205",  "206",  "207",
	   "208",  "209",  "210",  "211",  "212",  "213",  "214",  "215",  "216",  "217",
	   "218",  "219",  "220",  "221",  "222",  "223",  "224",  "225",  "226",  "227",
	   "228",  "229",  "230",  "231",  "232",  "233",  "234",  "235",  "236",  "237",
	   "238",  "239",  "240",  "241",  "242",  "243",  "244",  "245",  "246",  "247",
	   "248",  "249",  "250",  "251",  "252",  "253",  "254" };

	//shift?
	cout << "shift ssLexTable[" << state << "][" << transChar[c] << "] = " << ssLexTable[state][c] << "\n";

	//accepting state?
	if( ssLexAccept[state] )
		//yes
		cout << "ssLexAccept[" << state << "] = " << ssLexAccept[state] << " -> " << acceptRegText[ssLexAccept[state]] << "\n";

	//all associated reg. expressions
	for( i = 0; i < d->indexCnt; i++ )
		//print
		cout << regText[d->index[i]] << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::acceptDebug( void )
{
	//print debugging information

	//accept?
	if( ssLexAccept[state] )
		//yes
		cout << "accepting with " << acceptRegText[ssLexAccept[state]] << "\n";

	else
		//backtrack
		cout << "backtracking to state " << lastAcceptingState << "\n";

	//newline
	cout << "\n";
}


void SSLEXScanner::txtFilter( char *from, char *to, ulong cnt )
{
	//copy cnt bytes from from to to, but transform escape sequences into
	//readable text form
	ulong	i;
	char	c, tmp[10];

	//init
	*to = 0;

	//as long as there is another char
	for( i = 0; i < cnt; i++ )
	{
		//get char
		c = *from++;

		//is it printable?
		if( !isprint( c ) )
		{
			//transform into readable
			switch( c )
			{
				//newline?
				case '\n':
				{
					//newline
					strcat( to, "\\n" );
					break;
				}

				//Backspace
				case '\b':
				{
					//Backspace
					strcat( to, "\\b" );
					break;
				}

				//Linefeed
				case '\f':
				{
					//Linefeed
					strcat( to, "\\f" );
					break;
				}

				//carriage return
				case '\r':
				{
					//carriage return
					strcat( to, "\\r" );
					break;
				}

				//Tabulator
				case '\t':
				{
					//Tabulator
					strcat( to, "\\t" );
					break;
				}

#if __STDC__
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\a" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\v" );
					break;
				}
#else
				//bing
				case '\a':
				{
					//bing
					strcat( to, "\\007" );
					break;
				}

				//vertical tab
				case '\v':
				{
					//vertical tab
					strcat( to, "\\013" );
					break;
				}
#endif

				default:
				{
					//neither of the above
					sprintf( tmp, "%x", c );

					//append
					strcat( to, tmp );
				}
			}
		}

		else
		{
			//yes, printable
			sprintf( tmp, "%c", c );

			//append
			strcat( to, tmp );
		}
	}
}
#endif

int SSLEXScanner::endOfLine( void )
{
	//call eof-rules

	//action depends on start condition
	switch( baseState )
	{
		case INITIAL:
		{
			//default action
			yyTerminate();

			break;
		}

		case SC_COMMENT:
		{
			//default action
			yyTerminate();

			break;
		}


		default:
		{
			//Unknown start condition
			cerr << "SSLEXScanner::endOfLine: Line " << yyLineno << ": Unknown start condition!\n";

			//ignore
			break;
		}
	}

	//this should never be executed!
	return( 0 );
}



	//eigene Erweiterungen und Hilfsroutinen

void SSLEXScanner::init( void )
{
	//initialize user defined variables
}


void SSLEXScanner::deinit( void )
{
	//deinitialize user defined variables
}



